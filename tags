!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
ACE400_4WDataDir	.\\Globals.h	/^	CString ACE400_4WDataDir;			\/\/ ACE400ÀÇ 4W data Dir ("D:\\\\log4w");$/;"	m	struct:sFILE_DATA	typeref:typename:CString
AFX_ACE400GageDLG_H__A60D6315_99C4_46C0_A323_42C7B357B0A2__INCLUDED_	.\\MainDialog.h	/^#define AFX_ACE400GageDLG_H__A60D6315_99C4_46C0_A323_42C7B357B0A2__INCLUDED_$/;"	d
AFX_ACE400Gage_H__CB3F7139_0C6D_46B6_A240_563945A8EA0D__INCLUDED_	.\\ACE400Gage.h	/^#define AFX_ACE400Gage_H__CB3F7139_0C6D_46B6_A240_563945A8EA0D__INCLUDED_$/;"	d
AFX_CELLRANGE_H__F86EF761_725A_11D1_ABBA_00A0243D1382__INCLUDED_	.\\gridctrl_src\\CellRange.h	/^#define AFX_CELLRANGE_H__F86EF761_725A_11D1_ABBA_00A0243D1382__INCLUDED_$/;"	d
AFX_CONFIGDIALOG_H__3DE95E71_32E5_4F38_B70B_2B62B3A9707F__INCLUDED_	.\\ConfigDialog.h	/^#define AFX_CONFIGDIALOG_H__3DE95E71_32E5_4F38_B70B_2B62B3A9707F__INCLUDED_$/;"	d
AFX_ERROR_H__8D3D34FA_3024_4D5F_81B6_D01841D85268__INCLUDED_	.\\Error.h	/^#define AFX_ERROR_H__8D3D34FA_3024_4D5F_81B6_D01841D85268__INCLUDED_$/;"	d
AFX_FILESYSINFO_H__B85E18EA_5A5B_4129_A54C_D02D75AE6A24__INCLUDED_	.\\FileSysInfo.h	/^#define AFX_FILESYSINFO_H__B85E18EA_5A5B_4129_A54C_D02D75AE6A24__INCLUDED_$/;"	d
AFX_GAGEDIALOG_H__2ECC17B6_A785_4CA6_B46A_85C1648A9469__INCLUDED_	.\\GageDialog.h	/^#define AFX_GAGEDIALOG_H__2ECC17B6_A785_4CA6_B46A_85C1648A9469__INCLUDED_$/;"	d
AFX_GLOBALS_H__FDA16379_4221_4970_8471_B8FBD39D2C1E__INCLUDED_	.\\Globals.h	/^#define AFX_GLOBALS_H__FDA16379_4221_4970_8471_B8FBD39D2C1E__INCLUDED_$/;"	d
AFX_GRIDCTRL_H__519FA702_722C_11D1_ABBA_00A0243D1382__INCLUDED_	.\\gridctrl_src\\GridCtrl.h	/^#define AFX_GRIDCTRL_H__519FA702_722C_11D1_ABBA_00A0243D1382__INCLUDED_$/;"	d
AFX_GRIDDROPTARGET_H__5C610981_BD36_11D1_97CD_00A0243D1382__INCLUDED_	.\\gridctrl_src\\GridDropTarget.h	/^#define AFX_GRIDDROPTARGET_H__5C610981_BD36_11D1_97CD_00A0243D1382__INCLUDED_$/;"	d
AFX_INPLACEEDIT_H__ECD42821_16DF_11D1_992F_895E185F9C72__INCLUDED_	.\\gridctrl_src\\InPlaceEdit.h	/^#define AFX_INPLACEEDIT_H__ECD42821_16DF_11D1_992F_895E185F9C72__INCLUDED_$/;"	d
AFX_INPLACELIST_H__ECD42822_16DF_11D1_992F_895E185F9C72__INCLUDED_	.\\gridctrl_src\\InPlaceList.h	/^#define AFX_INPLACELIST_H__ECD42822_16DF_11D1_992F_895E185F9C72__INCLUDED_$/;"	d
AFX_MEMDC_H__CA1D3541_7235_11D1_ABBA_00A0243D1382__INCLUDED_	.\\gridctrl_src\\MemDC.h	/^#define AFX_MEMDC_H__CA1D3541_7235_11D1_ABBA_00A0243D1382__INCLUDED_$/;"	d
AFX_STDAFX_H__162EFA7F_2283_401E_A2DD_16AA1B7EE8C3__INCLUDED_	.\\StdAfx.h	/^#define AFX_STDAFX_H__162EFA7F_2283_401E_A2DD_16AA1B7EE8C3__INCLUDED_$/;"	d
AFX_TITLETIP_H__C7165DA1_187F_11D1_992F_895E185F9C72__INCLUDED_	.\\gridctrl_src\\TitleTip.h	/^#define AFX_TITLETIP_H__C7165DA1_187F_11D1_992F_895E185F9C72__INCLUDED_$/;"	d
AGF	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
AggregateAvg	.\\ChartDirector\\chartdir.h	/^		AggregateAvg = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
AggregateCount	.\\ChartDirector\\chartdir.h	/^		AggregateCount = 9$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
AggregateFirst	.\\ChartDirector\\chartdir.h	/^		AggregateFirst = 7,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
AggregateLast	.\\ChartDirector\\chartdir.h	/^		AggregateLast = 8,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
AggregateMax	.\\ChartDirector\\chartdir.h	/^		AggregateMax = 5,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
AggregateMed	.\\ChartDirector\\chartdir.h	/^		AggregateMed = 4,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
AggregateMin	.\\ChartDirector\\chartdir.h	/^		AggregateMin = 3,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
AggregatePercentile	.\\ChartDirector\\chartdir.h	/^		AggregatePercentile = 6,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
AggregateStdDev	.\\ChartDirector\\chartdir.h	/^		AggregateStdDev = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
AggregateSum	.\\ChartDirector\\chartdir.h	/^		AggregateSum = 0,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201103
Alignment	.\\ChartDirector\\chartdir.h	/^	enum Alignment$/;"	g	namespace:CD_NAMESPACE::Chart
Alignment	.\\ChartDirector\\chartdir.h	/^enum Alignment$/;"	g	namespace:CD_NAMESPACE
AllPassFilter	.\\ChartDirector\\chartdir.h	/^	static inline int AllPassFilter()$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
AltDashLine	.\\ChartDirector\\chartdir.h	/^		AltDashLine = 0x0A050505$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200203
AltDashLine	.\\ChartDirector\\chartdir.h	/^	AltDashLine = 0x0A050505$/;"	e	enum:CD_NAMESPACE::__anone890a0201603
AngularAxis	.\\ChartDirector\\chartdir.h	/^	AngularAxis(AngularAxisInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::AngularAxis
AngularAxis	.\\ChartDirector\\chartdir.h	/^class AngularAxis : public AutoDestroy, protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
AngularAxisScale	.\\ChartDirector\\chartdir.h	/^		AngularAxisScale = XAxisScale, RadialAxisScale = YAxisScale };$/;"	e	enum:CD_NAMESPACE::Chart::ScaleType
AngularAxisScale	.\\ChartDirector\\chartdir.h	/^	AngularAxisScale = XAxisScale, RadialAxisScale = YAxisScale };$/;"	e	enum:CD_NAMESPACE::ScaleType
AngularMeter	.\\ChartDirector\\chartdir.h	/^	AngularMeter(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::AngularMeter
AngularMeter	.\\ChartDirector\\chartdir.h	/^class AngularMeter : public BaseMeter$/;"	c	namespace:CD_NAMESPACE
AntiAlias	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias };$/;"	e	enum:CD_NAMESPACE::TTFText::AntiAliasMode
AntiAlias	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias, ClearType, CompatAntiAlias = 6 };$/;"	e	enum:CD_NAMESPACE::Chart::AntiAliasMode
AntiAlias	.\\ChartDirector\\chartdir.h	/^enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias };$/;"	e	enum:CD_NAMESPACE::AntiAliasMode
AntiAliasMode	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias };$/;"	g	class:CD_NAMESPACE::TTFText
AntiAliasMode	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias, ClearType, CompatAntiAlias = 6 };$/;"	g	namespace:CD_NAMESPACE::Chart
AntiAliasMode	.\\ChartDirector\\chartdir.h	/^enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias };$/;"	g	namespace:CD_NAMESPACE
AreaLayer	.\\ChartDirector\\chartdir.h	/^	AreaLayer(AreaLayerInternal *_ptr) : Layer(AreaLayer2Layer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::AreaLayer
AreaLayer	.\\ChartDirector\\chartdir.h	/^class AreaLayer : public Layer$/;"	c	namespace:CD_NAMESPACE
ArrayMath	.\\ChartDirector\\chartdir.h	/^	ArrayMath(DoubleArray a) : ptr(CArrayMath_create(a.data, a.len)) {}$/;"	f	class:CD_NAMESPACE::ArrayMath
ArrayMath	.\\ChartDirector\\chartdir.h	/^	ArrayMath(const ArrayMath &rhs) { DoubleArray r  = rhs; ptr = CArrayMath_create(r.data, r.len);/;"	f	class:CD_NAMESPACE::ArrayMath
ArrayMath	.\\ChartDirector\\chartdir.h	/^class ArrayMath$/;"	c	namespace:CD_NAMESPACE
ArrowPointer	.\\ChartDirector\\chartdir.h	/^	enum { DiamondPointer, TriangularPointer, ArrowPointer, ArrowPointer2, LinePointer, PencilPoint/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200a03
ArrowPointer2	.\\ChartDirector\\chartdir.h	/^	enum { DiamondPointer, TriangularPointer, ArrowPointer, ArrowPointer2, LinePointer, PencilPoint/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200a03
ArrowShape	.\\ChartDirector\\chartdir.h	/^	static inline int ArrowShape(double angle = 0, double widthRatio = 1, double stemWidthRatio = 0/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
AutoAntiAlias	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias };$/;"	e	enum:CD_NAMESPACE::TTFText::AntiAliasMode
AutoAntiAlias	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias, ClearType, CompatAntiAlias = 6 };$/;"	e	enum:CD_NAMESPACE::Chart::AntiAliasMode
AutoAntiAlias	.\\ChartDirector\\chartdir.h	/^enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias };$/;"	e	enum:CD_NAMESPACE::AntiAliasMode
AutoDestroy	.\\ChartDirector\\chartdir.h	/^class AutoDestroy$/;"	c	namespace:CD_NAMESPACE
AutoGrid	.\\ChartDirector\\chartdir.h	/^	enum { AutoGrid = -2 };$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200103
AutoSize	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::AutoSize()$/;"	f	class:CGridCtrl	typeref:typename:void
AutoSizeColumn	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::AutoSizeColumn(int nCol)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
AutoSizeColumns	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::AutoSizeColumns()$/;"	f	class:CGridCtrl	typeref:typename:void
AutoSizeRow	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::AutoSizeRow(int nRow)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
AutoSizeRows	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::AutoSizeRows()$/;"	f	class:CGridCtrl	typeref:typename:void
Axis	.\\ChartDirector\\chartdir.h	/^	Axis(AxisInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::Axis
Axis	.\\ChartDirector\\chartdir.h	/^class Axis : public AutoDestroy, protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
B0	.\\TDist.cpp	/^#define B0 /;"	d	file:
B1	.\\TDist.cpp	/^#define B1 /;"	d	file:
B10	.\\TDist.cpp	/^#define B10 /;"	d	file:
B12	.\\TDist.cpp	/^#define B12 /;"	d	file:
B14	.\\TDist.cpp	/^#define B14 /;"	d	file:
B16	.\\TDist.cpp	/^#define B16 /;"	d	file:
B2	.\\TDist.cpp	/^#define B2 /;"	d	file:
B4	.\\TDist.cpp	/^#define B4 /;"	d	file:
B6	.\\TDist.cpp	/^#define B6 /;"	d	file:
B8	.\\TDist.cpp	/^#define B8 /;"	d	file:
BCHARTDIR_HDR	.\\ChartDirector\\bchartdir.h	/^#define BCHARTDIR_HDR$/;"	d
BEGIN_MESSAGE_MAP	.\\ACE400Gage.cpp	/^BEGIN_MESSAGE_MAP(CACE400GageApp, CWinApp)$/;"	f
BEGIN_MESSAGE_MAP	.\\ChartViewer.cpp	/^BEGIN_MESSAGE_MAP(CChartViewer,	CStatic)$/;"	f
BEGIN_MESSAGE_MAP	.\\ChartViewer.cpp	/^BEGIN_MESSAGE_MAP(CRectCtrl, CStatic)$/;"	f
BEGIN_MESSAGE_MAP	.\\ChartViewer.cpp	/^BEGIN_MESSAGE_MAP(CViewPortControl,	CStatic)$/;"	f
BEGIN_MESSAGE_MAP	.\\ConfigDialog.cpp	/^BEGIN_MESSAGE_MAP(CConfigDialog, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	.\\GageDialog.cpp	/^BEGIN_MESSAGE_MAP(CGageDialog, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	.\\MainDialog.cpp	/^BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	.\\MainDialog.cpp	/^BEGIN_MESSAGE_MAP(CMainDialog, CDialog)$/;"	f
BEGIN_MESSAGE_MAP	.\\gridctrl_src\\GridCtrl.cpp	/^BEGIN_MESSAGE_MAP(CGridCtrl, CWnd)$/;"	f
BEGIN_MESSAGE_MAP	.\\gridctrl_src\\GridDropTarget.cpp	/^BEGIN_MESSAGE_MAP(CGridDropTarget, COleDropTarget)$/;"	f
BEGIN_MESSAGE_MAP	.\\gridctrl_src\\InPlaceEdit.cpp	/^BEGIN_MESSAGE_MAP(CInPlaceEdit, CEdit)$/;"	f
BEGIN_MESSAGE_MAP	.\\gridctrl_src\\InPlaceList.cpp	/^BEGIN_MESSAGE_MAP(CComboEdit, CEdit)$/;"	f
BEGIN_MESSAGE_MAP	.\\gridctrl_src\\InPlaceList.cpp	/^BEGIN_MESSAGE_MAP(CInPlaceList, CComboBox)$/;"	f
BEGIN_MESSAGE_MAP	.\\gridctrl_src\\TitleTip.cpp	/^BEGIN_MESSAGE_MAP(CTitleTip, CWnd)$/;"	f
BMP	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
BMP	.\\ChartDirector\\chartdir.h	/^enum ImgFormat {PNG, GIF, JPG, WMP, BMP};$/;"	e	enum:CD_NAMESPACE::ImgFormat
BOTTOM_MARGIN	.\\gridctrl_src\\GridCtrl.cpp	/^#define BOTTOM_MARGIN /;"	d	file:
BSplineFilter	.\\ChartDirector\\chartdir.h	/^	enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
BSplineFilter	.\\ChartDirector\\chartdir.h	/^enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
BackgroundColor	.\\ChartDirector\\chartdir.h	/^		BackgroundColor = (int)0xffff0000,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200303
BackgroundColor	.\\ChartDirector\\chartdir.h	/^	BackgroundColor = 0xffff0000,$/;"	e	enum:CD_NAMESPACE::__anone890a0201703
BarLayer	.\\ChartDirector\\chartdir.h	/^	BarLayer(BarLayerInternal *_ptr) : Layer(BarLayer2Layer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::BarLayer
BarLayer	.\\ChartDirector\\chartdir.h	/^class BarLayer : public Layer$/;"	c	namespace:CD_NAMESPACE
BaseAxis	.\\ChartDirector\\chartdir.h	/^typedef Axis BaseAxis;$/;"	t	namespace:CD_NAMESPACE	typeref:typename:Axis
BaseBoxLayer	.\\ChartDirector\\chartdir.h	/^	BaseBoxLayer(BaseBoxLayerInternal *_ptr) : Layer(BaseBoxLayer2Layer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::BaseBoxLayer
BaseBoxLayer	.\\ChartDirector\\chartdir.h	/^class BaseBoxLayer : public Layer$/;"	c	namespace:CD_NAMESPACE
BaseChart	.\\ChartDirector\\chartdir.h	/^	BaseChart() : ptr(0), refCount(new int), drawAreaCache(0) { *refCount = 1; }$/;"	f	class:CD_NAMESPACE::BaseChart
BaseChart	.\\ChartDirector\\chartdir.h	/^	BaseChart(BaseChart *rhs) : ptr(rhs->ptr), refCount(rhs->refCount), drawAreaCache(0) { ++(*refC/;"	f	class:CD_NAMESPACE::BaseChart
BaseChart	.\\ChartDirector\\chartdir.h	/^class BaseChart : protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
BaseMeter	.\\ChartDirector\\chartdir.h	/^	BaseMeter() : ptr(0) {}$/;"	f	class:CD_NAMESPACE::BaseMeter
BaseMeter	.\\ChartDirector\\chartdir.h	/^class BaseMeter : public BaseChart$/;"	c	namespace:CD_NAMESPACE
BesselFilter	.\\ChartDirector\\chartdir.h	/^		HammingFilter, BlackmanFilter, BesselFilter };$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
BesselFilter	.\\ChartDirector\\chartdir.h	/^	HammingFilter, BlackmanFilter, BesselFilter };$/;"	e	enum:CD_NAMESPACE::CDFilterType
BlackmanFilter	.\\ChartDirector\\chartdir.h	/^		HammingFilter, BlackmanFilter, BesselFilter };$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
BlackmanFilter	.\\ChartDirector\\chartdir.h	/^	HammingFilter, BlackmanFilter, BesselFilter };$/;"	e	enum:CD_NAMESPACE::CDFilterType
Bottom	.\\ChartDirector\\chartdir.h	/^		Top = TopCenter, Bottom = BottomCenter,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
Bottom	.\\ChartDirector\\chartdir.h	/^	Bottom = BottomCenter$/;"	e	enum:CD_NAMESPACE::Alignment
BottomCenter	.\\ChartDirector\\chartdir.h	/^		BottomLeft = 1,	BottomCenter = 2,	BottomRight = 3,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
BottomCenter	.\\ChartDirector\\chartdir.h	/^	BottomLeft = 1,	BottomCenter = 2,	BottomRight = 3,$/;"	e	enum:CD_NAMESPACE::Alignment
BottomLeft	.\\ChartDirector\\chartdir.h	/^		BottomLeft = 1,	BottomCenter = 2,	BottomRight = 3,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
BottomLeft	.\\ChartDirector\\chartdir.h	/^	BottomLeft = 1,	BottomCenter = 2,	BottomRight = 3,$/;"	e	enum:CD_NAMESPACE::Alignment
BottomLeft2	.\\ChartDirector\\chartdir.h	/^		BottomLeft2 = 12, BottomRight2 = 13$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
BottomRight	.\\ChartDirector\\chartdir.h	/^		BottomLeft = 1,	BottomCenter = 2,	BottomRight = 3,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
BottomRight	.\\ChartDirector\\chartdir.h	/^	BottomLeft = 1,	BottomCenter = 2,	BottomRight = 3,$/;"	e	enum:CD_NAMESPACE::Alignment
BottomRight2	.\\ChartDirector\\chartdir.h	/^		BottomLeft2 = 12, BottomRight2 = 13$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
Box	.\\ChartDirector\\chartdir.h	/^	Box(BoxInternal *_ptr) : DrawObj(Box2DrawObj(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::Box
Box	.\\ChartDirector\\chartdir.h	/^class Box : public DrawObj$/;"	c	namespace:CD_NAMESPACE
BoxFilter	.\\ChartDirector\\chartdir.h	/^	enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
BoxFilter	.\\ChartDirector\\chartdir.h	/^enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
BoxWhiskerLayer	.\\ChartDirector\\chartdir.h	/^	BoxWhiskerLayer(BoxWhiskerLayerInternal *_ptr) : BaseBoxLayer(BoxWhiskerLayer2BaseBoxLayer(_ptr/;"	f	class:CD_NAMESPACE::BoxWhiskerLayer
BoxWhiskerLayer	.\\ChartDirector\\chartdir.h	/^class BoxWhiskerLayer : public BaseBoxLayer$/;"	c	namespace:CD_NAMESPACE
CACE400GageApp	.\\ACE400Gage.h	/^class CACE400GageApp : public CWinApp$/;"	c
CAL_AD_BUF_SIZE	.\\System.h	/^#define CAL_AD_BUF_SIZE	/;"	d
CAL_AD_COUNT	.\\System.h	/^#define	CAL_AD_COUNT	/;"	d
CAL_CHECK_HW	.\\Error.h	/^		CAL_CHECK_HW,$/;"	e	enum:ErrID
CAL_CHECK_TEST_CONDITION	.\\Error.h	/^		CAL_CHECK_TEST_CONDITION,$/;"	e	enum:ErrID
CATCH	.\\gridctrl_src\\GridCtrl.h	/^#define CATCH(/;"	d
CAboutDlg	.\\MainDialog.cpp	/^CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)$/;"	f	class:CAboutDlg
CAboutDlg	.\\MainDialog.cpp	/^class CAboutDlg : public CDialog$/;"	c	file:
CCHARTDIR_HDR	.\\ChartDirector\\chartdir.h	/^#define CCHARTDIR_HDR$/;"	d
CCellID	.\\gridctrl_src\\CellRange.h	/^    CCellID(int nRow = -1, int nCol = -1) : row(nRow), col(nCol) {}$/;"	f	class:CCellID
CCellID	.\\gridctrl_src\\CellRange.h	/^class CCellID$/;"	c
CCellRange	.\\gridctrl_src\\CellRange.h	/^    CCellRange(int nMinRow = -1, int nMinCol = -1, int nMaxRow = -1, int nMaxCol = -1)$/;"	f	class:CCellRange
CCellRange	.\\gridctrl_src\\CellRange.h	/^class CCellRange$/;"	c
CChartViewer	.\\ChartViewer.cpp	/^CChartViewer::CChartViewer()$/;"	f	class:CChartViewer
CChartViewer	.\\ChartViewer.h	/^class CChartViewer : public CStatic, public ViewPortManager, private CStaticHelper$/;"	c
CComboEdit	.\\gridctrl_src\\InPlaceList.cpp	/^CComboEdit::CComboEdit()$/;"	f	class:CComboEdit
CComboEdit	.\\gridctrl_src\\InPlaceList.h	/^class CComboEdit : public CEdit$/;"	c
CConfigDialog	.\\ConfigDialog.cpp	/^CConfigDialog::CConfigDialog(CWnd* pParent \/*=NULL*\/)$/;"	f	class:CConfigDialog
CConfigDialog	.\\ConfigDialog.h	/^class CConfigDialog : public CDialog$/;"	c
CDFilterType	.\\ChartDirector\\chartdir.h	/^	enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	g	namespace:CD_NAMESPACE::Chart
CDFilterType	.\\ChartDirector\\chartdir.h	/^enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	g	namespace:CD_NAMESPACE
CDMLTable	.\\ChartDirector\\chartdir.h	/^	CDMLTable(CDMLTableInternal *_ptr) : DrawObj(CDMLTable2DrawObj(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::CDMLTable
CDMLTable	.\\ChartDirector\\chartdir.h	/^class CDMLTable : public DrawObj, protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
CD_NAMESPACE	.\\ChartDirector\\chartdir.h	/^namespace CD_NAMESPACE$/;"	n
CD_NAMESPACE	.\\ChartViewer.h	/^namespace CD_NAMESPACE$/;"	n
CError	.\\Error.cpp	/^CError::CError()$/;"	f	class:CError
CError	.\\Error.h	/^class CError  $/;"	c
CFileSysInfo	.\\FileSysInfo.h	/^	CFileSysInfo()$/;"	f	class:CFileSysInfo
CFileSysInfo	.\\FileSysInfo.h	/^class CFileSysInfo  $/;"	c
CGageDialog	.\\GageDialog.cpp	/^CGageDialog::CGageDialog(CWnd* pParent \/*=NULL*\/)$/;"	f	class:CGageDialog
CGageDialog	.\\GageDialog.h	/^class CGageDialog : public CDialog$/;"	c
CGlobals	.\\Globals.cpp	/^CGlobals::CGlobals()$/;"	f	class:CGlobals
CGlobals	.\\Globals.h	/^class CGlobals  $/;"	c
CGridCell	.\\gridctrl_src\\GridCtrl.h	/^    CGridCell() $/;"	f	class:CGridCell
CGridCell	.\\gridctrl_src\\GridCtrl.h	/^class CGridCell : public CObject$/;"	c
CGridCtrl	.\\gridctrl_src\\GridCtrl.cpp	/^CGridCtrl::CGridCtrl(int nRows, int nCols, int nFixedRows, int nFixedCols)$/;"	f	class:CGridCtrl
CGridCtrl	.\\gridctrl_src\\GridCtrl.h	/^class CGridCtrl : public CWnd$/;"	c
CGridDropTarget	.\\gridctrl_src\\GridDropTarget.cpp	/^CGridDropTarget::CGridDropTarget()$/;"	f	class:CGridDropTarget
CGridDropTarget	.\\gridctrl_src\\GridDropTarget.h	/^class CGridDropTarget : public COleDropTarget$/;"	c
CHARTDIR_DLLAPI	.\\ChartDirector\\bchartdir.h	/^#define CHARTDIR_DLLAPI$/;"	d
CInPlaceEdit	.\\gridctrl_src\\InPlaceEdit.cpp	/^CInPlaceEdit::CInPlaceEdit(CWnd* pParent, CRect& rect, DWORD dwStyle, UINT nID,$/;"	f	class:CInPlaceEdit
CInPlaceEdit	.\\gridctrl_src\\InPlaceEdit.h	/^class CInPlaceEdit : public CEdit$/;"	c
CInPlaceList	.\\gridctrl_src\\InPlaceList.cpp	/^CInPlaceList::CInPlaceList(CWnd* pParent, CRect& rect, DWORD dwStyle, UINT nID,$/;"	f	class:CInPlaceList
CInPlaceList	.\\gridctrl_src\\InPlaceList.h	/^class CInPlaceList : public CComboBox$/;"	c
CMainDialog	.\\MainDialog.h	/^class CMainDialog : public CDialog$/;"	c
CMemDC	.\\gridctrl_src\\MemDC.h	/^    CMemDC(CDC* pDC) : CDC()$/;"	f	class:CMemDC
CMemDC	.\\gridctrl_src\\MemDC.h	/^class CMemDC : public CDC$/;"	c
CRectCtrl	.\\ChartViewer.h	/^class CRectCtrl : public CStatic$/;"	c
CStaticHelper	.\\ChartViewer.cpp	/^CStaticHelper::CStaticHelper() : m_currentHBITMAP(0), m_WCCisV6(0), m_testMode(false) $/;"	f	class:CStaticHelper
CStaticHelper	.\\ChartViewer.h	/^class CStaticHelper$/;"	c
CSysInfo03	.\\FileSysInfo.h	/^struct CSysInfo03  \/\/SETUP Block$/;"	s
CSysInfo19	.\\FileSysInfo.h	/^struct CSysInfo19  \/\/SETUP Cell(Block-Piece)$/;"	s
CSysInfo25	.\\FileSysInfo.h	/^struct CSysInfo25  \/\/SETUP piece$/;"	s
CSysInfoView01	.\\FileSysInfo.h	/^struct CSysInfoView01  \/\/Path   FilePathJig$/;"	s
CSystem	.\\System.h	/^	CSystem() $/;"	f	class:CSystem
CSystem	.\\System.h	/^class CSystem  $/;"	c
CTitleTip	.\\gridctrl_src\\TitleTip.cpp	/^CTitleTip::CTitleTip()$/;"	f	class:CTitleTip
CTitleTip	.\\gridctrl_src\\TitleTip.h	/^class CTitleTip : public CWnd$/;"	c
CVN_MouseLeaveChart	.\\ChartViewer.h	/^#define CVN_MouseLeaveChart /;"	d
CVN_MouseLeavePlotArea	.\\ChartViewer.h	/^#define CVN_MouseLeavePlotArea /;"	d
CVN_MouseMoveChart	.\\ChartViewer.h	/^#define CVN_MouseMoveChart /;"	d
CVN_MouseMovePlotArea	.\\ChartViewer.h	/^#define CVN_MouseMovePlotArea /;"	d
CVN_ViewPortChanged	.\\ChartViewer.h	/^#define CVN_ViewPortChanged	/;"	d
CViewPortControl	.\\ChartViewer.cpp	/^CViewPortControl::CViewPortControl()$/;"	f	class:CViewPortControl
CViewPortControl	.\\ChartViewer.h	/^class CViewPortControl : public CStatic, public ViewPortControlBase, private CStaticHelper$/;"	c
CalcGageStudyOutput	.\\GageDialog.cpp	/^void CGageDialog::CalcGageStudyOutput(int type) $/;"	f	class:CGageDialog	typeref:typename:void
CandleStickLayer	.\\ChartDirector\\chartdir.h	/^	CandleStickLayer(CandleStickLayerInternal *_ptr) : BaseBoxLayer(CandleStickLayer2BaseBoxLayer(_/;"	f	class:CD_NAMESPACE::CandleStickLayer
CandleStickLayer	.\\ChartDirector\\chartdir.h	/^class CandleStickLayer : public BaseBoxLayer$/;"	c	namespace:CD_NAMESPACE
CatromFilter	.\\ChartDirector\\chartdir.h	/^		CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
CatromFilter	.\\ChartDirector\\chartdir.h	/^	CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
Center	.\\ChartDirector\\chartdir.h	/^		Left = 4,		Center = 5,			Right = 6,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
Center	.\\ChartDirector\\chartdir.h	/^	Left = 4,		Center = 5,			Right = 6,$/;"	e	enum:CD_NAMESPACE::Alignment
Chart	.\\ChartDirector\\chartdir.h	/^namespace Chart $/;"	n	namespace:CD_NAMESPACE
Chart	.\\ChartViewer.h	/^namespace Chart$/;"	n	namespace:CD_NAMESPACE
ChartBackZ	.\\ChartDirector\\chartdir.h	/^		ChartBackZ = 0x100,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200c03
ChartDir_AllPassFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_AllPassFilterTag = 7,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_ArrowSymbol	.\\ChartDirector\\chartdir.h	/^		ChartDir_ArrowSymbol = 18$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
ChartDir_CustomSymbol	.\\ChartDirector\\chartdir.h	/^		ChartDir_CustomSymbol = 14,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
ChartDir_NonePassFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_NonePassFilterTag = 8,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_Polygon2Symbol	.\\ChartDirector\\chartdir.h	/^		ChartDir_Polygon2Symbol = 12,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
ChartDir_PolygonSymbol	.\\ChartDirector\\chartdir.h	/^		ChartDir_PolygonSymbol = 11,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
ChartDir_RegularSpacingFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_RegularSpacingFilterTag = 6,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_SelectItemFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_SelectItemFilterTag = 9,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_StarSymbol	.\\ChartDirector\\chartdir.h	/^		ChartDir_StarSymbol = 13,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
ChartDir_StartOfDayFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_StartOfDayFilterTag = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_StartOfHourFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_StartOfHourFilterTag = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_StartOfMinuteFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_StartOfMinuteFilterTag = 10,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_StartOfMonthFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_StartOfMonthFilterTag = 4,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_StartOfSecondFilterTag	.\\ChartDirector\\chartdir.h	/^        ChartDir_StartOfSecondFilterTag = 11$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_StartOfWeekFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_StartOfWeekFilterTag = 3,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartDir_StartOfYearFilterTag	.\\ChartDirector\\chartdir.h	/^		ChartDir_StartOfYearFilterTag = 5,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200f03
ChartFrontZ	.\\ChartDirector\\chartdir.h	/^		ChartFrontZ = 0xffff,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200c03
CircleLayout	.\\ChartDirector\\chartdir.h	/^	enum { SideLayout, CircleLayout };$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200403
CircleLayout	.\\ChartDirector\\chartdir.h	/^enum {SideLayout, CircleLayout};$/;"	e	enum:CD_NAMESPACE::__anone890a0201803
CircleShape	.\\ChartDirector\\chartdir.h	/^		CircleShape = 7,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
CircleShapeNoShading	.\\ChartDirector\\chartdir.h	/^		CircleShapeNoShading = 10,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
CircleSymbol	.\\ChartDirector\\chartdir.h	/^		CircleSymbol = 7,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
CircleSymbol	.\\ChartDirector\\chartdir.h	/^	CircleSymbol = 7,$/;"	e	enum:CD_NAMESPACE::SymbolType
ClearGrid_BackGround	.\\GageDialog.cpp	/^void CGageDialog::ClearGrid_BackGround()$/;"	f	class:CGageDialog	typeref:typename:void
ClearGrid_Data	.\\GageDialog.cpp	/^void CGageDialog::ClearGrid_Data()$/;"	f	class:CGageDialog	typeref:typename:void
ClearType	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias, ClearType, CompatAntiAlias = 6 };$/;"	e	enum:CD_NAMESPACE::Chart::AntiAliasMode
ClearTypeColor	.\\ChartDirector\\chartdir.h	/^	static inline int ClearTypeColor(double gamma = 0)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
ClearTypeMono	.\\ChartDirector\\chartdir.h	/^	static inline int ClearTypeMono(double gamma = 0)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
ColorAxis	.\\ChartDirector\\chartdir.h	/^	ColorAxis(ColorAxisInternal *_ptr) : Axis(ColorAxis2Axis(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::ColorAxis
ColorAxis	.\\ChartDirector\\chartdir.h	/^class ColorAxis : public Axis$/;"	c	namespace:CD_NAMESPACE
CompatAntiAlias	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias, ClearType, CompatAntiAlias = 6 };$/;"	e	enum:CD_NAMESPACE::Chart::AntiAliasMode
ConcaveShading	.\\ChartDirector\\chartdir.h	/^		ConcaveShading = 4,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200503
ConstrainedLinearRegression	.\\ChartDirector\\chartdir.h	/^		ConstrainedLinearRegression = 0,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200803
ContourLayer	.\\ChartDirector\\chartdir.h	/^	ContourLayer(ContourLayerInternal *_ptr) : Layer(ContourLayer2Layer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::ContourLayer
ContourLayer	.\\ChartDirector\\chartdir.h	/^class ContourLayer : public Layer$/;"	c	namespace:CD_NAMESPACE
CopyTextFromGrid	.\\gridctrl_src\\GridCtrl.cpp	/^COleDataSource* CGridCtrl::CopyTextFromGrid()$/;"	f	class:CGridCtrl	typeref:typename:COleDataSource *
Count	.\\gridctrl_src\\CellRange.h	/^    int  Count() { return (m_nMaxRow - m_nMinRow + 1) * (m_nMaxCol - m_nMinCol + 1); }$/;"	f	class:CCellRange	typeref:typename:int
Create	.\\ChartViewer.cpp	/^BOOL CRectCtrl::Create(CWnd	*pParentWnd, COLORREF c)$/;"	f	class:CRectCtrl	typeref:typename:BOOL
Create	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::Create(const RECT& rect, CWnd* pParentWnd, UINT nID, DWORD dwStyle)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
CreateCell	.\\gridctrl_src\\GridCtrl.cpp	/^CGridCell* CGridCtrl::CreateCell(int nRow, int nCol)$/;"	f	class:CGridCtrl	typeref:typename:CGridCell *
CreateDragImage	.\\gridctrl_src\\GridCtrl.cpp	/^CImageList* CGridCtrl::CreateDragImage(CPoint *pHotSpot)$/;"	f	class:CGridCtrl	typeref:typename:CImageList *
CreateInPlaceEditControl	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::CreateInPlaceEditControl(CRect& rect, DWORD dwStyle, UINT nID,$/;"	f	class:CGridCtrl	typeref:typename:void
Cross2Shape	.\\ChartDirector\\chartdir.h	/^	static inline int Cross2Shape(double width = 0.5)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
Cross2Symbol	.\\ChartDirector\\chartdir.h	/^		Cross2Symbol = 9,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
Cross2Symbol	.\\ChartDirector\\chartdir.h	/^	Cross2Symbol = 9$/;"	e	enum:CD_NAMESPACE::SymbolType
CrossShape	.\\ChartDirector\\chartdir.h	/^	static inline int CrossShape(double width = 0.5)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
CrossSymbol	.\\ChartDirector\\chartdir.h	/^		CrossSymbol = 8,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
CrossSymbol	.\\ChartDirector\\chartdir.h	/^	CrossSymbol = 8,$/;"	e	enum:CD_NAMESPACE::SymbolType
CutSelectedText	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::CutSelectedText()$/;"	f	class:CGridCtrl	typeref:typename:void
DATA_LOAD	.\\FileSysInfo.h	/^							DATA_LOAD 			\/\/ 2$/;"	e	enum:DATA_LOAD_SAVE_TYPE
DATA_LOAD_SAVE_TYPE	.\\FileSysInfo.h	/^enum DATA_LOAD_SAVE_TYPE  { DATA_NO_SAVE_LOAD,	\/\/ ¹Ì»ç¿ë$/;"	g
DATA_NO_SAVE_LOAD	.\\FileSysInfo.h	/^enum DATA_LOAD_SAVE_TYPE  { DATA_NO_SAVE_LOAD,	\/\/ ¹Ì»ç¿ë$/;"	e	enum:DATA_LOAD_SAVE_TYPE
DATA_SAVE	.\\FileSysInfo.h	/^							DATA_SAVE, 			\/\/ 1$/;"	e	enum:DATA_LOAD_SAVE_TYPE
DELAYED_MOUSE_MOVE_TIMER	.\\ChartViewer.cpp	/^enum { UPDATE_VIEW_PORT_TIMER = 1, DELAYED_MOUSE_MOVE_TIMER = 2 };$/;"	e	enum:__anon6d4e3f840203	file:
DEVICE	.\\Error.h	/^	DEVICE=1000,$/;"	e	enum:ErrID
DIO_EXIT_ERR	.\\Error.h	/^			DIO_EXIT_ERR,$/;"	e	enum:ErrID
DIO_INIT_ERR	.\\Error.h	/^			DIO_INIT_ERR,$/;"	e	enum:ErrID
DashLine	.\\ChartDirector\\chartdir.h	/^		DashLine = 0x0505,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200203
DashLine	.\\ChartDirector\\chartdir.h	/^	DashLine = 0x0505,$/;"	e	enum:CD_NAMESPACE::__anone890a0201603
DataBound	.\\ChartDirector\\chartdir.h	/^	static const double DataBound = -1.7E-100;$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const double
DataColor	.\\ChartDirector\\chartdir.h	/^		DataColor = (int)0xffff0008,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200303
DataColor	.\\ChartDirector\\chartdir.h	/^	DataColor = 0xffff0008,$/;"	e	enum:CD_NAMESPACE::__anone890a0201703
DataCombineMethod	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side };$/;"	g	class:CD_NAMESPACE::Layer
DataCombineMethod	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	g	namespace:CD_NAMESPACE::Chart
DataCombineMethod	.\\ChartDirector\\chartdir.h	/^enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	g	namespace:CD_NAMESPACE
DataDir	.\\Globals.h	/^	CString DataDir;					$/;"	m	struct:sFILE_DATA	typeref:typename:CString
DataSet	.\\ChartDirector\\chartdir.h	/^	DataSet(DataSetInternal *_ptr) : ptr(_ptr), useYAxisCache(0) {}$/;"	f	class:CD_NAMESPACE::DataSet
DataSet	.\\ChartDirector\\chartdir.h	/^class DataSet : public AutoDestroy, protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
Def_MaxBlock1	.\\FileSysInfo.h	/^#define Def_MaxBlock1 /;"	d
Def_MaxPiece1	.\\FileSysInfo.h	/^#define	Def_MaxPiece1	/;"	d
DefaultShading	.\\ChartDirector\\chartdir.h	/^		DefaultShading = 0,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200503
Delay	.\\Globals.cpp	/^void Delay(UINT delaytime, UINT unit)$/;"	f	typeref:typename:void
DeleteAllItems	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::DeleteAllItems()$/;"	f	class:CGridCtrl	typeref:typename:BOOL
DeleteColumn	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::DeleteColumn(int nColumn)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
DeleteNonFixedRows	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::DeleteNonFixedRows()$/;"	f	class:CGridCtrl	typeref:typename:BOOL
DeleteRow	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::DeleteRow(int nRow)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
Depth	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side };$/;"	e	enum:CD_NAMESPACE::Layer::DataCombineMethod
Depth	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::Chart::DataCombineMethod
Depth	.\\ChartDirector\\chartdir.h	/^enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::DataCombineMethod
DestroyWindow	.\\GageDialog.cpp	/^BOOL CGageDialog::DestroyWindow() $/;"	f	class:CGageDialog	typeref:typename:BOOL
DestroyWindow	.\\MainDialog.cpp	/^BOOL CMainDialog::DestroyWindow() $/;"	f	class:CMainDialog	typeref:typename:BOOL
DiamondPointer	.\\ChartDirector\\chartdir.h	/^	enum { DiamondPointer, TriangularPointer, ArrowPointer, ArrowPointer2, LinePointer, PencilPoint/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200a03
DiamondShape	.\\ChartDirector\\chartdir.h	/^		DiamondShape = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
DiamondSymbol	.\\ChartDirector\\chartdir.h	/^		DiamondSymbol = 2,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
DiamondSymbol	.\\ChartDirector\\chartdir.h	/^	DiamondSymbol = 2,$/;"	e	enum:CD_NAMESPACE::SymbolType
DirectionHorizontal	.\\ChartDirector\\chartdir.h	/^		DirectionHorizontal = 0, $/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201203
DirectionHorizontalVertical	.\\ChartDirector\\chartdir.h	/^		DirectionHorizontalVertical = 2$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201203
DirectionVertical	.\\ChartDirector\\chartdir.h	/^		DirectionVertical = 1, $/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201203
DisplayGageStudyChart	.\\GageDialog.cpp	/^void CGageDialog::DisplayGageStudyChart(int type) $/;"	f	class:CGageDialog	typeref:typename:void
DisplayGageStudyOutput	.\\GageDialog.cpp	/^void CGageDialog::DisplayGageStudyOutput(int type) $/;"	f	class:CGageDialog	typeref:typename:void
Display_mohmGridData	.\\GageDialog.cpp	/^void CGageDialog::Display_mohmGridData()$/;"	f	class:CGageDialog	typeref:typename:void
Display_mohmGridHeader	.\\GageDialog.cpp	/^void CGageDialog::Display_mohmGridHeader()$/;"	f	class:CGageDialog	typeref:typename:void
DitherMethod	.\\ChartDirector\\chartdir.h	/^	enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	g	class:CD_NAMESPACE::DrawArea
DitherMethod	.\\ChartDirector\\chartdir.h	/^	enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	g	namespace:CD_NAMESPACE::Chart
DitherMethod	.\\ChartDirector\\chartdir.h	/^enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	g	namespace:CD_NAMESPACE
DoDataExchange	.\\ConfigDialog.cpp	/^void CConfigDialog::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CConfigDialog	typeref:typename:void
DoDataExchange	.\\GageDialog.cpp	/^void CGageDialog::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CGageDialog	typeref:typename:void
DoDataExchange	.\\MainDialog.cpp	/^void CAboutDlg::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CAboutDlg	typeref:typename:void
DoDataExchange	.\\MainDialog.cpp	/^void CMainDialog::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CMainDialog	typeref:typename:void
DoEvents	.\\Globals.cpp	/^void DoEvents(DWORD dwMilliseconds)$/;"	f	typeref:typename:void
DotDashLine	.\\ChartDirector\\chartdir.h	/^		DotDashLine = 0x05050205,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200203
DotDashLine	.\\ChartDirector\\chartdir.h	/^	DotDashLine = 0x05050205,$/;"	e	enum:CD_NAMESPACE::__anone890a0201603
DotLine	.\\ChartDirector\\chartdir.h	/^		DotLine = 0x0202,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200203
DotLine	.\\ChartDirector\\chartdir.h	/^	DotLine = 0x0202,$/;"	e	enum:CD_NAMESPACE::__anone890a0201603
DoubleArray	.\\memblock.h	/^	DoubleArray() : len(0), data(0) {}$/;"	f	class:DoubleArray
DoubleArray	.\\memblock.h	/^	DoubleArray(const double *_data, int _len) : len(_len), data(_data) {}$/;"	f	class:DoubleArray
DoubleArray	.\\memblock.h	/^class DoubleArray$/;"	c
DrawArea	.\\ChartDirector\\chartdir.h	/^	DrawArea() : ptr(CDrawArea_create()), own_this(true) {}$/;"	f	class:CD_NAMESPACE::DrawArea
DrawArea	.\\ChartDirector\\chartdir.h	/^	DrawArea(DrawAreaInternal *_ptr) : ptr(_ptr), own_this(false) {}$/;"	f	class:CD_NAMESPACE::DrawArea
DrawArea	.\\ChartDirector\\chartdir.h	/^class DrawArea : public AutoDestroy$/;"	c	namespace:CD_NAMESPACE
DrawCell	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::DrawCell(CDC* pDC, int nRow, int nCol, CRect rect, BOOL bEraseBk)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
DrawFixedCell	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::DrawFixedCell(CDC* pDC, int nRow, int nCol, CRect rect, BOOL bEraseBk)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
DrawObj	.\\ChartDirector\\chartdir.h	/^	DrawObj(DrawObjInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::DrawObj
DrawObj	.\\ChartDirector\\chartdir.h	/^class DrawObj : public AutoDestroy$/;"	c	namespace:CD_NAMESPACE
END_CATCH	.\\gridctrl_src\\GridCtrl.h	/^#define END_CATCH$/;"	d
ERR	.\\Error.cpp	/^CError ERR;$/;"	v	typeref:typename:CError
ERRMSG_TABLE_LEN	.\\Error.h	/^#define ERRMSG_TABLE_LEN /;"	d
ESTOP	.\\Error.h	/^	ESTOP=10,$/;"	e	enum:ErrID
EmptyCell	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::EmptyCell(CGridCell* pCell, int nRow, int nCol)$/;"	f	class:CGridCtrl	typeref:typename:void
EnableDragAndDrop	.\\gridctrl_src\\GridCtrl.h	/^    void EnableDragAndDrop(BOOL bAllow = TRUE)    { m_bAllowDragAndDrop = bAllow;     }$/;"	f	class:CGridCtrl	typeref:typename:void
EnableSelection	.\\gridctrl_src\\GridCtrl.h	/^    void EnableSelection(BOOL bEnable = TRUE)     { ResetSelectedRange(); m_bEnableSelection = b/;"	f	class:CGridCtrl	typeref:typename:void
EnableTitleTips	.\\gridctrl_src\\GridCtrl.h	/^    void EnableTitleTips(BOOL bEnable = TRUE)     { m_bTitleTips = bEnable;           }$/;"	f	class:CGridCtrl	typeref:typename:void
EndEdit	.\\gridctrl_src\\InPlaceEdit.cpp	/^void CInPlaceEdit::EndEdit()$/;"	f	class:CInPlaceEdit	typeref:typename:void
EndEdit	.\\gridctrl_src\\InPlaceList.cpp	/^void CInPlaceList::EndEdit()$/;"	f	class:CInPlaceList	typeref:typename:void
EndPoints	.\\ChartDirector\\chartdir.h	/^	enum ScaleType { PixelScale, XAxisScale, YAxisScale, EndPoints,$/;"	e	enum:CD_NAMESPACE::Chart::ScaleType
EnsureVisible	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::EnsureVisible(int nRow, int nCol)$/;"	f	class:CGridCtrl	typeref:typename:void
EnsureVisible	.\\gridctrl_src\\GridCtrl.h	/^    void EnsureVisible(CCellID &cell)       { EnsureVisible(cell.row, cell.col); }$/;"	f	class:CGridCtrl	typeref:typename:void
EraseBkgnd	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::EraseBkgnd(CDC* pDC) $/;"	f	class:CGridCtrl	typeref:typename:void
ErrID	.\\Error.h	/^enum ErrID {$/;"	g
ErrMsg	.\\Error.cpp	/^int ErrMsg(int nMboxType, BOOL bTraceOn)$/;"	f	typeref:typename:int
ErrMsgTable	.\\Error.h	/^static sErrMsg ErrMsgTable[] = $/;"	v	typeref:typename:sErrMsg[]
ErrorDiffusion	.\\ChartDirector\\chartdir.h	/^	enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	e	enum:CD_NAMESPACE::Chart::DitherMethod
ErrorDiffusion	.\\ChartDirector\\chartdir.h	/^	enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	e	enum:CD_NAMESPACE::DrawArea::DitherMethod
ErrorDiffusion	.\\ChartDirector\\chartdir.h	/^enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	e	enum:CD_NAMESPACE::DitherMethod
ExpandColumnsToFit	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::ExpandColumnsToFit()$/;"	f	class:CGridCtrl	typeref:typename:void
ExpandRowsToFit	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::ExpandRowsToFit()$/;"	f	class:CGridCtrl	typeref:typename:void
ExpandToFit	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::ExpandToFit()$/;"	f	class:CGridCtrl	typeref:typename:void
ExponentialRegression	.\\ChartDirector\\chartdir.h	/^		ExponentialRegression = -1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200803
FINANCECHART_HDR	.\\ChartDirector\\FinanceChart.h	/^#define FINANCECHART_HDR$/;"	d
FLAG	.\\Error.h	/^	FLAG=500,$/;"	e	enum:ErrID
FLAG_EVEN_SOURCE_LEAK	.\\Error.h	/^		FLAG_EVEN_SOURCE_LEAK,$/;"	e	enum:ErrID
FLAG_FILE_CANNOT_OPEN	.\\Error.h	/^		FLAG_FILE_CANNOT_OPEN,$/;"	e	enum:ErrID
FLAG_FILE_CHECK_SUM	.\\Error.h	/^		FLAG_FILE_CHECK_SUM,$/;"	e	enum:ErrID
FLAG_FILE_NOT_FOUND	.\\Error.h	/^		FLAG_FILE_NOT_FOUND,$/;"	e	enum:ErrID
FLAG_FILE_UNPROPER_PARAMETER	.\\Error.h	/^		FLAG_FILE_UNPROPER_PARAMETER,$/;"	e	enum:ErrID
FLAG_ODD_SOURCE_LEAK	.\\Error.h	/^		FLAG_ODD_SOURCE_LEAK,$/;"	e	enum:ErrID
FLAG_SINK_CANNOT_OFF	.\\Error.h	/^		FLAG_SINK_CANNOT_OFF,$/;"	e	enum:ErrID
FLAG_SINK_LEAK	.\\Error.h	/^		FLAG_SINK_LEAK,$/;"	e	enum:ErrID
FLAG_SOURCE_CANNOT_OFF	.\\Error.h	/^		FLAG_SOURCE_CANNOT_OFF,$/;"	e	enum:ErrID
FLAG_SOURCE_LEAK	.\\Error.h	/^		FLAG_SOURCE_LEAK,$/;"	e	enum:ErrID
FLAG_SOURCE_OR_SINK_CANNOT_ON	.\\Error.h	/^		FLAG_SOURCE_OR_SINK_CANNOT_ON,$/;"	e	enum:ErrID
FOOTER_HEIGHT	.\\gridctrl_src\\GridCtrl.cpp	/^#define FOOTER_HEIGHT /;"	d	file:
FUNC	.\\Globals.h	/^#define FUNC(/;"	d
FileExists	.\\Globals.cpp	/^BOOL FileExists(CString strFilePath)$/;"	f	typeref:typename:BOOL
FileSysInfo01	.\\FileSysInfo.cpp	/^CFileSysInfo 	FileSysInfo01;$/;"	v	typeref:typename:CFileSysInfo
FinanceChart	.\\ChartDirector\\FinanceChart.h	/^    public: FinanceChart(int width): MultiChart(width, 1)$/;"	f	class:FinanceChart
FinanceChart	.\\ChartDirector\\FinanceChart.h	/^class FinanceChart : public MultiChart$/;"	c
FinanceSimulator	.\\ChartDirector\\chartdir.h	/^	FinanceSimulator(const char *seed, double startTime, double endTime, int resolution) :$/;"	f	class:CD_NAMESPACE::FinanceSimulator
FinanceSimulator	.\\ChartDirector\\chartdir.h	/^	FinanceSimulator(int seed, double startTime, double endTime, int resolution) :$/;"	f	class:CD_NAMESPACE::FinanceSimulator
FinanceSimulator	.\\ChartDirector\\chartdir.h	/^class FinanceSimulator$/;"	c	namespace:CD_NAMESPACE
FlatShading	.\\ChartDirector\\chartdir.h	/^		FlatShading = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200503
ForcePalette	.\\ChartDirector\\chartdir.h	/^	enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	e	enum:CD_NAMESPACE::Chart::PaletteMode
ForcePalette	.\\ChartDirector\\chartdir.h	/^	enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	e	enum:CD_NAMESPACE::DrawArea::PaletteMode
ForcePalette	.\\ChartDirector\\chartdir.h	/^enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	e	enum:CD_NAMESPACE::PaletteMode
FreeCursors	.\\ChartViewer.cpp	/^class FreeCursors$/;"	c	file:
GAP	.\\gridctrl_src\\GridCtrl.cpp	/^#define GAP /;"	d	file:
GIF	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
GIF	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat {PNG, GIF, JPG, WMP};$/;"	e	enum:CD_NAMESPACE::BaseChart::ImgFormat
GIF	.\\ChartDirector\\chartdir.h	/^enum ImgFormat {PNG, GIF, JPG, WMP, BMP};$/;"	e	enum:CD_NAMESPACE::ImgFormat
GRIDCONTROL_NO_CLIPBOARD	.\\gridctrl_src\\GridCtrl.h	/^#define GRIDCONTROL_NO_CLIPBOARD /;"	d
GRIDCONTROL_NO_DRAGDROP	.\\gridctrl_src\\GridCtrl.h	/^#define GRIDCONTROL_NO_DRAGDROP /;"	d
GRIDCONTROL_NO_PRINTING	.\\gridctrl_src\\GridCtrl.h	/^#define GRIDCONTROL_NO_PRINTING /;"	d
GRIDCONTROL_NO_TITLETIPS	.\\gridctrl_src\\GridCtrl.h	/^#define GRIDCONTROL_NO_TITLETIPS /;"	d
GRIDCTRL_CLASSNAME	.\\gridctrl_src\\GridCtrl.h	/^#define GRIDCTRL_CLASSNAME /;"	d
GRID_COL_MOHM_BASE	.\\GageDialog.cpp	/^#define		GRID_COL_MOHM_BASE	/;"	d	file:
GRID_COL_NO	.\\GageDialog.cpp	/^#define		GRID_COL_NO	/;"	d	file:
GRID_ROW	.\\gridctrl_src\\GridCtrl.h	/^typedef CTypedPtrArray<CObArray, CGridCell*> GRID_ROW;$/;"	t	typeref:typename:CTypedPtrArray<CObArray,CGridCell * >
GVHT_ABOVE	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_ABOVE /;"	d
GVHT_BELOW	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_BELOW /;"	d
GVHT_COLHDR	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_COLHDR /;"	d
GVHT_COLSIZER	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_COLSIZER /;"	d
GVHT_DATA	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_DATA /;"	d
GVHT_LEFT	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_LEFT /;"	d
GVHT_RIGHT	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_RIGHT /;"	d
GVHT_ROWHDR	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_ROWHDR /;"	d
GVHT_ROWSIZER	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_ROWSIZER /;"	d
GVHT_TOPLEFT	.\\gridctrl_src\\GridCtrl.h	/^#define GVHT_TOPLEFT /;"	d
GVIF_BKCLR	.\\gridctrl_src\\GridCtrl.h	/^#define GVIF_BKCLR /;"	d
GVIF_FGCLR	.\\gridctrl_src\\GridCtrl.h	/^#define GVIF_FGCLR /;"	d
GVIF_FONT	.\\gridctrl_src\\GridCtrl.h	/^#define GVIF_FONT /;"	d
GVIF_FORMAT	.\\gridctrl_src\\GridCtrl.h	/^#define GVIF_FORMAT /;"	d
GVIF_IMAGE	.\\gridctrl_src\\GridCtrl.h	/^#define GVIF_IMAGE /;"	d
GVIF_PARAM	.\\gridctrl_src\\GridCtrl.h	/^#define GVIF_PARAM /;"	d
GVIF_STATE	.\\gridctrl_src\\GridCtrl.h	/^#define GVIF_STATE /;"	d
GVIF_TEXT	.\\gridctrl_src\\GridCtrl.h	/^#define GVIF_TEXT /;"	d
GVIS_DROPHILITED	.\\gridctrl_src\\GridCtrl.h	/^#define GVIS_DROPHILITED /;"	d
GVIS_FIXED	.\\gridctrl_src\\GridCtrl.h	/^#define GVIS_FIXED /;"	d
GVIS_FOCUSED	.\\gridctrl_src\\GridCtrl.h	/^#define GVIS_FOCUSED /;"	d
GVIS_MODIFIED	.\\gridctrl_src\\GridCtrl.h	/^#define GVIS_MODIFIED /;"	d
GVIS_READONLY	.\\gridctrl_src\\GridCtrl.h	/^#define GVIS_READONLY /;"	d
GVIS_SELECTED	.\\gridctrl_src\\GridCtrl.h	/^#define GVIS_SELECTED /;"	d
GVL_BOTH	.\\gridctrl_src\\GridCtrl.h	/^#define GVL_BOTH /;"	d
GVL_HORZ	.\\gridctrl_src\\GridCtrl.h	/^#define GVL_HORZ /;"	d
GVL_NONE	.\\gridctrl_src\\GridCtrl.h	/^#define GVL_NONE /;"	d
GVL_VERT	.\\gridctrl_src\\GridCtrl.h	/^#define GVL_VERT /;"	d
GVNI_ABOVE	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_ABOVE /;"	d
GVNI_ALL	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_ALL /;"	d
GVNI_AREA	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_AREA /;"	d
GVNI_BELOW	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_BELOW /;"	d
GVNI_DROPHILITED	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_DROPHILITED /;"	d
GVNI_FIXED	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_FIXED /;"	d
GVNI_FOCUSED	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_FOCUSED /;"	d
GVNI_MODIFIED	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_MODIFIED /;"	d
GVNI_READONLY	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_READONLY /;"	d
GVNI_SELECTED	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_SELECTED /;"	d
GVNI_TOLEFT	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_TOLEFT /;"	d
GVNI_TORIGHT	.\\gridctrl_src\\GridCtrl.h	/^#define GVNI_TORIGHT /;"	d
GVN_BEGINDRAG	.\\gridctrl_src\\GridCtrl.h	/^#define	GVN_BEGINDRAG /;"	d
GVN_BEGINLABELEDIT	.\\gridctrl_src\\GridCtrl.h	/^#define	GVN_BEGINLABELEDIT /;"	d
GVN_BEGINRDRAG	.\\gridctrl_src\\GridCtrl.h	/^#define	GVN_BEGINRDRAG /;"	d
GVN_COLUMNCLICK	.\\gridctrl_src\\GridCtrl.h	/^#define GVN_COLUMNCLICK /;"	d
GVN_DELETEITEM	.\\gridctrl_src\\GridCtrl.h	/^#define	GVN_DELETEITEM /;"	d
GVN_ENDLABELEDIT	.\\gridctrl_src\\GridCtrl.h	/^#define GVN_ENDLABELEDIT /;"	d
GVN_SELCHANGED	.\\gridctrl_src\\GridCtrl.h	/^#define GVN_SELCHANGED /;"	d
GVN_SELCHANGING	.\\gridctrl_src\\GridCtrl.h	/^#define GVN_SELCHANGING /;"	d
GV_DISPINFO	.\\gridctrl_src\\GridCtrl.h	/^} GV_DISPINFO;$/;"	t	typeref:struct:tagGV_DISPINFO
GV_ITEM	.\\gridctrl_src\\GridCtrl.h	/^} GV_ITEM; $/;"	t	typeref:struct:_GV_ITEM
GarbageContainer	.\\ChartDirector\\chartdir.h	/^	GarbageContainer() : root(0) {}$/;"	f	class:CD_NAMESPACE::GarbageContainer
GarbageContainer	.\\ChartDirector\\chartdir.h	/^class GarbageContainer$/;"	c	namespace:CD_NAMESPACE
GarbagePtr	.\\ChartDirector\\chartdir.h	/^	GarbagePtr(AutoDestroy *_ptr, GarbagePtr *_next) : ptr(_ptr), next(_next) {}$/;"	f	class:CD_NAMESPACE::GarbagePtr
GarbagePtr	.\\ChartDirector\\chartdir.h	/^class GarbagePtr$/;"	c	namespace:CD_NAMESPACE
GaussianFilter	.\\ChartDirector\\chartdir.h	/^		CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
GaussianFilter	.\\ChartDirector\\chartdir.h	/^	CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
Get	.\\Error.h	/^	int		Get() $/;"	f	class:CError	typeref:typename:int
GetBkColor	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF GetBkColor() const                   { return m_crBkColour;              }$/;"	f	class:CGridCtrl	typeref:typename:COLORREF
GetCell	.\\gridctrl_src\\GridCtrl.h	/^inline CGridCell* CGridCtrl::GetCell(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:CGridCell *
GetCellExtent	.\\gridctrl_src\\GridCtrl.cpp	/^CSize CGridCtrl::GetCellExtent(int nRow, int nCol, CDC* pDC)$/;"	f	class:CGridCtrl	typeref:typename:CSize
GetCellFromPt	.\\gridctrl_src\\GridCtrl.cpp	/^CCellID CGridCtrl::GetCellFromPt(CPoint point, BOOL bAllowFixedCellCheck \/*=TRUE*\/) const$/;"	f	class:CGridCtrl	typeref:typename:CCellID
GetCellOrigin	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::GetCellOrigin(const CCellID& cell, LPPOINT p) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetCellOrigin	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::GetCellOrigin(int nRow, int nCol, LPPOINT p) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetCellRange	.\\gridctrl_src\\GridCtrl.cpp	/^CCellRange CGridCtrl::GetCellRange() const$/;"	f	class:CGridCtrl	typeref:typename:CCellRange
GetCellRangeRect	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::GetCellRangeRect(const CCellRange& cellRange, LPRECT lpRect) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetCellRect	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::GetCellRect(const CCellID& cell, LPRECT pRect) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetCellRect	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::GetCellRect(int nRow, int nCol, LPRECT pRect) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetColSpan	.\\gridctrl_src\\CellRange.h	/^    int GetColSpan() const {return m_nMaxCol - m_nMinCol + 1;}$/;"	f	class:CCellRange	typeref:typename:int
GetColumnCount	.\\gridctrl_src\\GridCtrl.h	/^    int  GetColumnCount() const                 { return m_nCols; }$/;"	f	class:CGridCtrl	typeref:typename:int
GetColumnResize	.\\gridctrl_src\\GridCtrl.h	/^    BOOL GetColumnResize() const                  { return m_bAllowColumnResize;      }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetColumnWidth	.\\gridctrl_src\\GridCtrl.cpp	/^int CGridCtrl::GetColumnWidth(int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:int
GetDateAndTime	.\\Globals.cpp	/^void GetDateAndTime(char *datetime)$/;"	f	typeref:typename:void
GetDoubleBuffering	.\\gridctrl_src\\GridCtrl.h	/^    BOOL GetDoubleBuffering() const               { return m_bDoubleBuffer;           }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetDragAndDrop	.\\gridctrl_src\\GridCtrl.h	/^    BOOL GetDragAndDrop() const                   { return m_bAllowDragAndDrop;       }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetFixedBkColor	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF GetFixedBkColor() const              { return m_crFixedBkColour;         } $/;"	f	class:CGridCtrl	typeref:typename:COLORREF
GetFixedColumnCount	.\\gridctrl_src\\GridCtrl.h	/^    int  GetFixedColumnCount() const            { return m_nFixedCols; }$/;"	f	class:CGridCtrl	typeref:typename:int
GetFixedColumnWidth	.\\gridctrl_src\\GridCtrl.cpp	/^int CGridCtrl::GetFixedColumnWidth() const$/;"	f	class:CGridCtrl	typeref:typename:int
GetFixedRowCount	.\\gridctrl_src\\GridCtrl.h	/^    int  GetFixedRowCount() const               { return m_nFixedRows; }$/;"	f	class:CGridCtrl	typeref:typename:int
GetFixedRowHeight	.\\gridctrl_src\\GridCtrl.cpp	/^int CGridCtrl::GetFixedRowHeight() const$/;"	f	class:CGridCtrl	typeref:typename:int
GetFixedTextColor	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF GetFixedTextColor() const            { return m_crFixedTextColour;       }$/;"	f	class:CGridCtrl	typeref:typename:COLORREF
GetFocusCell	.\\gridctrl_src\\GridCtrl.h	/^    CCellID GetFocusCell() const                  { return m_idCurrentCell;           }$/;"	f	class:CGridCtrl	typeref:typename:CCellID
GetGridColor	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF GetGridColor() const                 { return m_crGridColour;            }$/;"	f	class:CGridCtrl	typeref:typename:COLORREF
GetGridLines	.\\gridctrl_src\\GridCtrl.h	/^    int  GetGridLines() const                     { return m_nGridLines;              }$/;"	f	class:CGridCtrl	typeref:typename:int
GetHandleTabKey	.\\gridctrl_src\\GridCtrl.h	/^    BOOL GetHandleTabKey() const                  { return m_bHandleTabKey;           }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetHeaderSort	.\\gridctrl_src\\GridCtrl.h	/^    BOOL GetHeaderSort() const                    { return m_bSortOnClick;            }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetImageList	.\\gridctrl_src\\GridCtrl.h	/^    CImageList* GetImageList() const              { return m_pImageList;              }$/;"	f	class:CGridCtrl	typeref:typename:CImageList *
GetItem	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::GetItem(GV_ITEM* pItem)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetItemBkColour	.\\gridctrl_src\\GridCtrl.cpp	/^COLORREF CGridCtrl::GetItemBkColour(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:COLORREF
GetItemData	.\\gridctrl_src\\GridCtrl.cpp	/^LPARAM CGridCtrl::GetItemData(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:LPARAM
GetItemFgColour	.\\gridctrl_src\\GridCtrl.cpp	/^COLORREF CGridCtrl::GetItemFgColour(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:COLORREF
GetItemFont	.\\gridctrl_src\\GridCtrl.cpp	/^LOGFONT* CGridCtrl::GetItemFont(int nRow, int nCol)$/;"	f	class:CGridCtrl	typeref:typename:LOGFONT *
GetItemFormat	.\\gridctrl_src\\GridCtrl.cpp	/^UINT CGridCtrl::GetItemFormat(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:UINT
GetItemImage	.\\gridctrl_src\\GridCtrl.cpp	/^int CGridCtrl::GetItemImage(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:int
GetItemState	.\\gridctrl_src\\GridCtrl.cpp	/^UINT CGridCtrl::GetItemState(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:UINT
GetItemText	.\\gridctrl_src\\GridCtrl.cpp	/^CString CGridCtrl::GetItemText(int nRow, int nCol)$/;"	f	class:CGridCtrl	typeref:typename:CString
GetListMode	.\\gridctrl_src\\GridCtrl.h	/^    BOOL GetListMode() const                      { return m_bListMode;               }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetMaxCol	.\\gridctrl_src\\CellRange.h	/^    int GetMaxCol() const {return m_nMaxCol;}$/;"	f	class:CCellRange	typeref:typename:int
GetMaxRow	.\\gridctrl_src\\CellRange.h	/^    int GetMaxRow() const {return m_nMaxRow;}$/;"	f	class:CCellRange	typeref:typename:int
GetMicroSecond	.\\Globals.cpp	/^__int64 GetMicroSecond()  \/\/sylee$/;"	f	typeref:typename:__int64
GetMinCol	.\\gridctrl_src\\CellRange.h	/^    int GetMinCol() const {return m_nMinCol;}$/;"	f	class:CCellRange	typeref:typename:int
GetMinRow	.\\gridctrl_src\\CellRange.h	/^    int GetMinRow() const {return m_nMinRow;}$/;"	f	class:CCellRange	typeref:typename:int
GetModified	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::GetModified(int nRow \/*=-1*\/, int nCol \/*=-1*\/)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetMouseMode	.\\gridctrl_src\\GridCtrl.h	/^    int  GetMouseMode() const    { return m_MouseMode; }$/;"	f	class:CGridCtrl	typeref:typename:int
GetMouseScrollLines	.\\gridctrl_src\\GridCtrl.cpp	/^UINT GetMouseScrollLines()$/;"	f	typeref:typename:UINT
GetMsg	.\\Error.cpp	/^BOOL CError::GetMsg(int error_no, CString &title, CString &state, CString &sol)$/;"	f	class:CError	typeref:typename:BOOL
GetNextItem	.\\gridctrl_src\\GridCtrl.cpp	/^CCellID CGridCtrl::GetNextItem(CCellID& cell, int nFlags) const$/;"	f	class:CGridCtrl	typeref:typename:CCellID
GetProcessWorkingSetSize	.\\Globals.cpp	/^SIZE_T GetProcessWorkingSetSize() $/;"	f	typeref:typename:SIZE_T
GetRowCount	.\\gridctrl_src\\GridCtrl.h	/^    int  GetRowCount() const                    { return m_nRows; }$/;"	f	class:CGridCtrl	typeref:typename:int
GetRowHeight	.\\gridctrl_src\\GridCtrl.cpp	/^int CGridCtrl::GetRowHeight(int nRow) const$/;"	f	class:CGridCtrl	typeref:typename:int
GetRowResize	.\\gridctrl_src\\GridCtrl.h	/^    BOOL GetRowResize() const                     { return m_bAllowRowResize;         }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetRowSpan	.\\gridctrl_src\\CellRange.h	/^    int GetRowSpan() const {return m_nMaxRow - m_nMinRow + 1;}$/;"	f	class:CCellRange	typeref:typename:int
GetScrollPos32	.\\gridctrl_src\\GridCtrl.cpp	/^int CGridCtrl::GetScrollPos32(int nBar, BOOL bGetTrackPos \/* = FALSE *\/)$/;"	f	class:CGridCtrl	typeref:typename:int
GetSelectedCellRange	.\\gridctrl_src\\GridCtrl.cpp	/^CCellRange CGridCtrl::GetSelectedCellRange() const$/;"	f	class:CGridCtrl	typeref:typename:CCellRange
GetSelectedCount	.\\gridctrl_src\\GridCtrl.h	/^    int GetSelectedCount() const                  { return m_SelectedCellMap.GetCount(); }$/;"	f	class:CGridCtrl	typeref:typename:int
GetSingleRowSelection	.\\gridctrl_src\\GridCtrl.h	/^    BOOL GetSingleRowSelection()                  { return m_bSingleRowSelection;     }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetTextBkColor	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF GetTextBkColor() const               { return m_crTextBkColour;          }$/;"	f	class:CGridCtrl	typeref:typename:COLORREF
GetTextColor	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF GetTextColor() const                 { return m_crTextColour;            }$/;"	f	class:CGridCtrl	typeref:typename:COLORREF
GetTextExtent	.\\gridctrl_src\\GridCtrl.cpp	/^CSize CGridCtrl::GetTextExtent(LPCTSTR str, BOOL bUseSelectedFont \/* = TRUE *\/)$/;"	f	class:CGridCtrl	typeref:typename:CSize
GetTextRect	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::GetTextRect(const CCellID& cell, LPRECT pRect)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetTextRect	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::GetTextRect(int nRow, int nCol, LPRECT pRect)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetTitleTips	.\\gridctrl_src\\GridCtrl.h	/^    BOOL GetTitleTips()                           { return m_bTitleTips;              }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
GetTopLeft	.\\gridctrl_src\\CellRange.h	/^inline CCellID CCellRange::GetTopLeft() const$/;"	f	class:CCellRange	typeref:typename:CCellID
GetTopleftNonFixedCell	.\\gridctrl_src\\GridCtrl.cpp	/^CCellID CGridCtrl::GetTopleftNonFixedCell() const$/;"	f	class:CGridCtrl	typeref:typename:CCellID
GetUnobstructedNonFixedCellRange	.\\gridctrl_src\\GridCtrl.cpp	/^CCellRange CGridCtrl::GetUnobstructedNonFixedCellRange() const$/;"	f	class:CGridCtrl	typeref:typename:CCellRange
GetVirtualHeight	.\\gridctrl_src\\GridCtrl.cpp	/^long CGridCtrl::GetVirtualHeight() const$/;"	f	class:CGridCtrl	typeref:typename:long
GetVirtualWidth	.\\gridctrl_src\\GridCtrl.cpp	/^long CGridCtrl::GetVirtualWidth() const$/;"	f	class:CGridCtrl	typeref:typename:long
GetVisibleNonFixedCellRange	.\\gridctrl_src\\GridCtrl.cpp	/^CCellRange CGridCtrl::GetVisibleNonFixedCellRange(LPRECT pRect \/*=NULL*\/) const$/;"	f	class:CGridCtrl	typeref:typename:CCellRange
GlassSphere2Shape	.\\ChartDirector\\chartdir.h	/^		GlassSphere2Shape = 16,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
GlassSphereShape	.\\ChartDirector\\chartdir.h	/^		GlassSphereShape = 15,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
GlobalGradientShading	.\\ChartDirector\\chartdir.h	/^		GlobalGradientShading = 3,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200503
GridLinesZ	.\\ChartDirector\\chartdir.h	/^		GridLinesZ = 0x2000$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200c03
HEADER_HEIGHT	.\\gridctrl_src\\GridCtrl.cpp	/^#define HEADER_HEIGHT /;"	d	file:
HLOCDefault	.\\ChartDirector\\chartdir.h	/^	enum { HLOCDefault, HLOCOpenClose, HLOCUpDown };$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200903
HLOCLayer	.\\ChartDirector\\chartdir.h	/^	HLOCLayer(HLOCLayerInternal *_ptr) : BaseBoxLayer(HLOCLayer2BaseBoxLayer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::HLOCLayer
HLOCLayer	.\\ChartDirector\\chartdir.h	/^class HLOCLayer : public BaseBoxLayer$/;"	c	namespace:CD_NAMESPACE
HLOCOpenClose	.\\ChartDirector\\chartdir.h	/^	enum { HLOCDefault, HLOCOpenClose, HLOCUpDown };$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200903
HLOCUpDown	.\\ChartDirector\\chartdir.h	/^	enum { HLOCDefault, HLOCOpenClose, HLOCUpDown };$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200903
HammingFilter	.\\ChartDirector\\chartdir.h	/^		HammingFilter, BlackmanFilter, BesselFilter };$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
HammingFilter	.\\ChartDirector\\chartdir.h	/^	HammingFilter, BlackmanFilter, BesselFilter };$/;"	e	enum:CD_NAMESPACE::CDFilterType
HanningFilter	.\\ChartDirector\\chartdir.h	/^		CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
HanningFilter	.\\ChartDirector\\chartdir.h	/^	CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
HermiteFilter	.\\ChartDirector\\chartdir.h	/^	enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
HermiteFilter	.\\ChartDirector\\chartdir.h	/^enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
Hide	.\\gridctrl_src\\TitleTip.cpp	/^void CTitleTip::Hide()$/;"	f	class:CTitleTip	typeref:typename:void
IDC_BUTTON1	.\\resource.h	/^#define IDC_BUTTON1 /;"	d
IDC_BUTTON_CONFIG	.\\resource.h	/^#define IDC_BUTTON_CONFIG /;"	d
IDC_BUTTON_DO_STUDY	.\\resource.h	/^#define IDC_BUTTON_DO_STUDY /;"	d
IDC_BUTTON_GAGE	.\\resource.h	/^#define IDC_BUTTON_GAGE /;"	d
IDC_CHART	.\\resource.h	/^#define IDC_CHART /;"	d
IDC_CHECK_CONFIG	.\\resource.h	/^#define IDC_CHECK_CONFIG /;"	d
IDC_CHECK_GAGE	.\\resource.h	/^#define IDC_CHECK_GAGE /;"	d
IDC_CHECK_PRT_BASIC	.\\resource.h	/^#define IDC_CHECK_PRT_BASIC /;"	d
IDC_CHECK_PRT_DEVICE	.\\resource.h	/^#define IDC_CHECK_PRT_DEVICE /;"	d
IDC_CHECK_PRT_DEV_D64	.\\resource.h	/^#define IDC_CHECK_PRT_DEV_D64 /;"	d
IDC_CHECK_PRT_LEVEL1	.\\resource.h	/^#define IDC_CHECK_PRT_LEVEL1 /;"	d
IDC_CHECK_PRT_LEVEL3	.\\resource.h	/^#define IDC_CHECK_PRT_LEVEL3 /;"	d
IDC_CHECK_PRT_Level2	.\\resource.h	/^#define IDC_CHECK_PRT_Level2 /;"	d
IDC_COMBO1	.\\resource.h	/^#define IDC_COMBO1 /;"	d
IDC_COMBOEDIT	.\\gridctrl_src\\InPlaceList.h	/^#define IDC_COMBOEDIT /;"	d
IDC_COMBO_MEAS_TYPE	.\\resource.h	/^#define IDC_COMBO_MEAS_TYPE /;"	d
IDC_EDIT1	.\\resource.h	/^#define IDC_EDIT1 /;"	d
IDC_EDIT2	.\\resource.h	/^#define IDC_EDIT2 /;"	d
IDC_EDIT_4W_FILE_PATH	.\\resource.h	/^#define IDC_EDIT_4W_FILE_PATH /;"	d
IDC_EDIT_6X_STDEV	.\\resource.h	/^#define IDC_EDIT_6X_STDEV /;"	d
IDC_EDIT_BIAS	.\\resource.h	/^#define IDC_EDIT_BIAS /;"	d
IDC_EDIT_CG	.\\resource.h	/^#define IDC_EDIT_CG /;"	d
IDC_EDIT_CGK	.\\resource.h	/^#define IDC_EDIT_CGK /;"	d
IDC_EDIT_MEAN	.\\resource.h	/^#define IDC_EDIT_MEAN /;"	d
IDC_EDIT_PVALUE	.\\resource.h	/^#define IDC_EDIT_PVALUE /;"	d
IDC_EDIT_REF	.\\resource.h	/^#define IDC_EDIT_REF /;"	d
IDC_EDIT_REF_INPUT	.\\resource.h	/^#define IDC_EDIT_REF_INPUT /;"	d
IDC_EDIT_SELECT	.\\resource.h	/^#define IDC_EDIT_SELECT /;"	d
IDC_EDIT_STDEV	.\\resource.h	/^#define IDC_EDIT_STDEV /;"	d
IDC_EDIT_T	.\\resource.h	/^#define IDC_EDIT_T /;"	d
IDC_EDIT_TOL	.\\resource.h	/^#define IDC_EDIT_TOL /;"	d
IDC_EDIT_TOL_INPUT	.\\resource.h	/^#define IDC_EDIT_TOL_INPUT /;"	d
IDC_EDIT_VAR_REPT	.\\resource.h	/^#define IDC_EDIT_VAR_REPT /;"	d
IDC_EDIT_VAR_REPT_BIAS	.\\resource.h	/^#define IDC_EDIT_VAR_REPT_BIAS /;"	d
IDC_GRID	.\\resource.h	/^#define IDC_GRID /;"	d
IDC_INPLACE_CONTROL	.\\gridctrl_src\\GridCtrl.h	/^#define IDC_INPLACE_CONTROL /;"	d
IDC_STATIC_PRINT_STATE	.\\resource.h	/^#define IDC_STATIC_PRINT_STATE /;"	d
IDC_STATIC_USED_MEM	.\\resource.h	/^#define IDC_STATIC_USED_MEM /;"	d
IDD	.\\ConfigDialog.h	/^	enum { IDD = IDD_CONFIG_DIALOG };$/;"	e	enum:CConfigDialog::__anon7936154b0103
IDD	.\\GageDialog.h	/^	enum { IDD = IDD_GAGE_DIALOG };$/;"	e	enum:CGageDialog::__anon275519290203
IDD	.\\MainDialog.cpp	/^	enum { IDD = IDD_ABOUTBOX };$/;"	e	enum:CAboutDlg::__anonc6aa74d50103	file:
IDD	.\\MainDialog.h	/^	enum { IDD = IDD_MAIN_DIALOG };$/;"	e	enum:CMainDialog::__anon6d7e64ba0103
IDD_ABOUTBOX	.\\ACE400Gage.rc	/^IDD_ABOUTBOX DIALOG DISCARDABLE  0, 0, 235, 55$/;"	d
IDD_ABOUTBOX	.\\resource.h	/^#define IDD_ABOUTBOX /;"	d
IDD_ABOUTBOX,	.\\ACE400Gage.rc	/^    IDD_ABOUTBOX, DIALOG$/;"	d
IDD_CONFIG_DIALOG	.\\ACE400Gage.rc	/^IDD_CONFIG_DIALOG DIALOGEX 5, 65, 425, 186$/;"	d
IDD_CONFIG_DIALOG	.\\resource.h	/^#define IDD_CONFIG_DIALOG /;"	d
IDD_CONFIG_DIALOG,	.\\ACE400Gage.rc	/^    IDD_CONFIG_DIALOG, DIALOG$/;"	d
IDD_GAGE_DIALOG	.\\ACE400Gage.rc	/^IDD_GAGE_DIALOG DIALOG DISCARDABLE  5, 45, 658, 398$/;"	d
IDD_GAGE_DIALOG	.\\resource.h	/^#define IDD_GAGE_DIALOG /;"	d
IDD_GAGE_DIALOG,	.\\ACE400Gage.rc	/^    IDD_GAGE_DIALOG, DIALOG$/;"	d
IDD_MAIN_DIALOG	.\\ACE400Gage.rc	/^IDD_MAIN_DIALOG DIALOGEX 0, 0, 674, 459$/;"	d
IDD_MAIN_DIALOG	.\\resource.h	/^#define IDD_MAIN_DIALOG /;"	d
IDD_MAIN_DIALOG,	.\\ACE400Gage.rc	/^    IDD_MAIN_DIALOG, DIALOG$/;"	d
IDM_ABOUTBOX	.\\resource.h	/^#define IDM_ABOUTBOX /;"	d
IDR_MAINFRAME	.\\ACE400Gage.rc	/^IDR_MAINFRAME           ICON    DISCARDABLE     "res\\\\ACE400Gage.ico"$/;"	i
IDR_MAINFRAME	.\\resource.h	/^#define IDR_MAINFRAME /;"	d
IDS_ABOUTBOX	.\\resource.h	/^#define IDS_ABOUTBOX /;"	d
IMPLEMENT_DYNCREATE	.\\gridctrl_src\\GridCtrl.cpp	/^IMPLEMENT_DYNCREATE(CGridCtrl, CWnd)$/;"	f
INVALID_INPUT	.\\Error.h	/^	INVALID_INPUT=601,$/;"	e	enum:ErrID
INVALID_RETURN	.\\Error.h	/^	INVALID_RETURN=600,$/;"	e	enum:ErrID
INVALID_RETURN_DIOINPBIT	.\\Error.h	/^			INVALID_RETURN_DIOINPBIT,$/;"	e	enum:ErrID
INVALID_RETURN_DIOINPBYTE	.\\Error.h	/^			INVALID_RETURN_DIOINPBYTE,$/;"	e	enum:ErrID
INVALID_RETURN_DIOINP_MBIT	.\\Error.h	/^			INVALID_RETURN_DIOINP_MBIT,$/;"	e	enum:ErrID
INVALID_RETURN_DIOOUTBIT	.\\Error.h	/^			INVALID_RETURN_DIOOUTBIT,$/;"	e	enum:ErrID
INVALID_RETURN_DIOOUTBYTE	.\\Error.h	/^			INVALID_RETURN_DIOOUTBYTE,$/;"	e	enum:ErrID
INVALID_RETURN_DIOOUT_MBIT	.\\Error.h	/^			INVALID_RETURN_DIOOUT_MBIT,$/;"	e	enum:ErrID
ImageMapHandler	.\\ChartDirector\\chartdir.h	/^	ImageMapHandler(const char *imageMap) : ptr(CImageMapHandler_create(imageMap)) {}$/;"	f	class:CD_NAMESPACE::ImageMapHandler
ImageMapHandler	.\\ChartDirector\\chartdir.h	/^class ImageMapHandler$/;"	c	namespace:CD_NAMESPACE
ImgFormat	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	g	namespace:CD_NAMESPACE::Chart
ImgFormat	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat {PNG, GIF, JPG, WMP};$/;"	g	class:CD_NAMESPACE::BaseChart
ImgFormat	.\\ChartDirector\\chartdir.h	/^enum ImgFormat {PNG, GIF, JPG, WMP, BMP};$/;"	g	namespace:CD_NAMESPACE
InRange	.\\gridctrl_src\\CellRange.h	/^inline int CCellRange::InRange(const CCellID& cellID) const$/;"	f	class:CCellRange	typeref:typename:int
InRange	.\\gridctrl_src\\CellRange.h	/^inline int CCellRange::InRange(int row, int col) const$/;"	f	class:CCellRange	typeref:typename:int
Init	.\\Globals.h	/^	void Init()$/;"	f	struct:sFILE_DATA	typeref:typename:void
InitInstance	.\\ACE400Gage.cpp	/^BOOL CACE400GageApp::InitInstance()$/;"	f	class:CACE400GageApp	typeref:typename:BOOL
InitMember	.\\ConfigDialog.cpp	/^void CConfigDialog::InitMember()$/;"	f	class:CConfigDialog	typeref:typename:void
InitMember	.\\GageDialog.cpp	/^BOOL CGageDialog::InitMember()$/;"	f	class:CGageDialog	typeref:typename:BOOL
InitMember	.\\System.cpp	/^void CSystem::InitMember() $/;"	f	class:CSystem	typeref:typename:void
InitView	.\\GageDialog.cpp	/^BOOL CGageDialog::InitView()$/;"	f	class:CGageDialog	typeref:typename:BOOL
InsertColumn	.\\gridctrl_src\\GridCtrl.cpp	/^int CGridCtrl::InsertColumn(LPCTSTR strHeading, $/;"	f	class:CGridCtrl	typeref:typename:int
InsertRow	.\\gridctrl_src\\GridCtrl.cpp	/^int CGridCtrl::InsertRow(LPCTSTR strHeading, int nRow \/* = -1 *\/)$/;"	f	class:CGridCtrl	typeref:typename:int
IntArray	.\\memblock.h	/^	IntArray() : len(0), data(0) {}$/;"	f	class:IntArray
IntArray	.\\memblock.h	/^	IntArray(const int *_data, int _len) : len(_len), data(_data) {}$/;"	f	class:IntArray
IntArray	.\\memblock.h	/^class IntArray$/;"	c
InterLineLayer	.\\ChartDirector\\chartdir.h	/^	InterLineLayer(InterLineLayerInternal *_ptr) : Layer(InterLineLayer2Layer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::InterLineLayer
InterLineLayer	.\\ChartDirector\\chartdir.h	/^class InterLineLayer : public Layer$/;"	c	namespace:CD_NAMESPACE
Intersect	.\\gridctrl_src\\CellRange.h	/^inline CCellRange CCellRange::Intersect(const CCellRange& rhs) const$/;"	f	class:CCellRange	typeref:typename:CCellRange
InvalidateCellRect	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::InvalidateCellRect(const CCellID& cell)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
InvalidateCellRect	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::InvalidateCellRect(const CCellRange& cellRange)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
InvertedTriangleShape	.\\ChartDirector\\chartdir.h	/^		InvertedTriangleShape = 6,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
InvertedTriangleSymbol	.\\ChartDirector\\chartdir.h	/^		InvertedTriangleSymbol = 6,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
InvertedTriangleSymbol	.\\ChartDirector\\chartdir.h	/^	InvertedTriangleSymbol = 6,$/;"	e	enum:CD_NAMESPACE::SymbolType
IsCTRLpressed	.\\gridctrl_src\\GridCtrl.h	/^#define IsCTRLpressed(/;"	d
IsCellEditable	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::IsCellEditable(CCellID &cell) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
IsCellEditable	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::IsCellEditable(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
IsCellFixed	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::IsCellFixed(int nRow, int nCol)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
IsCellVisible	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::IsCellVisible(CCellID cell) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
IsCellVisible	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::IsCellVisible(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
IsEditable	.\\gridctrl_src\\GridCtrl.h	/^    BOOL IsEditable() const                       { return m_bEditable;               }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
IsSHIFTpressed	.\\gridctrl_src\\GridCtrl.h	/^#define IsSHIFTpressed(/;"	d
IsSelectable	.\\gridctrl_src\\GridCtrl.h	/^    BOOL IsSelectable() const                     { return m_bEnableSelection;        }$/;"	f	class:CGridCtrl	typeref:typename:BOOL
IsValid	.\\gridctrl_src\\CellRange.h	/^    int IsValid() const { return (row >= 0 && col >= 0); }$/;"	f	class:CCellID	typeref:typename:int
IsValid	.\\gridctrl_src\\CellRange.h	/^inline int CCellRange::IsValid() const$/;"	f	class:CCellRange	typeref:typename:int
IsValid	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::IsValid(const CCellID& cell) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
IsValid	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::IsValid(const CCellRange& range) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
IsValid	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::IsValid(int nRow, int nCol) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
JPG	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
JPG	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat {PNG, GIF, JPG, WMP};$/;"	e	enum:CD_NAMESPACE::BaseChart::ImgFormat
JPG	.\\ChartDirector\\chartdir.h	/^enum ImgFormat {PNG, GIF, JPG, WMP, BMP};$/;"	e	enum:CD_NAMESPACE::ImgFormat
KeepVisibleRange	.\\ChartDirector\\chartdir.h	/^	    KeepVisibleRange = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201403
Kohm	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
LEFT_MARGIN	.\\gridctrl_src\\GridCtrl.cpp	/^#define LEFT_MARGIN /;"	d	file:
LOG_2PI	.\\TDist.cpp	/^#define LOG_2PI /;"	d	file:
LanczosFilter	.\\ChartDirector\\chartdir.h	/^		CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
LanczosFilter	.\\ChartDirector\\chartdir.h	/^	CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
Layer	.\\ChartDirector\\chartdir.h	/^	Layer(LayerInternal *_ptr) : ptr(_ptr), dataSetCache(0), dataSetCacheCount(0), maxDataSetCacheC/;"	f	class:CD_NAMESPACE::Layer
Layer	.\\ChartDirector\\chartdir.h	/^class Layer : public AutoDestroy, protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
Left	.\\ChartDirector\\chartdir.h	/^		Left = 4,		Center = 5,			Right = 6,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
Left	.\\ChartDirector\\chartdir.h	/^	Left = 4,		Center = 5,			Right = 6,$/;"	e	enum:CD_NAMESPACE::Alignment
LeftTriangleShape	.\\ChartDirector\\chartdir.h	/^		LeftTriangleShape = 5,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
LeftTriangleSymbol	.\\ChartDirector\\chartdir.h	/^		LeftTriangleSymbol = 5,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
LeftTriangleSymbol	.\\ChartDirector\\chartdir.h	/^	LeftTriangleSymbol = 5,$/;"	e	enum:CD_NAMESPACE::SymbolType
LegendBox	.\\ChartDirector\\chartdir.h	/^	LegendBox(LegendBoxInternal *_ptr) : TextBox(LegendBox2TextBox(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::LegendBox
LegendBox	.\\ChartDirector\\chartdir.h	/^class LegendBox : public TextBox$/;"	c	namespace:CD_NAMESPACE
LegendMode	.\\ChartDirector\\chartdir.h	/^	enum LegendMode { NormalLegend, ReverseLegend, NoLegend };$/;"	g	namespace:CD_NAMESPACE::Chart
LegendMode	.\\ChartDirector\\chartdir.h	/^enum LegendMode { NormalLegend, ReverseLegend, NoLegend };$/;"	g	namespace:CD_NAMESPACE
Line	.\\ChartDirector\\chartdir.h	/^	Line(LineInternal *_ptr) : DrawObj(Line2DrawObj(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::Line
Line	.\\ChartDirector\\chartdir.h	/^class Line : public DrawObj$/;"	c	namespace:CD_NAMESPACE
LineColor	.\\ChartDirector\\chartdir.h	/^		LineColor = (int)0xffff0001,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200303
LineColor	.\\ChartDirector\\chartdir.h	/^	LineColor = 0xffff0001,$/;"	e	enum:CD_NAMESPACE::__anone890a0201703
LineLayer	.\\ChartDirector\\chartdir.h	/^	LineLayer(LineLayerInternal *_ptr) : Layer(LineLayer2Layer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::LineLayer
LineLayer	.\\ChartDirector\\chartdir.h	/^class LineLayer : public Layer$/;"	c	namespace:CD_NAMESPACE
LinePointer	.\\ChartDirector\\chartdir.h	/^	enum { DiamondPointer, TriangularPointer, ArrowPointer, ArrowPointer2, LinePointer, PencilPoint/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200a03
LinePointer2	.\\ChartDirector\\chartdir.h	/^	       TriangularPointer2, LinePointer2 };$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200a03
LinearFilter	.\\ChartDirector\\chartdir.h	/^	enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
LinearFilter	.\\ChartDirector\\chartdir.h	/^enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
LinearMeter	.\\ChartDirector\\chartdir.h	/^	LinearMeter(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::LinearMeter
LinearMeter	.\\ChartDirector\\chartdir.h	/^class LinearMeter : public BaseMeter$/;"	c	namespace:CD_NAMESPACE
LinearRegression	.\\ChartDirector\\chartdir.h	/^		LinearRegression = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200803
LinearTick	.\\ChartDirector\\chartdir.h	/^	static const double LinearTick = 1.5e308;$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const double
Load	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::Load(LPCTSTR filename)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
LoadSaveSub13	.\\FileSysInfo.cpp	/^int CFileSysInfo::LoadSaveSub13(int type)$/;"	f	class:CFileSysInfo	typeref:typename:int
LoadSaveSub19	.\\FileSysInfo.cpp	/^int CFileSysInfo::LoadSaveSub19(int type, int nFileType)$/;"	f	class:CFileSysInfo	typeref:typename:int
LoadSaveSub25	.\\FileSysInfo.cpp	/^int CFileSysInfo::LoadSaveSub25(int type)$/;"	f	class:CFileSysInfo	typeref:typename:int
LoadSaveView01	.\\FileSysInfo.cpp	/^int CFileSysInfo::LoadSaveView01(int type)$/;"	f	class:CFileSysInfo	typeref:typename:int
Load_4W_MeasData	.\\GageDialog.cpp	/^void CGageDialog::Load_4W_MeasData()$/;"	f	class:CGageDialog	typeref:typename:void
Load_4wRawData	.\\System.cpp	/^BOOL 	CSystem::Load_4wRawData()$/;"	f	class:CSystem	typeref:typename:BOOL
LocalGradientShading	.\\ChartDirector\\chartdir.h	/^		LocalGradientShading = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200503
LogTick	.\\ChartDirector\\chartdir.h	/^	static const double LogTick = 1.6e308;$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const double
LogTick	.\\ChartDirector\\chartdir.h	/^static const double LogTick = +1.6e308;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const double
LogarithmicRegression	.\\ChartDirector\\chartdir.h	/^		LogarithmicRegression = -2$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200803
MAN_ERR_TEST_CONDEITION	.\\Error.h	/^		MAN_ERR_TEST_CONDEITION,$/;"	e	enum:ErrID
MAX_AD_COUNT	.\\System.h	/^#define	MAX_AD_COUNT	/;"	d
MAX_CAL_DATA	.\\System.h	/^#define MAX_CAL_DATA	/;"	d
MAX_CAL_DATA_org	.\\System.h	/^#define MAX_CAL_DATA_org	/;"	d
MAX_LINE_STR	.\\GageDialog.cpp	/^#define		MAX_LINE_STR	/;"	d	file:
MAX_MEAS_COUNT	.\\GageDialog.h	/^#define 	MAX_MEAS_COUNT	/;"	d
MAX_MEAS_COUNT	.\\System.h	/^#define MAX_MEAS_COUNT	/;"	d
MAX_MEAS_TYPE	.\\GageDialog.h	/^						MAX_MEAS_TYPE = 25	\/\/ 25$/;"	e	enum:MEAS_TYPE
MEAS_TYPE	.\\GageDialog.h	/^enum	MEAS_TYPE	{ 	mohm_1 = 0,			\/\/ 0	$/;"	g
MEMBLOCK_HDR	.\\memblock.h	/^#define MEMBLOCK_HDR$/;"	d
MM_TO_UM	.\\Globals.h	/^	MM_TO_UM, UM_TO_MM, SEC_TO_MSEC, MSEC_TO_SEC$/;"	e	enum:UNIT_CONVERT_TYPE
MOTION	.\\Error.h	/^		MOTION=DEVICE+100,$/;"	e	enum:ErrID
MOUSE_DRAGGING	.\\gridctrl_src\\GridCtrl.h	/^                       MOUSE_PREPARE_DRAG, MOUSE_DRAGGING$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_NOTHING	.\\gridctrl_src\\GridCtrl.h	/^    enum eMouseModes { MOUSE_NOTHING, MOUSE_SELECT_ALL, MOUSE_SELECT_COL, MOUSE_SELECT_ROW,$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_OVER_COL_DIVIDE	.\\gridctrl_src\\GridCtrl.h	/^                       MOUSE_OVER_COL_DIVIDE, MOUSE_SIZING_COL,$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_OVER_ROW_DIVIDE	.\\gridctrl_src\\GridCtrl.h	/^                       MOUSE_OVER_ROW_DIVIDE, MOUSE_SIZING_ROW, $/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_PREPARE_DRAG	.\\gridctrl_src\\GridCtrl.h	/^                       MOUSE_PREPARE_DRAG, MOUSE_DRAGGING$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_PREPARE_EDIT	.\\gridctrl_src\\GridCtrl.h	/^                       MOUSE_PREPARE_EDIT,$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_SCROLLING_CELLS	.\\gridctrl_src\\GridCtrl.h	/^                       MOUSE_SELECT_CELLS, MOUSE_SCROLLING_CELLS,$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_SELECT_ALL	.\\gridctrl_src\\GridCtrl.h	/^    enum eMouseModes { MOUSE_NOTHING, MOUSE_SELECT_ALL, MOUSE_SELECT_COL, MOUSE_SELECT_ROW,$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_SELECT_CELLS	.\\gridctrl_src\\GridCtrl.h	/^                       MOUSE_SELECT_CELLS, MOUSE_SCROLLING_CELLS,$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_SELECT_COL	.\\gridctrl_src\\GridCtrl.h	/^    enum eMouseModes { MOUSE_NOTHING, MOUSE_SELECT_ALL, MOUSE_SELECT_COL, MOUSE_SELECT_ROW,$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_SELECT_ROW	.\\gridctrl_src\\GridCtrl.h	/^    enum eMouseModes { MOUSE_NOTHING, MOUSE_SELECT_ALL, MOUSE_SELECT_COL, MOUSE_SELECT_ROW,$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_SIZING_COL	.\\gridctrl_src\\GridCtrl.h	/^                       MOUSE_OVER_COL_DIVIDE, MOUSE_SIZING_COL,$/;"	e	enum:CGridCtrl::eMouseModes
MOUSE_SIZING_ROW	.\\gridctrl_src\\GridCtrl.h	/^                       MOUSE_OVER_ROW_DIVIDE, MOUSE_SIZING_ROW, $/;"	e	enum:CGridCtrl::eMouseModes
MSEC_TO_SEC	.\\Globals.h	/^	MM_TO_UM, UM_TO_MM, SEC_TO_MSEC, MSEC_TO_SEC$/;"	e	enum:UNIT_CONVERT_TYPE
Mark	.\\ChartDirector\\chartdir.h	/^	Mark(MarkInternal *_ptr) : TextBox(Mark2TextBox(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::Mark
Mark	.\\ChartDirector\\chartdir.h	/^class Mark : public TextBox$/;"	c	namespace:CD_NAMESPACE
MemBlock	.\\memblock.h	/^	MemBlock() : len(0), data(0) {}$/;"	f	class:MemBlock
MemBlock	.\\memblock.h	/^	MemBlock(const char *_data, int _len) : len(_len), data(_data) {}$/;"	f	class:MemBlock
MemBlock	.\\memblock.h	/^class MemBlock$/;"	c
MeterPointer	.\\ChartDirector\\chartdir.h	/^	MeterPointer(MeterPointerInternal *_ptr) : DrawObj(MeterPointer2DrawObj(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::MeterPointer
MeterPointer	.\\ChartDirector\\chartdir.h	/^class MeterPointer : public DrawObj$/;"	c	namespace:CD_NAMESPACE
MicroTickOnly	.\\ChartDirector\\chartdir.h	/^	static const double MicroTickOnly = -1.6e308;$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const double
MinorTickOnly	.\\ChartDirector\\chartdir.h	/^	static const double MinorTickOnly = -1.7e308;$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const double
MitchellFilter	.\\ChartDirector\\chartdir.h	/^		CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
MitchellFilter	.\\ChartDirector\\chartdir.h	/^	CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
Mohm	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
MonotonicAuto	.\\ChartDirector\\chartdir.h	/^		MonotonicAuto = 4$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200703
MonotonicNone	.\\ChartDirector\\chartdir.h	/^		MonotonicNone = 0, $/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200703
MonotonicX	.\\ChartDirector\\chartdir.h	/^		MonotonicX = 1, $/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200703
MonotonicXY	.\\ChartDirector\\chartdir.h	/^		MonotonicXY = 3,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200703
MonotonicY	.\\ChartDirector\\chartdir.h	/^		MonotonicY = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200703
MouseOverColumnResizeArea	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::MouseOverColumnResizeArea(CPoint& point) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
MouseOverRowResizeArea	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::MouseOverRowResizeArea(CPoint& point) const$/;"	f	class:CGridCtrl	typeref:typename:BOOL
MouseUsageDefault	.\\ChartViewer.h	/^		MouseUsageDefault = 0,$/;"	e	enum:CD_NAMESPACE::Chart::__anone601b7a90103
MouseUsageScroll	.\\ChartViewer.h	/^		MouseUsageScroll = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone601b7a90103
MouseUsageZoomIn	.\\ChartViewer.h	/^		MouseUsageZoomIn = 3,$/;"	e	enum:CD_NAMESPACE::Chart::__anone601b7a90103
MouseUsageZoomOut	.\\ChartViewer.h	/^		MouseUsageZoomOut = 4,$/;"	e	enum:CD_NAMESPACE::Chart::__anone601b7a90103
MultiChart	.\\ChartDirector\\chartdir.h	/^	MultiChart(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::MultiChart
MultiChart	.\\ChartDirector\\chartdir.h	/^class MultiChart : public BaseChart$/;"	c	namespace:CD_NAMESPACE
MyGetMemInfo	.\\Globals.cpp	/^PROCESS_MEMORY_COUNTERS MyGetMemInfo()$/;"	f	typeref:typename:PROCESS_MEMORY_COUNTERS
MyTrace	.\\Globals.cpp	/^void AFX_CDECL MyTrace(PRT_TYPE prtType, LPCTSTR lpszFormat, ...)$/;"	f	typeref:typename:void AFX_CDECL
N	.\\TDist.cpp	/^#define N /;"	d	file:
NEED_DELAY	.\\ChartViewer.cpp	/^enum { NO_DELAY, NEED_DELAY, NEED_UPDATE };$/;"	e	enum:__anon6d4e3f840103	file:
NEED_UPDATE	.\\ChartViewer.cpp	/^enum { NO_DELAY, NEED_DELAY, NEED_UPDATE };$/;"	e	enum:__anon6d4e3f840103	file:
NM_GRIDVIEW	.\\gridctrl_src\\GridCtrl.h	/^} NM_GRIDVIEW;$/;"	t	typeref:struct:tagNM_GRIDVIEW
NO_DELAY	.\\ChartViewer.cpp	/^enum { NO_DELAY, NEED_DELAY, NEED_UPDATE };$/;"	e	enum:__anon6d4e3f840103	file:
NO_ERR	.\\Error.h	/^	NO_ERR=0,$/;"	e	enum:ErrID
NUM_CAL_RESULT_COL	.\\System.h	/^#define NUM_CAL_RESULT_COL	/;"	d
NoAntiAlias	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias };$/;"	e	enum:CD_NAMESPACE::TTFText::AntiAliasMode
NoAntiAlias	.\\ChartDirector\\chartdir.h	/^	enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias, ClearType, CompatAntiAlias = 6 };$/;"	e	enum:CD_NAMESPACE::Chart::AntiAliasMode
NoAntiAlias	.\\ChartDirector\\chartdir.h	/^enum AntiAliasMode { NoAntiAlias, AntiAlias, AutoAntiAlias };$/;"	e	enum:CD_NAMESPACE::AntiAliasMode
NoGlare	.\\ChartDirector\\chartdir.h	/^		NoGlare = 1$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201003
NoLegend	.\\ChartDirector\\chartdir.h	/^	enum LegendMode { NormalLegend, ReverseLegend, NoLegend };$/;"	e	enum:CD_NAMESPACE::Chart::LegendMode
NoLegend	.\\ChartDirector\\chartdir.h	/^enum LegendMode { NormalLegend, ReverseLegend, NoLegend };$/;"	e	enum:CD_NAMESPACE::LegendMode
NoPalette	.\\ChartDirector\\chartdir.h	/^	enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	e	enum:CD_NAMESPACE::Chart::PaletteMode
NoPalette	.\\ChartDirector\\chartdir.h	/^	enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	e	enum:CD_NAMESPACE::DrawArea::PaletteMode
NoPalette	.\\ChartDirector\\chartdir.h	/^enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	e	enum:CD_NAMESPACE::PaletteMode
NoShape	.\\ChartDirector\\chartdir.h	/^		NoShape = 0,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
NoSymbol	.\\ChartDirector\\chartdir.h	/^		NoSymbol = 0,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
NoSymbol	.\\ChartDirector\\chartdir.h	/^	NoSymbol = 0,$/;"	e	enum:CD_NAMESPACE::SymbolType
NoValue	.\\ChartDirector\\chartdir.h	/^	static const double NoValue = 1.7e308;$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const double
NoValue	.\\ChartDirector\\chartdir.h	/^static const double NoValue = +1.7e308;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const double
NonePassFilter	.\\ChartDirector\\chartdir.h	/^	static inline int NonePassFilter()$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
NormalGlare	.\\ChartDirector\\chartdir.h	/^		NormalGlare = 3,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201003
NormalLegend	.\\ChartDirector\\chartdir.h	/^	enum LegendMode { NormalLegend, ReverseLegend, NoLegend };$/;"	e	enum:CD_NAMESPACE::Chart::LegendMode
NormalLegend	.\\ChartDirector\\chartdir.h	/^enum LegendMode { NormalLegend, ReverseLegend, NoLegend };$/;"	e	enum:CD_NAMESPACE::LegendMode
OL_I_RANGE_OVER	.\\Error.h	/^		OL_I_RANGE_OVER,$/;"	e	enum:ErrID
OL_I_RANGE_UNDER	.\\Error.h	/^		OL_I_RANGE_UNDER,$/;"	e	enum:ErrID
OL_REF_CURRENT_IS_OVER_INPUT_VOLT_N_RGST	.\\Error.h	/^		OL_REF_CURRENT_IS_OVER_INPUT_VOLT_N_RGST,$/;"	e	enum:ErrID
OT_SETNCHK	.\\Error.h	/^		OT_SETNCHK,$/;"	e	enum:ErrID
OT_VB_OUTCHECK_ERR	.\\Error.h	/^		OT_VB_OUTCHECK_ERR,$/;"	e	enum:ErrID
OVERTIME	.\\Error.h	/^	OVERTIME=800,$/;"	e	enum:ErrID
OnBeginDrag	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnBeginDrag()$/;"	f	class:CGridCtrl	typeref:typename:void
OnBeginPrinting	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnBeginPrinting(CDC *pDC, CPrintInfo *pInfo)$/;"	f	class:CGridCtrl	typeref:typename:void
OnButtonDoStudy	.\\GageDialog.cpp	/^void CGageDialog::OnButtonDoStudy() $/;"	f	class:CGageDialog	typeref:typename:void
OnCHECKPRTLevel2	.\\ConfigDialog.cpp	/^void CConfigDialog::OnCHECKPRTLevel2() $/;"	f	class:CConfigDialog	typeref:typename:void
OnCaptureChanged	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnCaptureChanged(CWnd *pWnd) $/;"	f	class:CGridCtrl	typeref:typename:void
OnChangeEditTolInput	.\\GageDialog.cpp	/^void CGageDialog::OnChangeEditTolInput() $/;"	f	class:CGageDialog	typeref:typename:void
OnChar	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags) $/;"	f	class:CGridCtrl	typeref:typename:void
OnChar	.\\gridctrl_src\\InPlaceEdit.cpp	/^void CInPlaceEdit::OnChar(UINT nChar, UINT nRepCnt, UINT nFlags)$/;"	f	class:CInPlaceEdit	typeref:typename:void
OnCheckConfig	.\\MainDialog.cpp	/^void CMainDialog::OnCheckConfig() $/;"	f	class:CMainDialog	typeref:typename:void
OnCheckGage	.\\MainDialog.cpp	/^void CMainDialog::OnCheckGage() $/;"	f	class:CMainDialog	typeref:typename:void
OnCheckPrtBasic	.\\ConfigDialog.cpp	/^void CConfigDialog::OnCheckPrtBasic() $/;"	f	class:CConfigDialog	typeref:typename:void
OnCheckPrtDevD64	.\\ConfigDialog.cpp	/^void CConfigDialog::OnCheckPrtDevD64() $/;"	f	class:CConfigDialog	typeref:typename:void
OnCheckPrtDevice	.\\ConfigDialog.cpp	/^void CConfigDialog::OnCheckPrtDevice() $/;"	f	class:CConfigDialog	typeref:typename:void
OnCheckPrtLevel1	.\\ConfigDialog.cpp	/^void CConfigDialog::OnCheckPrtLevel1() $/;"	f	class:CConfigDialog	typeref:typename:void
OnCheckPrtLevel3	.\\ConfigDialog.cpp	/^void CConfigDialog::OnCheckPrtLevel3() $/;"	f	class:CConfigDialog	typeref:typename:void
OnDelayedMouseMove	.\\ChartViewer.cpp	/^void CChartViewer::OnDelayedMouseMove() $/;"	f	class:CChartViewer	typeref:typename:void
OnDragEnter	.\\gridctrl_src\\GridCtrl.cpp	/^DROPEFFECT CGridCtrl::OnDragEnter(COleDataObject* pDataObject, DWORD dwKeyState, $/;"	f	class:CGridCtrl	typeref:typename:DROPEFFECT
OnDragEnter	.\\gridctrl_src\\GridDropTarget.cpp	/^DROPEFFECT CGridDropTarget::OnDragEnter(CWnd* pWnd, COleDataObject* pDataObject, $/;"	f	class:CGridDropTarget	typeref:typename:DROPEFFECT
OnDragLeave	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnDragLeave()$/;"	f	class:CGridCtrl	typeref:typename:void
OnDragLeave	.\\gridctrl_src\\GridDropTarget.cpp	/^void CGridDropTarget::OnDragLeave(CWnd* pWnd)$/;"	f	class:CGridDropTarget	typeref:typename:void
OnDragOver	.\\gridctrl_src\\GridCtrl.cpp	/^DROPEFFECT CGridCtrl::OnDragOver(COleDataObject* pDataObject, DWORD dwKeyState, $/;"	f	class:CGridCtrl	typeref:typename:DROPEFFECT
OnDragOver	.\\gridctrl_src\\GridDropTarget.cpp	/^DROPEFFECT CGridDropTarget::OnDragOver(CWnd* pWnd, COleDataObject* pDataObject, $/;"	f	class:CGridDropTarget	typeref:typename:DROPEFFECT
OnDraw	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnDraw(CDC* pDC)$/;"	f	class:CGridCtrl	typeref:typename:void
OnDrop	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::OnDrop(COleDataObject* pDataObject, DROPEFFECT \/*dropEffect*\/, $/;"	f	class:CGridCtrl	typeref:typename:BOOL
OnDrop	.\\gridctrl_src\\GridDropTarget.cpp	/^BOOL CGridDropTarget::OnDrop(CWnd* pWnd, COleDataObject* pDataObject,$/;"	f	class:CGridDropTarget	typeref:typename:BOOL
OnEditCell	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnEditCell(int nRow, int nCol, UINT nChar)$/;"	f	class:CGridCtrl	typeref:typename:void
OnEditCopy	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnEditCopy()$/;"	f	class:CGridCtrl	typeref:typename:void
OnEditCut	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnEditCut()$/;"	f	class:CGridCtrl	typeref:typename:void
OnEditPaste	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnEditPaste()$/;"	f	class:CGridCtrl	typeref:typename:void
OnEditSelectAll	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnEditSelectAll() $/;"	f	class:CGridCtrl	typeref:typename:void
OnEndEditCell	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnEndEditCell(int nRow, int nCol, CString str)$/;"	f	class:CGridCtrl	typeref:typename:void
OnEndInPlaceEdit	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnEndInPlaceEdit(NMHDR* pNMHDR, LRESULT* pResult) $/;"	f	class:CGridCtrl	typeref:typename:void
OnEndPrinting	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnEndPrinting(CDC* \/*pDC*\/, CPrintInfo* \/*pInfo*\/)$/;"	f	class:CGridCtrl	typeref:typename:void
OnEraseBkgnd	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::OnEraseBkgnd(CDC* \/*pDC*\/) $/;"	f	class:CGridCtrl	typeref:typename:BOOL
OnFixedColumnClick	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnFixedColumnClick(CCellID& cell)$/;"	f	class:CGridCtrl	typeref:typename:void
OnFixedRowClick	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnFixedRowClick(CCellID& cell)$/;"	f	class:CGridCtrl	typeref:typename:void
OnGetDlgCode	.\\gridctrl_src\\GridCtrl.cpp	/^UINT CGridCtrl::OnGetDlgCode() $/;"	f	class:CGridCtrl	typeref:typename:UINT
OnGetDlgCode	.\\gridctrl_src\\InPlaceEdit.cpp	/^UINT CInPlaceEdit::OnGetDlgCode() $/;"	f	class:CInPlaceEdit	typeref:typename:UINT
OnGetFont	.\\gridctrl_src\\GridCtrl.cpp	/^LRESULT CGridCtrl::OnGetFont(WPARAM \/*wParam*\/, LPARAM \/*lParam*\/)$/;"	f	class:CGridCtrl	typeref:typename:LRESULT
OnHScroll	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnHScroll(UINT nSBCode, UINT \/*nPos*\/, CScrollBar* \/*pScrollBar*\/)$/;"	f	class:CGridCtrl	typeref:typename:void
OnKeyDown	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) $/;"	f	class:CGridCtrl	typeref:typename:void
OnKeyDown	.\\gridctrl_src\\InPlaceList.cpp	/^void CComboEdit::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) $/;"	f	class:CComboEdit	typeref:typename:void
OnKeyDown	.\\gridctrl_src\\InPlaceList.cpp	/^void CInPlaceList::OnKeyDown(UINT nChar, UINT nRepCnt, UINT nFlags) $/;"	f	class:CInPlaceList	typeref:typename:void
OnKeyUp	.\\gridctrl_src\\InPlaceList.cpp	/^void CComboEdit::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags) $/;"	f	class:CComboEdit	typeref:typename:void
OnKeyUp	.\\gridctrl_src\\InPlaceList.cpp	/^void CInPlaceList::OnKeyUp(UINT nChar, UINT nRepCnt, UINT nFlags) $/;"	f	class:CInPlaceList	typeref:typename:void
OnKillFocus	.\\gridctrl_src\\InPlaceEdit.cpp	/^void CInPlaceEdit::OnKillFocus(CWnd* pNewWnd)$/;"	f	class:CInPlaceEdit	typeref:typename:void
OnLButtonDblClk	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnLButtonDblClk(UINT nFlags, CPoint point) $/;"	f	class:CGridCtrl	typeref:typename:void
OnLButtonDown	.\\ChartViewer.cpp	/^void CChartViewer::OnLButtonDown(UINT nFlags, CPoint point)	$/;"	f	class:CChartViewer	typeref:typename:void
OnLButtonDown	.\\ChartViewer.cpp	/^void CViewPortControl::OnLButtonDown(UINT nFlags, CPoint point)$/;"	f	class:CViewPortControl	typeref:typename:void
OnLButtonDown	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnLButtonDown(UINT nFlags, CPoint point)$/;"	f	class:CGridCtrl	typeref:typename:void
OnLButtonUp	.\\ChartViewer.cpp	/^void CChartViewer::OnLButtonUp(UINT	nFlags,	CPoint point) $/;"	f	class:CChartViewer	typeref:typename:void
OnLButtonUp	.\\ChartViewer.cpp	/^void CViewPortControl::OnLButtonUp(UINT nFlags, CPoint point)$/;"	f	class:CViewPortControl	typeref:typename:void
OnLButtonUp	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnLButtonUp(UINT nFlags, CPoint point)$/;"	f	class:CGridCtrl	typeref:typename:void
OnMouseLeave	.\\ChartViewer.cpp	/^LRESULT CChartViewer::OnMouseLeave(WPARAM wParam, LPARAM lParam) $/;"	f	class:CChartViewer	typeref:typename:LRESULT
OnMouseMove	.\\ChartViewer.cpp	/^void CChartViewer::OnMouseMove(UINT	nFlags,	CPoint point) $/;"	f	class:CChartViewer	typeref:typename:void
OnMouseMove	.\\ChartViewer.cpp	/^void CViewPortControl::OnMouseMove(UINT nFlags, CPoint point)$/;"	f	class:CViewPortControl	typeref:typename:void
OnMouseMove	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnMouseMove(UINT nFlags, CPoint point)$/;"	f	class:CGridCtrl	typeref:typename:void
OnMouseMove	.\\gridctrl_src\\TitleTip.cpp	/^void CTitleTip::OnMouseMove(UINT nFlags, CPoint point) $/;"	f	class:CTitleTip	typeref:typename:void
OnMouseWheel	.\\ChartViewer.cpp	/^BOOL CChartViewer::OnMouseWheel(UINT nFlags, short zDelta, CPoint pt)$/;"	f	class:CChartViewer	typeref:typename:BOOL
OnMouseWheel	.\\ChartViewer.cpp	/^BOOL CViewPortControl::OnMouseWheel(UINT nFlags, short zDelta, CPoint pt)$/;"	f	class:CViewPortControl	typeref:typename:BOOL
OnMouseWheel	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::OnMouseWheel(UINT nFlags, short zDelta, CPoint pt) $/;"	f	class:CGridCtrl	typeref:typename:BOOL
OnPaint	.\\ChartViewer.cpp	/^void CChartViewer::OnPaint() $/;"	f	class:CChartViewer	typeref:typename:void
OnPaint	.\\ChartViewer.cpp	/^void CViewPortControl::OnPaint() $/;"	f	class:CViewPortControl	typeref:typename:void
OnPaint	.\\MainDialog.cpp	/^void CMainDialog::OnPaint() $/;"	f	class:CMainDialog	typeref:typename:void
OnPlotAreaMouseDrag	.\\ChartViewer.cpp	/^void CChartViewer::OnPlotAreaMouseDrag(UINT	\/* nFlags *\/, CPoint point)$/;"	f	class:CChartViewer	typeref:typename:void
OnPrint	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnPrint(CDC *pDC, CPrintInfo *pInfo)$/;"	f	class:CGridCtrl	typeref:typename:void
OnQueryDragIcon	.\\MainDialog.cpp	/^HCURSOR CMainDialog::OnQueryDragIcon()$/;"	f	class:CMainDialog	typeref:typename:HCURSOR
OnSelchangeComboMeasType	.\\GageDialog.cpp	/^void CGageDialog::OnSelchangeComboMeasType() $/;"	f	class:CGageDialog	typeref:typename:void
OnSelecting	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnSelecting(const CCellID& currentCell)$/;"	f	class:CGridCtrl	typeref:typename:void
OnSetCursor	.\\ChartViewer.cpp	/^BOOL CChartViewer::OnSetCursor(CWnd* pWnd, UINT	nHitTest, UINT message)	$/;"	f	class:CChartViewer	typeref:typename:BOOL
OnSetCursor	.\\ChartViewer.cpp	/^BOOL CViewPortControl::OnSetCursor(CWnd* pWnd, UINT	nHitTest, UINT message)	$/;"	f	class:CViewPortControl	typeref:typename:BOOL
OnSetCursor	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::OnSetCursor(CWnd* pWnd, UINT nHitTest, UINT message) $/;"	f	class:CGridCtrl	typeref:typename:BOOL
OnSetFont	.\\gridctrl_src\\GridCtrl.cpp	/^LRESULT CGridCtrl::OnSetFont(WPARAM hFont, LPARAM \/*lParam *\/)$/;"	f	class:CGridCtrl	typeref:typename:LRESULT
OnSettingChange	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnSettingChange(UINT uFlags, LPCTSTR lpszSection) $/;"	f	class:CGridCtrl	typeref:typename:void
OnShowWindow	.\\ConfigDialog.cpp	/^void CConfigDialog::OnShowWindow(BOOL bShow, UINT nStatus) $/;"	f	class:CConfigDialog	typeref:typename:void
OnShowWindow	.\\GageDialog.cpp	/^void CGageDialog::OnShowWindow(BOOL bShow, UINT nStatus) $/;"	f	class:CGageDialog	typeref:typename:void
OnSize	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnSize(UINT nType, int cx, int cy) $/;"	f	class:CGridCtrl	typeref:typename:void
OnSysColorChange	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnSysColorChange() $/;"	f	class:CGridCtrl	typeref:typename:void
OnSysCommand	.\\MainDialog.cpp	/^void CMainDialog::OnSysCommand(UINT nID, LPARAM lParam)$/;"	f	class:CMainDialog	typeref:typename:void
OnTimer	.\\ChartViewer.cpp	/^void CChartViewer::OnTimer(UINT_PTR nIDEvent)	$/;"	f	class:CChartViewer	typeref:typename:void
OnTimer	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnTimer(UINT nIDEvent)$/;"	f	class:CGridCtrl	typeref:typename:void
OnUpdateEditCopy	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnUpdateEditCopy(CCmdUI* pCmdUI) $/;"	f	class:CGridCtrl	typeref:typename:void
OnUpdateEditCut	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnUpdateEditCut(CCmdUI* pCmdUI) $/;"	f	class:CGridCtrl	typeref:typename:void
OnUpdateEditPaste	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnUpdateEditPaste(CCmdUI* pCmdUI) $/;"	f	class:CGridCtrl	typeref:typename:void
OnUpdateEditSelectAll	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnUpdateEditSelectAll(CCmdUI* pCmdUI) $/;"	f	class:CGridCtrl	typeref:typename:void
OnVScroll	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::OnVScroll(UINT nSBCode, UINT \/*nPos*\/, CScrollBar* \/*pScrollBar*\/)$/;"	f	class:CGridCtrl	typeref:typename:void
OrderedDither	.\\ChartDirector\\chartdir.h	/^	enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	e	enum:CD_NAMESPACE::Chart::DitherMethod
OrderedDither	.\\ChartDirector\\chartdir.h	/^	enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	e	enum:CD_NAMESPACE::DrawArea::DitherMethod
OrderedDither	.\\ChartDirector\\chartdir.h	/^enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	e	enum:CD_NAMESPACE::DitherMethod
Overlay	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side };$/;"	e	enum:CD_NAMESPACE::Layer::DataCombineMethod
Overlay	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::Chart::DataCombineMethod
Overlay	.\\ChartDirector\\chartdir.h	/^enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::DataCombineMethod
PDF	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
PI	.\\TDist.cpp	/^#define PI /;"	d	file:
PNG	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
PNG	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat {PNG, GIF, JPG, WMP};$/;"	e	enum:CD_NAMESPACE::BaseChart::ImgFormat
PNG	.\\ChartDirector\\chartdir.h	/^enum ImgFormat {PNG, GIF, JPG, WMP, BMP};$/;"	e	enum:CD_NAMESPACE::ImgFormat
PROCESS_MEMORY_COUNTERS	.\\Globals.cpp	/^} PROCESS_MEMORY_COUNTERS;$/;"	t	typeref:struct:__anon1ad2ae240108	file:
PRT_BASIC	.\\Globals.h	/^enum PRT_TYPE { PRT_BASIC, PRT_LEVEL1, PRT_LEVEL2, PRT_LEVEL3, PRT_DEVICE, PRT_DEV_D64 };$/;"	e	enum:PRT_TYPE
PRT_DEVICE	.\\Globals.h	/^enum PRT_TYPE { PRT_BASIC, PRT_LEVEL1, PRT_LEVEL2, PRT_LEVEL3, PRT_DEVICE, PRT_DEV_D64 };$/;"	e	enum:PRT_TYPE
PRT_DEV_D64	.\\Globals.h	/^enum PRT_TYPE { PRT_BASIC, PRT_LEVEL1, PRT_LEVEL2, PRT_LEVEL3, PRT_DEVICE, PRT_DEV_D64 };$/;"	e	enum:PRT_TYPE
PRT_LEVEL1	.\\Globals.h	/^enum PRT_TYPE { PRT_BASIC, PRT_LEVEL1, PRT_LEVEL2, PRT_LEVEL3, PRT_DEVICE, PRT_DEV_D64 };$/;"	e	enum:PRT_TYPE
PRT_LEVEL2	.\\Globals.h	/^enum PRT_TYPE { PRT_BASIC, PRT_LEVEL1, PRT_LEVEL2, PRT_LEVEL3, PRT_DEVICE, PRT_DEV_D64 };$/;"	e	enum:PRT_TYPE
PRT_LEVEL3	.\\Globals.h	/^enum PRT_TYPE { PRT_BASIC, PRT_LEVEL1, PRT_LEVEL2, PRT_LEVEL3, PRT_DEVICE, PRT_DEV_D64 };$/;"	e	enum:PRT_TYPE
PRT_TYPE	.\\Globals.h	/^enum PRT_TYPE { PRT_BASIC, PRT_LEVEL1, PRT_LEVEL2, PRT_LEVEL3, PRT_DEVICE, PRT_DEV_D64 };$/;"	g
PageFaultCount	.\\Globals.cpp	/^   DWORD PageFaultCount;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
PagefileUsage	.\\Globals.cpp	/^   DWORD PagefileUsage;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
Palette	.\\ChartDirector\\chartdir.h	/^		Palette = (int)0xffff0000,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200303
Palette	.\\ChartDirector\\chartdir.h	/^	Palette = 0xffff0000,$/;"	e	enum:CD_NAMESPACE::__anone890a0201703
PaletteMode	.\\ChartDirector\\chartdir.h	/^	enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	g	class:CD_NAMESPACE::DrawArea
PaletteMode	.\\ChartDirector\\chartdir.h	/^	enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	g	namespace:CD_NAMESPACE::Chart
PaletteMode	.\\ChartDirector\\chartdir.h	/^enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	g	namespace:CD_NAMESPACE
ParameterDir	.\\Globals.h	/^	CString ParameterDir;$/;"	m	struct:sFILE_DATA	typeref:typename:CString
PasteTextToGrid	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::PasteTextToGrid(CCellID cell, COleDataObject* pDataObject)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
PeakPagefileUsage	.\\Globals.cpp	/^   DWORD PeakPagefileUsage;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
PeakWorkingSetSize	.\\Globals.cpp	/^   DWORD PeakWorkingSetSize;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
PencilPointer	.\\ChartDirector\\chartdir.h	/^	enum { DiamondPointer, TriangularPointer, ArrowPointer, ArrowPointer2, LinePointer, PencilPoint/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200a03
Percentage	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::Chart::DataCombineMethod
Percentage	.\\ChartDirector\\chartdir.h	/^enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::DataCombineMethod
PieChart	.\\ChartDirector\\chartdir.h	/^	PieChart(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::PieChart
PieChart	.\\ChartDirector\\chartdir.h	/^class PieChart : public BaseChart$/;"	c	namespace:CD_NAMESPACE
PixelScale	.\\ChartDirector\\chartdir.h	/^	enum ScaleType { PixelScale, XAxisScale, YAxisScale, EndPoints,$/;"	e	enum:CD_NAMESPACE::Chart::ScaleType
PixelScale	.\\ChartDirector\\chartdir.h	/^enum ScaleType { PixelScale, XAxisScale, YAxisScale,$/;"	e	enum:CD_NAMESPACE::ScaleType
PlotArea	.\\ChartDirector\\chartdir.h	/^	PlotArea(PlotAreaInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::PlotArea
PlotArea	.\\ChartDirector\\chartdir.h	/^class PlotArea : public AutoDestroy$/;"	c	namespace:CD_NAMESPACE
PlotAreaZ	.\\ChartDirector\\chartdir.h	/^		PlotAreaZ = 0x1000,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200c03
PolarAreaLayer	.\\ChartDirector\\chartdir.h	/^	PolarAreaLayer(PolarAreaLayerInternal *_ptr) : PolarLayer(PolarAreaLayer2PolarLayer(_ptr)) {}$/;"	f	class:CD_NAMESPACE::PolarAreaLayer
PolarAreaLayer	.\\ChartDirector\\chartdir.h	/^class PolarAreaLayer : public PolarLayer$/;"	c	namespace:CD_NAMESPACE
PolarChart	.\\ChartDirector\\chartdir.h	/^	PolarChart(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::PolarChart
PolarChart	.\\ChartDirector\\chartdir.h	/^class PolarChart : public BaseChart$/;"	c	namespace:CD_NAMESPACE
PolarLayer	.\\ChartDirector\\chartdir.h	/^	PolarLayer(PolarLayerInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::PolarLayer
PolarLayer	.\\ChartDirector\\chartdir.h	/^class PolarLayer : public AutoDestroy, protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
PolarLineLayer	.\\ChartDirector\\chartdir.h	/^	PolarLineLayer(PolarLineLayerInternal *_ptr) : PolarLayer(PolarLineLayer2PolarLayer(_ptr)), ptr/;"	f	class:CD_NAMESPACE::PolarLineLayer
PolarLineLayer	.\\ChartDirector\\chartdir.h	/^class PolarLineLayer : public PolarLayer$/;"	c	namespace:CD_NAMESPACE
PolarSplineAreaLayer	.\\ChartDirector\\chartdir.h	/^	PolarSplineAreaLayer(PolarSplineAreaLayerInternal *_ptr) : PolarAreaLayer(PolarSplineAreaLayer2/;"	f	class:CD_NAMESPACE::PolarSplineAreaLayer
PolarSplineAreaLayer	.\\ChartDirector\\chartdir.h	/^class PolarSplineAreaLayer : public PolarAreaLayer$/;"	c	namespace:CD_NAMESPACE
PolarSplineLineLayer	.\\ChartDirector\\chartdir.h	/^	PolarSplineLineLayer(PolarSplineLineLayerInternal *_ptr) : PolarLineLayer(PolarSplineLineLayer2/;"	f	class:CD_NAMESPACE::PolarSplineLineLayer
PolarSplineLineLayer	.\\ChartDirector\\chartdir.h	/^class PolarSplineLineLayer : public PolarLineLayer$/;"	c	namespace:CD_NAMESPACE
PolarVectorLayer	.\\ChartDirector\\chartdir.h	/^	PolarVectorLayer(PolarVectorLayerInternal *_ptr) : PolarLayer(PolarVectorLayer2PolarLayer(_ptr)/;"	f	class:CD_NAMESPACE::PolarVectorLayer
PolarVectorLayer	.\\ChartDirector\\chartdir.h	/^class PolarVectorLayer : public PolarLayer$/;"	c	namespace:CD_NAMESPACE
Polygon2Shape	.\\ChartDirector\\chartdir.h	/^	static inline int Polygon2Shape(int side)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
PolygonShape	.\\ChartDirector\\chartdir.h	/^	static inline int PolygonShape(int side)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
PolynomialRegression	.\\ChartDirector\\chartdir.h	/^	static inline int PolynomialRegression(int n) { return n; }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
PostNcDestroy	.\\gridctrl_src\\InPlaceEdit.cpp	/^void CInPlaceEdit::PostNcDestroy() $/;"	f	class:CInPlaceEdit	typeref:typename:void
PostNcDestroy	.\\gridctrl_src\\InPlaceList.cpp	/^void CInPlaceList::PostNcDestroy() $/;"	f	class:CInPlaceList	typeref:typename:void
PreSubclassWindow	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::PreSubclassWindow() $/;"	f	class:CGridCtrl	typeref:typename:void
PreTranslateMessage	.\\ChartViewer.cpp	/^BOOL CChartViewer::PreTranslateMessage(MSG*	pMsg) $/;"	f	class:CChartViewer	typeref:typename:BOOL
PreTranslateMessage	.\\gridctrl_src\\InPlaceEdit.cpp	/^BOOL CInPlaceEdit::PreTranslateMessage(MSG* pMsg) $/;"	f	class:CInPlaceEdit	typeref:typename:BOOL
PreTranslateMessage	.\\gridctrl_src\\InPlaceList.cpp	/^BOOL CComboEdit::PreTranslateMessage(MSG* pMsg) $/;"	f	class:CComboEdit	typeref:typename:BOOL
PreTranslateMessage	.\\gridctrl_src\\TitleTip.cpp	/^BOOL CTitleTip::PreTranslateMessage(MSG* pMsg) $/;"	f	class:CTitleTip	typeref:typename:BOOL
Print	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::Print() $/;"	f	class:CGridCtrl	typeref:typename:void
PrintColumnHeadings	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::PrintColumnHeadings(CDC *pDC, CPrintInfo* \/*pInfo*\/)$/;"	f	class:CGridCtrl	typeref:typename:void
PrintFooter	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::PrintFooter(CDC *pDC, CPrintInfo *pInfo)$/;"	f	class:CGridCtrl	typeref:typename:void
PrintHeader	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::PrintHeader(CDC *pDC, CPrintInfo *pInfo)$/;"	f	class:CGridCtrl	typeref:typename:void
PyramidChart	.\\ChartDirector\\chartdir.h	/^	PyramidChart(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::PyramidChart
PyramidChart	.\\ChartDirector\\chartdir.h	/^class PyramidChart : public BaseChart$/;"	c	namespace:CD_NAMESPACE
PyramidLayer	.\\ChartDirector\\chartdir.h	/^	PyramidLayer(PyramidLayerInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::PyramidLayer
PyramidLayer	.\\ChartDirector\\chartdir.h	/^class PyramidLayer : public AutoDestroy, protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
QTIMG	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
QuadraticFilter	.\\ChartDirector\\chartdir.h	/^	enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
QuadraticFilter	.\\ChartDirector\\chartdir.h	/^enum CDFilterType { BoxFilter, LinearFilter, QuadraticFilter, BSplineFilter, HermiteFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
Quantize	.\\ChartDirector\\chartdir.h	/^	enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	e	enum:CD_NAMESPACE::Chart::DitherMethod
Quantize	.\\ChartDirector\\chartdir.h	/^	enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	e	enum:CD_NAMESPACE::DrawArea::DitherMethod
Quantize	.\\ChartDirector\\chartdir.h	/^enum DitherMethod { Quantize, OrderedDither, ErrorDiffusion };$/;"	e	enum:CD_NAMESPACE::DitherMethod
QuotaNonPagedPoolUsage	.\\Globals.cpp	/^   DWORD QuotaNonPagedPoolUsage;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
QuotaPagedPoolUsage	.\\Globals.cpp	/^   DWORD QuotaPagedPoolUsage;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
QuotaPeakNonPagedPoolUsage	.\\Globals.cpp	/^   DWORD QuotaPeakNonPagedPoolUsage;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
QuotaPeakPagedPoolUsage	.\\Globals.cpp	/^   DWORD QuotaPeakPagedPoolUsage;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
RANGE_OVER	.\\Error.h	/^	RANGE_OVER=700,$/;"	e	enum:ErrID
RIGHT_MARGIN	.\\gridctrl_src\\GridCtrl.cpp	/^#define RIGHT_MARGIN /;"	d	file:
RSIMovAvg	.\\ChartDirector\\FinanceChart.h	/^    private: ArrayMath& RSIMovAvg(ArrayMath& dataRef, int period) {$/;"	f	class:FinanceChart	typeref:typename:ArrayMath &
RadialAxis	.\\ChartDirector\\chartdir.h	/^typedef Axis RadialAxis;$/;"	t	namespace:CD_NAMESPACE	typeref:typename:Axis
RadialAxisInternal	.\\ChartDirector\\bchartdir.h	/^typedef AxisInternal RadialAxisInternal;$/;"	t	typeref:typename:AxisInternal
RadialAxisScale	.\\ChartDirector\\chartdir.h	/^		AngularAxisScale = XAxisScale, RadialAxisScale = YAxisScale };$/;"	e	enum:CD_NAMESPACE::Chart::ScaleType
RadialAxisScale	.\\ChartDirector\\chartdir.h	/^	AngularAxisScale = XAxisScale, RadialAxisScale = YAxisScale };$/;"	e	enum:CD_NAMESPACE::ScaleType
RadialShading	.\\ChartDirector\\chartdir.h	/^		RadialShading = 7,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200503
RanSeries	.\\ChartDirector\\chartdir.h	/^	RanSeries(int seed) : ptr(CRanSeries_create(seed)) {}$/;"	f	class:CD_NAMESPACE::RanSeries
RanSeries	.\\ChartDirector\\chartdir.h	/^class RanSeries$/;"	c	namespace:CD_NAMESPACE
RanTable	.\\ChartDirector\\chartdir.h	/^	RanTable(int seed, int noOfCols, int noOfRows) : ptr(CRanTable_create(seed, noOfCols, noOfRows)/;"	f	class:CD_NAMESPACE::RanTable
RanTable	.\\ChartDirector\\chartdir.h	/^class RanTable$/;"	c	namespace:CD_NAMESPACE
RectangularFrame	.\\ChartDirector\\chartdir.h	/^		RectangularFrame = 4$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200b03
RectangularShading	.\\ChartDirector\\chartdir.h	/^		RectangularShading = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200b03
RedrawCell	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::RedrawCell(const CCellID& cell, CDC* pDC \/* = NULL *\/)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
RedrawCell	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::RedrawCell(int nRow, int nCol, CDC* pDC \/* = NULL *\/)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
RedrawColumn	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::RedrawColumn(int col)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
RedrawRow	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::RedrawRow(int row)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
ReducedGlare	.\\ChartDirector\\chartdir.h	/^		ReducedGlare = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201003
Register	.\\gridctrl_src\\GridDropTarget.cpp	/^BOOL CGridDropTarget::Register(CGridCtrl *pGridCtrl)$/;"	f	class:CGridDropTarget	typeref:typename:BOOL
RegisterWindowClass	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::RegisterWindowClass()$/;"	f	class:CGridCtrl	typeref:typename:BOOL
RegularSpacingFilter	.\\ChartDirector\\chartdir.h	/^	static inline int RegularSpacingFilter(int labelStep = 1, int initialMargin = 0)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
Reset	.\\Error.cpp	/^void CError::Reset()$/;"	f	class:CError	typeref:typename:void
ResetScrollBars	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::ResetScrollBars()$/;"	f	class:CGridCtrl	typeref:typename:void
ResetSelectedRange	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::ResetSelectedRange()$/;"	f	class:CGridCtrl	typeref:typename:void
ReverseLegend	.\\ChartDirector\\chartdir.h	/^	enum LegendMode { NormalLegend, ReverseLegend, NoLegend };$/;"	e	enum:CD_NAMESPACE::Chart::LegendMode
ReverseLegend	.\\ChartDirector\\chartdir.h	/^enum LegendMode { NormalLegend, ReverseLegend, NoLegend };$/;"	e	enum:CD_NAMESPACE::LegendMode
Revoke	.\\gridctrl_src\\GridDropTarget.cpp	/^void CGridDropTarget::Revoke()$/;"	f	class:CGridDropTarget	typeref:typename:void
Right	.\\ChartDirector\\chartdir.h	/^		Left = 4,		Center = 5,			Right = 6,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
Right	.\\ChartDirector\\chartdir.h	/^	Left = 4,		Center = 5,			Right = 6,$/;"	e	enum:CD_NAMESPACE::Alignment
RightTriangleShape	.\\ChartDirector\\chartdir.h	/^		RightTriangleShape = 4,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
RightTriangleSymbol	.\\ChartDirector\\chartdir.h	/^		RightTriangleSymbol = 4,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
RightTriangleSymbol	.\\ChartDirector\\chartdir.h	/^	RightTriangleSymbol = 4,$/;"	e	enum:CD_NAMESPACE::SymbolType
RingShading	.\\ChartDirector\\chartdir.h	/^		RingShading = 8$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200503
RoundedEdgeNoGlareShading	.\\ChartDirector\\chartdir.h	/^		RoundedEdgeNoGlareShading = 5,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200503
RoundedEdgeShading	.\\ChartDirector\\chartdir.h	/^		RoundedEdgeShading = 6,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200503
SEC_TO_MSEC	.\\Globals.h	/^	MM_TO_UM, UM_TO_MM, SEC_TO_MSEC, MSEC_TO_SEC$/;"	e	enum:UNIT_CONVERT_TYPE
SELECTED_CELL_FONT_WEIGHT	.\\gridctrl_src\\GridCtrl.cpp	/^#define SELECTED_CELL_FONT_WEIGHT /;"	d	file:
SENSOR	.\\Error.h	/^	SENSOR=100,$/;"	e	enum:ErrID
SGNI	.\\Error.h	/^	SGNI=400,$/;"	e	enum:ErrID
SS_DT12V_LOW	.\\Error.h	/^		SS_DT12V_LOW,$/;"	e	enum:ErrID
SS_DT24V_LOW	.\\Error.h	/^		SS_DT24V_LOW,$/;"	e	enum:ErrID
SS_DT5VB_A_LOW	.\\Error.h	/^		SS_DT5VB_A_LOW,$/;"	e	enum:ErrID
SS_DT5VB_B_LOW	.\\Error.h	/^		SS_DT5VB_B_LOW,$/;"	e	enum:ErrID
SS_DT5VB_C_LOW	.\\Error.h	/^		SS_DT5VB_C_LOW,$/;"	e	enum:ErrID
SS_DT5VB_D_LOW	.\\Error.h	/^		SS_DT5VB_D_LOW,$/;"	e	enum:ErrID
SS_DT5VB_E_LOW	.\\Error.h	/^		SS_DT5VB_E_LOW,$/;"	e	enum:ErrID
SS_DT5VB_F_LOW	.\\Error.h	/^		SS_DT5VB_F_LOW,$/;"	e	enum:ErrID
SS_DT5VB_G_LOW	.\\Error.h	/^		SS_DT5VB_G_LOW,$/;"	e	enum:ErrID
SS_DT5VB_H_LOW	.\\Error.h	/^		SS_DT5VB_H_LOW,$/;"	e	enum:ErrID
SS_DT5VC_A_LOW	.\\Error.h	/^		SS_DT5VC_A_LOW,$/;"	e	enum:ErrID
SS_DT5VC_B_LOW	.\\Error.h	/^		SS_DT5VC_B_LOW,$/;"	e	enum:ErrID
SS_DT5VC_C_LOW	.\\Error.h	/^		SS_DT5VC_C_LOW,$/;"	e	enum:ErrID
SS_DT5VC_D_LOW	.\\Error.h	/^		SS_DT5VC_D_LOW,$/;"	e	enum:ErrID
SS_DT5VC_E_LOW	.\\Error.h	/^		SS_DT5VC_E_LOW,$/;"	e	enum:ErrID
SS_DT5VC_F_LOW	.\\Error.h	/^		SS_DT5VC_F_LOW,$/;"	e	enum:ErrID
SS_DT5VC_G_LOW	.\\Error.h	/^		SS_DT5VC_G_LOW,$/;"	e	enum:ErrID
SS_DT5VC_H_LOW	.\\Error.h	/^		SS_DT5VC_H_LOW,$/;"	e	enum:ErrID
SS_DT5V_LOW	.\\Error.h	/^		SS_DT5V_LOW,$/;"	e	enum:ErrID
SS_DTHV_LOW	.\\Error.h	/^		SS_DTHV_LOW,	$/;"	e	enum:ErrID
SVG	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
SVGZ	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
SW_LOGIC_ERR	.\\Error.h	/^	SW_LOGIC_ERR = 750,$/;"	e	enum:ErrID
SW_NO_INIT_VAR	.\\Error.h	/^		SW_NO_INIT_VAR,$/;"	e	enum:ErrID
SameAsMainColor	.\\ChartDirector\\chartdir.h	/^		SameAsMainColor = (int)0xffff0007$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200303
SameAsMainColor	.\\ChartDirector\\chartdir.h	/^	SameAsMainColor = 0xffff0007$/;"	e	enum:CD_NAMESPACE::__anone890a0201703
Save	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::Save(LPCTSTR filename)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
Save_TestCondtionData	.\\System.cpp	/^BOOL CSystem::Save_TestCondtionData()$/;"	f	class:CSystem	typeref:typename:BOOL
ScaleType	.\\ChartDirector\\chartdir.h	/^	enum ScaleType { PixelScale, XAxisScale, YAxisScale, EndPoints,$/;"	g	namespace:CD_NAMESPACE::Chart
ScaleType	.\\ChartDirector\\chartdir.h	/^enum ScaleType { PixelScale, XAxisScale, YAxisScale,$/;"	g	namespace:CD_NAMESPACE
ScatterLayer	.\\ChartDirector\\chartdir.h	/^typedef LineLayer ScatterLayer;$/;"	t	namespace:CD_NAMESPACE	typeref:typename:LineLayer
ScatterLayerInternal	.\\ChartDirector\\bchartdir.h	/^typedef LineLayerInternal ScatterLayerInternal;$/;"	t	typeref:typename:LineLayerInternal
ScrollWithMax	.\\ChartDirector\\chartdir.h	/^		ScrollWithMax = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201403
ScrollWithMin	.\\ChartDirector\\chartdir.h	/^		ScrollWithMin = 3$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201403
Sector	.\\ChartDirector\\chartdir.h	/^	Sector(SectorInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::Sector
Sector	.\\ChartDirector\\chartdir.h	/^class Sector : public AutoDestroy, protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
SelectAllCells	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::SelectAllCells()$/;"	f	class:CGridCtrl	typeref:typename:void
SelectCells	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::SelectCells(CCellID currentCell)$/;"	f	class:CGridCtrl	typeref:typename:void
SelectColumns	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::SelectColumns(CCellID currentCell)$/;"	f	class:CGridCtrl	typeref:typename:void
SelectItemFilter	.\\ChartDirector\\chartdir.h	/^	static inline int SelectItemFilter(int item)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
SelectRows	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::SelectRows(CCellID currentCell)$/;"	f	class:CGridCtrl	typeref:typename:void
SendMessageToParent	.\\gridctrl_src\\GridCtrl.cpp	/^LRESULT CGridCtrl::SendMessageToParent(int nRow, int nCol, int nMessage)$/;"	f	class:CGridCtrl	typeref:typename:LRESULT
Set	.\\Error.cpp	/^void CError::Set(int error_no, CString strState)$/;"	f	class:CError	typeref:typename:void
Set	.\\gridctrl_src\\CellRange.h	/^inline void CCellRange::Set(int minRow, int minCol, int maxRow, int maxCol)$/;"	f	class:CCellRange	typeref:typename:void
SetBkColor	.\\gridctrl_src\\GridCtrl.h	/^    void     SetBkColor(COLORREF clr)             { m_crBkColour = clr;               }$/;"	f	class:CGridCtrl	typeref:typename:void
SetCell	.\\gridctrl_src\\GridCtrl.h	/^inline BOOL CGridCtrl::SetCell(int nRow, int nCol, CGridCell* pCell)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetColor	.\\ChartViewer.cpp	/^void CRectCtrl::SetColor(COLORREF c)$/;"	f	class:CRectCtrl	typeref:typename:void
SetColumnCount	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetColumnCount(int nCols)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetColumnResize	.\\gridctrl_src\\GridCtrl.h	/^    void SetColumnResize(BOOL bResize = TRUE)     { m_bAllowColumnResize = bResize;   }$/;"	f	class:CGridCtrl	typeref:typename:void
SetColumnWidth	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetColumnWidth(int nCol, int width)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetDoubleBuffering	.\\gridctrl_src\\GridCtrl.h	/^    void SetDoubleBuffering(BOOL bBuffer = TRUE)  { m_bDoubleBuffer = bBuffer;        }$/;"	f	class:CGridCtrl	typeref:typename:void
SetEditable	.\\gridctrl_src\\GridCtrl.h	/^    void SetEditable(BOOL bEditable = TRUE)       { m_bEditable = bEditable;          }$/;"	f	class:CGridCtrl	typeref:typename:void
SetFixedBkColor	.\\gridctrl_src\\GridCtrl.h	/^    void     SetFixedBkColor(COLORREF clr)        { m_crFixedBkColour = clr;          }$/;"	f	class:CGridCtrl	typeref:typename:void
SetFixedColumnCount	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetFixedColumnCount(int nFixedCols)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetFixedRowCount	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetFixedRowCount(int nFixedRows)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetFixedTextColor	.\\gridctrl_src\\GridCtrl.h	/^    void     SetFixedTextColor(COLORREF clr)      { m_crFixedTextColour = clr;        }$/;"	f	class:CGridCtrl	typeref:typename:void
SetFocusCell	.\\gridctrl_src\\GridCtrl.cpp	/^CCellID CGridCtrl::SetFocusCell(CCellID cell)$/;"	f	class:CGridCtrl	typeref:typename:CCellID
SetFocusCell	.\\gridctrl_src\\GridCtrl.cpp	/^CCellID CGridCtrl::SetFocusCell(int nRow, int nCol)$/;"	f	class:CGridCtrl	typeref:typename:CCellID
SetGridBkBule	.\\GageDialog.cpp	/^void CGageDialog::SetGridBkBule(int type)$/;"	f	class:CGageDialog	typeref:typename:void
SetGridColor	.\\gridctrl_src\\GridCtrl.h	/^    void     SetGridColor(COLORREF clr)           { m_crGridColour = clr;             }$/;"	f	class:CGridCtrl	typeref:typename:void
SetGridLines	.\\gridctrl_src\\GridCtrl.h	/^    void SetGridLines(int nWhichLines = GVL_BOTH) { m_nGridLines = nWhichLines; $/;"	f	class:CGridCtrl	typeref:typename:void
SetHandleTabKey	.\\gridctrl_src\\GridCtrl.h	/^    void SetHandleTabKey(BOOL bHandleTab = TRUE)  { m_bHandleTabKey = bHandleTab;     }$/;"	f	class:CGridCtrl	typeref:typename:void
SetHeaderSort	.\\gridctrl_src\\GridCtrl.h	/^    void SetHeaderSort(BOOL bSortOnClick = TRUE)  { m_bSortOnClick = bSortOnClick;    }$/;"	f	class:CGridCtrl	typeref:typename:void
SetImageList	.\\gridctrl_src\\GridCtrl.h	/^    void SetImageList(CImageList* pList)          { m_pImageList = pList;             }$/;"	f	class:CGridCtrl	typeref:typename:void
SetItem	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetItem(const GV_ITEM* pItem)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetItemBkColour	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetItemBkColour(int nRow, int nCol, COLORREF cr \/* = CLR_DEFAULT *\/)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetItemData	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetItemData(int nRow, int nCol, LPARAM lParam)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetItemFgColour	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetItemFgColour(int nRow, int nCol, COLORREF cr \/* = CLR_DEFAULT *\/)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetItemFont	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetItemFont(int nRow, int nCol, LOGFONT* lf)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetItemFormat	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetItemFormat(int nRow, int nCol, UINT nFormat)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetItemImage	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetItemImage(int nRow, int nCol, int iImage)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetItemState	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetItemState(int nRow, int nCol, UINT state)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetItemText	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetItemText(int nRow, int nCol, LPCTSTR str)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetListMode	.\\gridctrl_src\\GridCtrl.h	/^    void SetListMode(BOOL bEnableListMode = TRUE) { m_bListMode = bEnableListMode;    }$/;"	f	class:CGridCtrl	typeref:typename:void
SetMaxCol	.\\gridctrl_src\\CellRange.h	/^    void SetMaxCol(int maxCol) {m_nMaxCol = maxCol;}$/;"	f	class:CCellRange	typeref:typename:void
SetMaxRow	.\\gridctrl_src\\CellRange.h	/^    void SetMaxRow(int maxRow) {m_nMaxRow = maxRow;}$/;"	f	class:CCellRange	typeref:typename:void
SetMinCol	.\\gridctrl_src\\CellRange.h	/^    void SetMinCol(int minCol) {m_nMinCol = minCol;}$/;"	f	class:CCellRange	typeref:typename:void
SetMinRow	.\\gridctrl_src\\CellRange.h	/^    void SetMinRow(int minRow) {m_nMinRow = minRow;}$/;"	f	class:CCellRange	typeref:typename:void
SetModified	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::SetModified(BOOL bModified \/*=TRUE*\/, int nRow \/*=-1*\/, int nCol \/*=-1*\/)$/;"	f	class:CGridCtrl	typeref:typename:void
SetMouseMode	.\\gridctrl_src\\GridCtrl.h	/^    int  SetMouseMode(int nMode) { int nOldMode = m_MouseMode; m_MouseMode = nMode; return nOldM/;"	f	class:CGridCtrl	typeref:typename:int
SetRedraw	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::SetRedraw(BOOL bAllowDraw, BOOL bResetScrollBars \/* = FALSE *\/)$/;"	f	class:CGridCtrl	typeref:typename:void
SetRowCount	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetRowCount(int nRows)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetRowHeight	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetRowHeight(int nRow, int height)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetRowResize	.\\gridctrl_src\\GridCtrl.h	/^    void SetRowResize(BOOL bResize = TRUE)        { m_bAllowRowResize = bResize;      }$/;"	f	class:CGridCtrl	typeref:typename:void
SetScrollPos32	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SetScrollPos32(int nBar, int nPos, BOOL bRedraw \/* = TRUE *\/)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SetSelectedRange	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::SetSelectedRange(const CCellRange& Range, $/;"	f	class:CGridCtrl	typeref:typename:void
SetSelectedRange	.\\gridctrl_src\\GridCtrl.cpp	/^void CGridCtrl::SetSelectedRange(int nMinRow, int nMinCol, int nMaxRow, int nMaxCol,$/;"	f	class:CGridCtrl	typeref:typename:void
SetSingleRowSelection	.\\gridctrl_src\\GridCtrl.h	/^    void SetSingleRowSelection(BOOL bSing = TRUE) { m_bSingleRowSelection = bSing;    }$/;"	f	class:CGridCtrl	typeref:typename:void
SetTextBkColor	.\\gridctrl_src\\GridCtrl.h	/^    void     SetTextBkColor(COLORREF clr)         { m_crTextBkColour = clr;           }$/;"	f	class:CGridCtrl	typeref:typename:void
SetTextColor	.\\gridctrl_src\\GridCtrl.h	/^    void     SetTextColor(COLORREF clr)           { m_crTextColour = clr;             }$/;"	f	class:CGridCtrl	typeref:typename:void
Show	.\\gridctrl_src\\TitleTip.cpp	/^void CTitleTip::Show(CRect rectTitle, LPCTSTR lpszTitleText, int xoffset \/*=0*\/,$/;"	f	class:CTitleTip	typeref:typename:void
Side	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side };$/;"	e	enum:CD_NAMESPACE::Layer::DataCombineMethod
Side	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::Chart::DataCombineMethod
Side	.\\ChartDirector\\chartdir.h	/^enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::DataCombineMethod
SideLayout	.\\ChartDirector\\chartdir.h	/^	enum { SideLayout, CircleLayout };$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200403
SideLayout	.\\ChartDirector\\chartdir.h	/^enum {SideLayout, CircleLayout};$/;"	e	enum:CD_NAMESPACE::__anone890a0201803
SincFilter	.\\ChartDirector\\chartdir.h	/^		CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::Chart::CDFilterType
SincFilter	.\\ChartDirector\\chartdir.h	/^	CatromFilter, MitchellFilter, SincFilter, LanczosFilter, GaussianFilter, HanningFilter,$/;"	e	enum:CD_NAMESPACE::CDFilterType
SmoothShading	.\\ChartDirector\\chartdir.h	/^		SmoothShading = 0,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200b03
SolidSphereShape	.\\ChartDirector\\chartdir.h	/^		SolidSphereShape = 17$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
SortItems	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SortItems(PFNLVCOMPARE pfnCompare, int nCol, BOOL bAscending, $/;"	f	class:CGridCtrl	typeref:typename:BOOL
SortItems	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SortItems(PFNLVCOMPARE pfnCompare, int nCol, BOOL bAscending, LPARAM data,$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SortTextItems	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SortTextItems(int nCol, BOOL bAscending)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SortTextItems	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SortTextItems(int nCol, BOOL bAscending, int low, int high)$/;"	f	class:CGridCtrl	typeref:typename:BOOL
SplineLayer	.\\ChartDirector\\chartdir.h	/^	SplineLayer(SplineLayerInternal *_ptr) : LineLayer(SplineLayer2LineLayer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::SplineLayer
SplineLayer	.\\ChartDirector\\chartdir.h	/^class SplineLayer : public LineLayer$/;"	c	namespace:CD_NAMESPACE
SquareShape	.\\ChartDirector\\chartdir.h	/^		SquareShape = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
SquareSymbol	.\\ChartDirector\\chartdir.h	/^		SquareSymbol = 1,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
SquareSymbol	.\\ChartDirector\\chartdir.h	/^	SquareSymbol = 1,$/;"	e	enum:CD_NAMESPACE::SymbolType
Stack	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side };$/;"	e	enum:CD_NAMESPACE::Layer::DataCombineMethod
Stack	.\\ChartDirector\\chartdir.h	/^	enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::Chart::DataCombineMethod
Stack	.\\ChartDirector\\chartdir.h	/^enum DataCombineMethod { Overlay, Stack, Depth, Side, Percentage };$/;"	e	enum:CD_NAMESPACE::DataCombineMethod
StarShape	.\\ChartDirector\\chartdir.h	/^	static inline int StarShape(int side)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
StartOfDayFilter	.\\ChartDirector\\chartdir.h	/^	static inline int StartOfDayFilter(int labelStep = 1, double initialMargin = 0.05)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
StartOfHourFilter	.\\ChartDirector\\chartdir.h	/^	static inline int StartOfHourFilter(int labelStep = 1, double initialMargin = 0.05)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
StartOfMinuteFilter	.\\ChartDirector\\chartdir.h	/^    static inline int StartOfMinuteFilter(int labelStep = 1, double initialMargin = 0.05)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
StartOfMonthFilter	.\\ChartDirector\\chartdir.h	/^	static inline int StartOfMonthFilter(int labelStep = 1, double initialMargin = 0.05)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
StartOfSecondFilter	.\\ChartDirector\\chartdir.h	/^    static inline int StartOfSecondFilter(int labelStep = 1, double initialMargin = 0.05)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
StartOfWeekFilter	.\\ChartDirector\\chartdir.h	/^	static inline int StartOfWeekFilter(int labelStep = 1, double initialMargin = 0.05)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
StartOfYearFilter	.\\ChartDirector\\chartdir.h	/^	static inline int StartOfYearFilter(int labelStep = 1, double initialMargin = 0.05)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
StepLineLayer	.\\ChartDirector\\chartdir.h	/^	StepLineLayer(StepLineLayerInternal *_ptr) : LineLayer(StepLineLayer2LineLayer(_ptr)), ptr(_ptr/;"	f	class:CD_NAMESPACE::StepLineLayer
StepLineLayer	.\\ChartDirector\\chartdir.h	/^class StepLineLayer : public LineLayer$/;"	c	namespace:CD_NAMESPACE
StringArray	.\\memblock.h	/^	StringArray() : len(0), data(0) {}$/;"	f	class:StringArray
StringArray	.\\memblock.h	/^	StringArray(const char * const *_data, int _len) : len(_len), data(_data) {}$/;"	f	class:StringArray
StringArray	.\\memblock.h	/^class StringArray$/;"	c
SubclassWindow	.\\gridctrl_src\\GridCtrl.cpp	/^BOOL CGridCtrl::SubclassWindow(HWND hWnd) $/;"	f	class:CGridCtrl	typeref:typename:BOOL
SurfaceChart	.\\ChartDirector\\chartdir.h	/^	SurfaceChart(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::SurfaceChart
SurfaceChart	.\\ChartDirector\\chartdir.h	/^class SurfaceChart : public ThreeDChart$/;"	c	namespace:CD_NAMESPACE
SymbolType	.\\ChartDirector\\chartdir.h	/^	enum SymbolType$/;"	g	namespace:CD_NAMESPACE::Chart
SymbolType	.\\ChartDirector\\chartdir.h	/^enum SymbolType$/;"	g	namespace:CD_NAMESPACE
SysInfo03	.\\FileSysInfo.cpp	/^CSysInfo03  	SysInfo03;$/;"	v	typeref:typename:CSysInfo03
SysInfo19	.\\FileSysInfo.cpp	/^CSysInfo19  	SysInfo19;$/;"	v	typeref:typename:CSysInfo19
SysInfo25	.\\FileSysInfo.cpp	/^CSysInfo25  	SysInfo25;$/;"	v	typeref:typename:CSysInfo25
SysInfoView01	.\\FileSysInfo.cpp	/^CSysInfoView01  SysInfoView01;$/;"	v	typeref:typename:CSysInfoView01
SystemDir	.\\Globals.h	/^	CString	SystemDir;					\/\/ ACE400Gage ÇÁ·Î±×·¥À» ¼öÇàÇÑ µð·ºÅä¸®$/;"	m	struct:sFILE_DATA	typeref:typename:CString
SystemFile	.\\Globals.h	/^	CString SystemFile; $/;"	m	struct:sFILE_DATA	typeref:typename:CString
SystemFileName	.\\Globals.h	/^	CString SystemFileName; $/;"	m	struct:sFILE_DATA	typeref:typename:CString
TCHARtoUTF8	.\\ChartViewer.h	/^	TCHARtoUTF8(const TCHAR *t_string) : utf8_string(0), needFree(false)$/;"	f	class:TCHARtoUTF8
TCHARtoUTF8	.\\ChartViewer.h	/^class TCHARtoUTF8$/;"	c
TEST_ERR	.\\Error.h	/^	TEST_ERR=1,$/;"	e	enum:ErrID
TEST_TRACE	.\\Error.h	/^	TEST_TRACE=2,$/;"	e	enum:ErrID
THIS_FILE	.\\ACE400Gage.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\ConfigDialog.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\Error.cpp	/^static char THIS_FILE[]=__FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\GageDialog.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\Globals.cpp	/^static char THIS_FILE[]=__FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\MainDialog.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\gridctrl_src\\GridCtrl.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\gridctrl_src\\GridDropTarget.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\gridctrl_src\\InPlaceEdit.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\gridctrl_src\\InPlaceList.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	typeref:typename:char[]	file:
THIS_FILE	.\\gridctrl_src\\TitleTip.cpp	/^static char THIS_FILE[] = __FILE__;$/;"	v	typeref:typename:char[]	file:
TITLETIP_CLASSNAME	.\\gridctrl_src\\TitleTip.h	/^#define TITLETIP_CLASSNAME /;"	d
TOP_MARGIN	.\\gridctrl_src\\GridCtrl.cpp	/^#define TOP_MARGIN /;"	d	file:
TRY	.\\gridctrl_src\\GridCtrl.h	/^#define TRY /;"	d
TTFText	.\\ChartDirector\\chartdir.h	/^	TTFText(TTFTextInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::TTFText
TTFText	.\\ChartDirector\\chartdir.h	/^class TTFText$/;"	c	namespace:CD_NAMESPACE
TextBox	.\\ChartDirector\\chartdir.h	/^	TextBox(TextBoxInternal *_ptr) : Box(TextBox2Box(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::TextBox
TextBox	.\\ChartDirector\\chartdir.h	/^class TextBox : public Box$/;"	c	namespace:CD_NAMESPACE
TextColor	.\\ChartDirector\\chartdir.h	/^		TextColor = (int)0xffff0002,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200303
TextColor	.\\ChartDirector\\chartdir.h	/^	TextColor = 0xffff0002,$/;"	e	enum:CD_NAMESPACE::__anone890a0201703
TextStyle	.\\ChartDirector\\chartdir.h	/^typedef TextBox TextStyle;$/;"	t	namespace:CD_NAMESPACE	typeref:typename:TextBox
ThreeDChart	.\\ChartDirector\\chartdir.h	/^	ThreeDChart() : ptr(0) {}$/;"	f	class:CD_NAMESPACE::ThreeDChart
ThreeDChart	.\\ChartDirector\\chartdir.h	/^class ThreeDChart : public BaseChart$/;"	c	namespace:CD_NAMESPACE
ThreeDScatterChart	.\\ChartDirector\\chartdir.h	/^	ThreeDScatterChart(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::ThreeDScatterChart
ThreeDScatterChart	.\\ChartDirector\\chartdir.h	/^class ThreeDScatterChart : public ThreeDChart$/;"	c	namespace:CD_NAMESPACE
ThreeDScatterGroup	.\\ChartDirector\\chartdir.h	/^	ThreeDScatterGroup(ThreeDScatterGroupInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::ThreeDScatterGroup
ThreeDScatterGroup	.\\ChartDirector\\chartdir.h	/^class ThreeDScatterGroup : public AutoDestroy$/;"	c	namespace:CD_NAMESPACE
TickInc	.\\ChartDirector\\chartdir.h	/^	static const double TickInc = 1.0e200;$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const double
Top	.\\ChartDirector\\chartdir.h	/^		Top = TopCenter, Bottom = BottomCenter,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
Top	.\\ChartDirector\\chartdir.h	/^	Top = TopCenter,$/;"	e	enum:CD_NAMESPACE::Alignment
TopCenter	.\\ChartDirector\\chartdir.h	/^		TopLeft = 7,	TopCenter = 8,		TopRight = 9,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
TopCenter	.\\ChartDirector\\chartdir.h	/^	TopLeft = 7,	TopCenter = 8,		TopRight = 9,$/;"	e	enum:CD_NAMESPACE::Alignment
TopLeft	.\\ChartDirector\\chartdir.h	/^		TopLeft = 7,	TopCenter = 8,		TopRight = 9,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
TopLeft	.\\ChartDirector\\chartdir.h	/^	TopLeft = 7,	TopCenter = 8,		TopRight = 9,$/;"	e	enum:CD_NAMESPACE::Alignment
TopLeft2	.\\ChartDirector\\chartdir.h	/^		TopLeft2 = 10, TopRight2 = 11, $/;"	e	enum:CD_NAMESPACE::Chart::Alignment
TopRight	.\\ChartDirector\\chartdir.h	/^		TopLeft = 7,	TopCenter = 8,		TopRight = 9,$/;"	e	enum:CD_NAMESPACE::Chart::Alignment
TopRight	.\\ChartDirector\\chartdir.h	/^	TopLeft = 7,	TopCenter = 8,		TopRight = 9,$/;"	e	enum:CD_NAMESPACE::Alignment
TopRight2	.\\ChartDirector\\chartdir.h	/^		TopLeft2 = 10, TopRight2 = 11, $/;"	e	enum:CD_NAMESPACE::Chart::Alignment
TouchBar	.\\ChartDirector\\chartdir.h	/^	static const double TouchBar = -1.7E-100;$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const double
TouchBar	.\\ChartDirector\\chartdir.h	/^static const double TouchBar = -1.7E-100;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const double
Transparent	.\\ChartDirector\\chartdir.h	/^		Transparent = (int)0xff000000,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200303
Transparent	.\\ChartDirector\\chartdir.h	/^	Transparent = 0xff000000,$/;"	e	enum:CD_NAMESPACE::__anone890a0201703
TreeMapBinaryByMid	.\\ChartDirector\\chartdir.h	/^        TreeMapBinaryByMid = 5,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201303
TreeMapBinaryBySize	.\\ChartDirector\\chartdir.h	/^        TreeMapBinaryBySize = 4,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201303
TreeMapChart	.\\ChartDirector\\chartdir.h	/^	TreeMapChart(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::TreeMapChart
TreeMapChart	.\\ChartDirector\\chartdir.h	/^class TreeMapChart : public BaseChart$/;"	c	namespace:CD_NAMESPACE
TreeMapNoLayout	.\\ChartDirector\\chartdir.h	/^        TreeMapNoLayout = 6$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201303
TreeMapNode	.\\ChartDirector\\chartdir.h	/^	TreeMapNode(TreeMapNodeInternal *_ptr) : ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::TreeMapNode
TreeMapNode	.\\ChartDirector\\chartdir.h	/^class TreeMapNode: public AutoDestroy, protected GarbageContainer$/;"	c	namespace:CD_NAMESPACE
TreeMapSliceAndDice	.\\ChartDirector\\chartdir.h	/^        TreeMapSliceAndDice = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201303
TreeMapSquarify	.\\ChartDirector\\chartdir.h	/^        TreeMapSquarify = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201303
TreeMapStrip	.\\ChartDirector\\chartdir.h	/^        TreeMapStrip = 3,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201303
TrendLayer	.\\ChartDirector\\chartdir.h	/^	TrendLayer(TrendLayerInternal *_ptr) : Layer(TrendLayer2Layer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::TrendLayer
TrendLayer	.\\ChartDirector\\chartdir.h	/^class TrendLayer : public Layer$/;"	c	namespace:CD_NAMESPACE
TriangleShape	.\\ChartDirector\\chartdir.h	/^		TriangleShape = 3,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200603
TriangleSymbol	.\\ChartDirector\\chartdir.h	/^		TriangleSymbol = 3,$/;"	e	enum:CD_NAMESPACE::Chart::SymbolType
TriangleSymbol	.\\ChartDirector\\chartdir.h	/^	TriangleSymbol = 3,$/;"	e	enum:CD_NAMESPACE::SymbolType
TriangularFrame	.\\ChartDirector\\chartdir.h	/^		TriangularFrame = 3,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200b03
TriangularPointer	.\\ChartDirector\\chartdir.h	/^	enum { DiamondPointer, TriangularPointer, ArrowPointer, ArrowPointer2, LinePointer, PencilPoint/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200a03
TriangularPointer2	.\\ChartDirector\\chartdir.h	/^	       TriangularPointer2, LinePointer2 };$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200a03
TriangularShading	.\\ChartDirector\\chartdir.h	/^		TriangularShading = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200b03
TryPalette	.\\ChartDirector\\chartdir.h	/^	enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	e	enum:CD_NAMESPACE::Chart::PaletteMode
TryPalette	.\\ChartDirector\\chartdir.h	/^	enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	e	enum:CD_NAMESPACE::DrawArea::PaletteMode
TryPalette	.\\ChartDirector\\chartdir.h	/^enum PaletteMode { TryPalette, ForcePalette, NoPalette };$/;"	e	enum:CD_NAMESPACE::PaletteMode
UM_TO_MM	.\\Globals.h	/^	MM_TO_UM, UM_TO_MM, SEC_TO_MSEC, MSEC_TO_SEC$/;"	e	enum:UNIT_CONVERT_TYPE
UNIT	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	g
UNIT_CONVERT_TYPE	.\\Globals.h	/^enum UNIT_CONVERT_TYPE	{ $/;"	g
UPDATE_VIEW_PORT_TIMER	.\\ChartViewer.cpp	/^enum { UPDATE_VIEW_PORT_TIMER = 1, DELAYED_MOUSE_MOVE_TIMER = 2 };$/;"	e	enum:__anon6d4e3f840203	file:
USER_ERR	.\\Error.h	/^	USER_ERR=650,$/;"	e	enum:ErrID
UTF8toTCHAR	.\\ChartViewer.h	/^	UTF8toTCHAR(const char *utf8_string) : t_string(0), needFree(false)$/;"	f	class:UTF8toTCHAR
UTF8toTCHAR	.\\ChartViewer.h	/^class UTF8toTCHAR$/;"	c
UTF8toWCHAR	.\\ChartDirector\\chartdir.h	/^	UTF8toWCHAR(const char *utf8_string) : w_string(0)$/;"	f	class:CD_NAMESPACE::UTF8toWCHAR
UTF8toWCHAR	.\\ChartDirector\\chartdir.h	/^class UTF8toWCHAR$/;"	c	namespace:CD_NAMESPACE
VC_EXTRALEAN	.\\StdAfx.h	/^#define VC_EXTRALEAN	/;"	d
VPC_ClickToCenter	.\\ChartDirector\\chartdir.h	/^		VPC_DragInsideToMove, VPC_DragBorderToResize, VPC_DragOutsideToSelect, VPC_ClickToCenter,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_CornerMargin	.\\ChartDirector\\chartdir.h	/^		VPC_MouseMargin, VPC_CornerMargin, VPC_VpExternalColor, VPC_VpEdgeColor, VPC_VpFillColor,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_DragBorderToResize	.\\ChartDirector\\chartdir.h	/^		VPC_DragInsideToMove, VPC_DragBorderToResize, VPC_DragOutsideToSelect, VPC_ClickToCenter,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_DragInsideToMove	.\\ChartDirector\\chartdir.h	/^		VPC_DragInsideToMove, VPC_DragBorderToResize, VPC_DragOutsideToSelect, VPC_ClickToCenter,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_DragOutsideToSelect	.\\ChartDirector\\chartdir.h	/^		VPC_DragInsideToMove, VPC_DragBorderToResize, VPC_DragOutsideToSelect, VPC_ClickToCenter,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_MouseCursor	.\\ChartDirector\\chartdir.h	/^		VPC_ScrollDirection, VPC_MouseCursor, VPC_NeedUpdateDisplay, VPC_NeedUpdateChart,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_MouseMargin	.\\ChartDirector\\chartdir.h	/^		VPC_MouseMargin, VPC_CornerMargin, VPC_VpExternalColor, VPC_VpEdgeColor, VPC_VpFillColor,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_NeedUpdateChart	.\\ChartDirector\\chartdir.h	/^		VPC_ScrollDirection, VPC_MouseCursor, VPC_NeedUpdateDisplay, VPC_NeedUpdateChart,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_NeedUpdateDisplay	.\\ChartDirector\\chartdir.h	/^		VPC_ScrollDirection, VPC_MouseCursor, VPC_NeedUpdateDisplay, VPC_NeedUpdateChart,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_NeedUpdateImageMap	.\\ChartDirector\\chartdir.h	/^		VPC_NeedUpdateImageMap,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_ScrollDirection	.\\ChartDirector\\chartdir.h	/^		VPC_ScrollDirection, VPC_MouseCursor, VPC_NeedUpdateDisplay, VPC_NeedUpdateChart,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_SelectBoxLineColor	.\\ChartDirector\\chartdir.h	/^		VPC_VpBorderWidth, VPC_SelectBoxLineColor, VPC_SelectBoxLineWidth, VPC_ZoomDirection,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_SelectBoxLineWidth	.\\ChartDirector\\chartdir.h	/^		VPC_VpBorderWidth, VPC_SelectBoxLineColor, VPC_SelectBoxLineWidth, VPC_ZoomDirection,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_VpBorderWidth	.\\ChartDirector\\chartdir.h	/^		VPC_VpBorderWidth, VPC_SelectBoxLineColor, VPC_SelectBoxLineWidth, VPC_ZoomDirection,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_VpEdgeColor	.\\ChartDirector\\chartdir.h	/^		VPC_MouseMargin, VPC_CornerMargin, VPC_VpExternalColor, VPC_VpEdgeColor, VPC_VpFillColor,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_VpExternalColor	.\\ChartDirector\\chartdir.h	/^		VPC_MouseMargin, VPC_CornerMargin, VPC_VpExternalColor, VPC_VpEdgeColor, VPC_VpFillColor,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_VpFillColor	.\\ChartDirector\\chartdir.h	/^		VPC_MouseMargin, VPC_CornerMargin, VPC_VpExternalColor, VPC_VpEdgeColor, VPC_VpFillColor,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VPC_ZoomDirection	.\\ChartDirector\\chartdir.h	/^		VPC_VpBorderWidth, VPC_SelectBoxLineColor, VPC_SelectBoxLineWidth, VPC_ZoomDirection,$/;"	e	enum:CD_NAMESPACE::ViewPortControlBase::__anone890a0201503
VS_VERSION_INFO	.\\ACE400Gage.rc	/^VS_VERSION_INFO VERSIONINFO$/;"	v
VectorLayer	.\\ChartDirector\\chartdir.h	/^	VectorLayer(VectorLayerInternal *_ptr) : Layer(VectorLayer2Layer(_ptr)), ptr(_ptr) {}$/;"	f	class:CD_NAMESPACE::VectorLayer
VectorLayer	.\\ChartDirector\\chartdir.h	/^class VectorLayer : public Layer$/;"	c	namespace:CD_NAMESPACE
ViewPortControlBase	.\\ChartDirector\\chartdir.h	/^	ViewPortControlBase() : ptr(CViewPortControlBase_create()) {}$/;"	f	class:CD_NAMESPACE::ViewPortControlBase
ViewPortControlBase	.\\ChartDirector\\chartdir.h	/^class ViewPortControlBase$/;"	c	namespace:CD_NAMESPACE
ViewPortManager	.\\ChartDirector\\chartdir.h	/^	ViewPortManager() : ptr(CViewPortManager_create()) {}$/;"	f	class:CD_NAMESPACE::ViewPortManager
ViewPortManager	.\\ChartDirector\\chartdir.h	/^class ViewPortManager$/;"	c	namespace:CD_NAMESPACE
ViewPortNoUpdate	.\\ChartDirector\\chartdir.h	/^		ViewPortNoUpdate = 0,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0201403
WCHARtoUTF8	.\\ChartDirector\\chartdir.h	/^	WCHARtoUTF8(const wchar_t *w_string) : utf8_string(0)$/;"	f	class:CD_NAMESPACE::WCHARtoUTF8
WCHARtoUTF8	.\\ChartDirector\\chartdir.h	/^class WCHARtoUTF8$/;"	c	namespace:CD_NAMESPACE
WINAPI	.\\Globals.cpp	/^typedef BOOL (WINAPI *GetMemInfo)( Win32MemArgs );$/;"	t	typeref:typename:BOOL (* GetMemInfo)(Win32MemArgs)	file:
WMP	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat { PNG, GIF, JPG, WMP, BMP, SVG, SVGZ, PDF, AGF, QTIMG };$/;"	e	enum:CD_NAMESPACE::Chart::ImgFormat
WMP	.\\ChartDirector\\chartdir.h	/^	enum ImgFormat {PNG, GIF, JPG, WMP};$/;"	e	enum:CD_NAMESPACE::BaseChart::ImgFormat
WMP	.\\ChartDirector\\chartdir.h	/^enum ImgFormat {PNG, GIF, JPG, WMP, BMP};$/;"	e	enum:CD_NAMESPACE::ImgFormat
Win32MemArgs	.\\Globals.cpp	/^#define Win32MemArgs /;"	d	file:
WorkingSetSize	.\\Globals.cpp	/^   DWORD WorkingSetSize;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
XAxis	.\\ChartDirector\\chartdir.h	/^typedef BaseAxis XAxis;$/;"	t	namespace:CD_NAMESPACE	typeref:typename:BaseAxis
XAxisAtOrigin	.\\ChartDirector\\chartdir.h	/^		XAxisAtOrigin = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200e03
XAxisScale	.\\ChartDirector\\chartdir.h	/^	enum ScaleType { PixelScale, XAxisScale, YAxisScale, EndPoints,$/;"	e	enum:CD_NAMESPACE::Chart::ScaleType
XAxisScale	.\\ChartDirector\\chartdir.h	/^enum ScaleType { PixelScale, XAxisScale, YAxisScale,$/;"	e	enum:CD_NAMESPACE::ScaleType
XAxisSymmetric	.\\ChartDirector\\chartdir.h	/^		XAxisSymmetric = 1,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200d03
XAxisSymmetricIfNeeded	.\\ChartDirector\\chartdir.h	/^		XAxisSymmetricIfNeeded = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200d03
XYAxisAtOrigin	.\\ChartDirector\\chartdir.h	/^		XYAxisAtOrigin = 3$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200e03
XYAxisSymmetric	.\\ChartDirector\\chartdir.h	/^		XYAxisSymmetric = 16,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200d03
XYAxisSymmetricIfNeeded	.\\ChartDirector\\chartdir.h	/^		XYAxisSymmetricIfNeeded = 32$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200d03
XYChart	.\\ChartDirector\\chartdir.h	/^	XYChart(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::XYChart
XYChart	.\\ChartDirector\\chartdir.h	/^class XYChart : public BaseChart$/;"	c	namespace:CD_NAMESPACE
YAxis	.\\ChartDirector\\chartdir.h	/^typedef BaseAxis YAxis;$/;"	t	namespace:CD_NAMESPACE	typeref:typename:BaseAxis
YAxisAtOrigin	.\\ChartDirector\\chartdir.h	/^		YAxisAtOrigin = 2,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200e03
YAxisScale	.\\ChartDirector\\chartdir.h	/^	enum ScaleType { PixelScale, XAxisScale, YAxisScale, EndPoints,$/;"	e	enum:CD_NAMESPACE::Chart::ScaleType
YAxisScale	.\\ChartDirector\\chartdir.h	/^enum ScaleType { PixelScale, XAxisScale, YAxisScale,$/;"	e	enum:CD_NAMESPACE::ScaleType
YAxisSymmetric	.\\ChartDirector\\chartdir.h	/^		YAxisSymmetric = 4,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200d03
YAxisSymmetricIfNeeded	.\\ChartDirector\\chartdir.h	/^		YAxisSymmetricIfNeeded = 8,$/;"	e	enum:CD_NAMESPACE::Chart::__anone890a0200d03
_APS_NEXT_COMMAND_VALUE	.\\resource.h	/^#define _APS_NEXT_COMMAND_VALUE /;"	d
_APS_NEXT_CONTROL_VALUE	.\\resource.h	/^#define _APS_NEXT_CONTROL_VALUE /;"	d
_APS_NEXT_RESOURCE_VALUE	.\\resource.h	/^#define _APS_NEXT_RESOURCE_VALUE /;"	d
_APS_NEXT_SYMED_VALUE	.\\resource.h	/^#define _APS_NEXT_SYMED_VALUE /;"	d
_GV_ITEM	.\\gridctrl_src\\GridCtrl.h	/^typedef struct _GV_ITEM { $/;"	s
_SYSTEM_H_INCLUDED_	.\\System.h	/^#define _SYSTEM_H_INCLUDED_$/;"	d
_WIN32_WCE_NO_CURSOR	.\\gridctrl_src\\GridCtrl.h	/^#define _WIN32_WCE_NO_CURSOR$/;"	d
_WIN32_WCE_NO_PRINTING	.\\gridctrl_src\\GridCtrl.h	/^#define _WIN32_WCE_NO_PRINTING$/;"	d
__PrintMemSize	.\\Globals.cpp	/^void __PrintMemSize(char* strFunc, int line)$/;"	f	typeref:typename:void
__anon1ad2ae240108	.\\Globals.cpp	/^typedef struct {$/;"	s	file:
__anon275519290108	.\\GageDialog.h	/^typedef struct {$/;"	s
__anon275519290203	.\\GageDialog.h	/^	enum { IDD = IDD_GAGE_DIALOG };$/;"	g	class:CGageDialog
__anon6d4e3f840103	.\\ChartViewer.cpp	/^enum { NO_DELAY, NEED_DELAY, NEED_UPDATE };$/;"	g	file:
__anon6d4e3f840203	.\\ChartViewer.cpp	/^enum { UPDATE_VIEW_PORT_TIMER = 1, DELAYED_MOUSE_MOVE_TIMER = 2 };$/;"	g	file:
__anon6d7e64ba0103	.\\MainDialog.h	/^	enum { IDD = IDD_MAIN_DIALOG };$/;"	g	class:CMainDialog
__anon7936154b0103	.\\ConfigDialog.h	/^	enum { IDD = IDD_CONFIG_DIALOG };$/;"	g	class:CConfigDialog
__anon99cd842f0108	.\\Error.h	/^typedef struct {$/;"	s
__anonc6aa74d50103	.\\MainDialog.cpp	/^	enum { IDD = IDD_ABOUTBOX };$/;"	g	class:CAboutDlg	file:
__anone601b7a90103	.\\ChartViewer.h	/^	{ $/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200103	.\\ChartDirector\\chartdir.h	/^	enum { AutoGrid = -2 };$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200203	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200303	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200403	.\\ChartDirector\\chartdir.h	/^	enum { SideLayout, CircleLayout };$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200503	.\\ChartDirector\\chartdir.h	/^	{	$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200603	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200703	.\\ChartDirector\\chartdir.h	/^	{ $/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200803	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200903	.\\ChartDirector\\chartdir.h	/^	enum { HLOCDefault, HLOCOpenClose, HLOCUpDown };$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200a03	.\\ChartDirector\\chartdir.h	/^	enum { DiamondPointer, TriangularPointer, ArrowPointer, ArrowPointer2, LinePointer, PencilPoint/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200b03	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200c03	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200d03	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200e03	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0200f03	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0201003	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0201103	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0201203	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0201303	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0201403	.\\ChartDirector\\chartdir.h	/^	{$/;"	g	namespace:CD_NAMESPACE::Chart
__anone890a0201503	.\\ChartDirector\\chartdir.h	/^	{	$/;"	g	class:CD_NAMESPACE::ViewPortControlBase
__anone890a0201603	.\\ChartDirector\\chartdir.h	/^{$/;"	g	namespace:CD_NAMESPACE
__anone890a0201703	.\\ChartDirector\\chartdir.h	/^{$/;"	g	namespace:CD_NAMESPACE
__anone890a0201803	.\\ChartDirector\\chartdir.h	/^enum {SideLayout, CircleLayout};$/;"	g	namespace:CD_NAMESPACE
__cdecl	.\\ChartDirector\\bchartdir.h	/^#define __cdecl$/;"	d
abs	.\\ChartDirector\\chartdir.h	/^	ArrayMath& abs() { CArrayMath_abs(ptr); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
acc	.\\ChartDirector\\chartdir.h	/^	ArrayMath& acc() { CArrayMath_acc(ptr); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
add	.\\ChartDirector\\chartdir.h	/^	ArrayMath& add(DoubleArray b) { CArrayMath_add(ptr, b.data, b.len); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
add	.\\ChartDirector\\chartdir.h	/^	ArrayMath& add(double b) { CArrayMath_add2(ptr, b); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
addADX	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addADX(int height, int period, int posColor, int negColor, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addATR	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addATR(int height, int period, int color1, int color2)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addAccDist	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addAccDist(int height, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addAreaLayer	.\\ChartDirector\\chartdir.h	/^	AreaLayer *addAreaLayer(DoubleArray data, int color = -1, const char *name = 0, int depth = 0)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:AreaLayer *
addAreaLayer	.\\ChartDirector\\chartdir.h	/^	AreaLayer *addAreaLayer(int dataCombineMethod = Chart::Stack, int depth = 0)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:AreaLayer *
addAreaLayer	.\\ChartDirector\\chartdir.h	/^	AreaLayer *addAreaLayer(int noOfPoints, const double *data, int color = -1, const char *name = /;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:AreaLayer *
addAreaLayer	.\\ChartDirector\\chartdir.h	/^	PolarAreaLayer *addAreaLayer(DoubleArray data, int color = -1, const char *name = 0)$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:PolarAreaLayer *
addAroon	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addAroon(int height, int period, int upColor, int downColor)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addAroonOsc	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addAroonOsc(int height, int period, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addAxis	.\\ChartDirector\\chartdir.h	/^	Axis *addAxis(int align, int offset) { return regAxis(CXYChart_addAxis(ptr, align, offset)); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:Axis *
addBand	.\\ChartDirector\\FinanceChart.h	/^    public: InterLineLayer* addBand(DoubleArray upperLine, DoubleArray lowerLine, int lineColor,$/;"	f	class:FinanceChart	typeref:typename:InterLineLayer *
addBar	.\\ChartDirector\\chartdir.h	/^    TextBox *addBar(double startValue, double endValue, int color, int effect = 0, int roundedCo/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:TextBox *
addBarIndicator	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addBarIndicator(int height, DoubleArray data, int color, const char* name)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addBarIndicator2	.\\ChartDirector\\FinanceChart.h	/^    public: BarLayer* addBarIndicator2(XYChart* c, DoubleArray data, int color, const char* name/;"	f	class:FinanceChart	typeref:typename:BarLayer *
addBarLayer	.\\ChartDirector\\chartdir.h	/^	BarLayer *addBarLayer(DoubleArray data, IntArray colors, StringArray names = StringArray(), int/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:BarLayer *
addBarLayer	.\\ChartDirector\\chartdir.h	/^	BarLayer *addBarLayer(DoubleArray data, int color = -1, const char *name = 0, int depth = 0)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:BarLayer *
addBarLayer	.\\ChartDirector\\chartdir.h	/^	BarLayer *addBarLayer(int dataCombineMethod = Chart::Side, int depth = 0)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:BarLayer *
addBarLayer	.\\ChartDirector\\chartdir.h	/^	BarLayer *addBarLayer(int noOfPoints, const double *data, const int *colors, const char* const*/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:BarLayer *
addBarLayer	.\\ChartDirector\\chartdir.h	/^	BarLayer *addBarLayer(int noOfPoints, const double *data, int color = -1, const char *name = 0,/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:BarLayer *
addBollingerBand	.\\ChartDirector\\FinanceChart.h	/^    public: InterLineLayer* addBollingerBand(int period, double bandWidth, int lineColor,$/;"	f	class:FinanceChart	typeref:typename:InterLineLayer *
addBollingerWidth	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addBollingerWidth(int height, int period, double width, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addBoxLayer	.\\ChartDirector\\chartdir.h	/^	BoxWhiskerLayer *addBoxLayer(DoubleArray boxTop, DoubleArray boxBottom, int color = -1, const c/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:BoxWhiskerLayer *
addBoxWhiskerLayer	.\\ChartDirector\\chartdir.h	/^	BoxWhiskerLayer *addBoxWhiskerLayer($/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:BoxWhiskerLayer *
addBoxWhiskerLayer2	.\\ChartDirector\\chartdir.h	/^	BoxWhiskerLayer *addBoxWhiskerLayer2(DoubleArray boxTop, DoubleArray boxBottom, DoubleArray max/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:BoxWhiskerLayer *
addCCI	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addCCI(int height, int period, int color, double deviation, int upColor,$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addCLV	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addCLV(int height, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addCandleStick	.\\ChartDirector\\FinanceChart.h	/^    public: CandleStickLayer* addCandleStick(int upColor, int downColor)$/;"	f	class:FinanceChart	typeref:typename:CandleStickLayer *
addCandleStickLayer	.\\ChartDirector\\chartdir.h	/^	CandleStickLayer *addCandleStickLayer($/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:CandleStickLayer *
addChaikinMoneyFlow	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addChaikinMoneyFlow(int height, int period, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addChaikinOscillator	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addChaikinOscillator(int height, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addChaikinVolatility	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addChaikinVolatility(int height, int period1, int period2, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addChart	.\\ChartDirector\\chartdir.h	/^	void addChart(int x, int y, BaseChart *c) {$/;"	f	class:CD_NAMESPACE::MultiChart	typeref:typename:void
addCloseLine	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addCloseLine(int color)$/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addColorScale	.\\ChartDirector\\chartdir.h	/^    void addColorScale(DoubleArray colorStops, int startPos = -0x7fffffff, int startWidth = -0x7/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
addComparison	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addComparison(DoubleArray data, int color, const char *name)$/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addConfidenceBand	.\\ChartDirector\\chartdir.h	/^	void addConfidenceBand(double confidence, int upperFillColor, int upperEdgeColor = Chart::Trans/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:void
addContourLayer	.\\ChartDirector\\chartdir.h	/^	ContourLayer *addContourLayer(DoubleArray xData, DoubleArray yData, DoubleArray zData)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:ContourLayer *
addCustomAggregateLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *addCustomAggregateLabel(int dataItem, const char *label, const char *font = 0,$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:TextBox *
addCustomDataLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *addCustomDataLabel(int dataSet, int dataItem, const char *label,$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:TextBox *
addCustomDataLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *addCustomDataLabel(int i, const char *label, const char *font = 0,$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:TextBox *
addCustomGroupLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *addCustomGroupLabel(int dataGroup, int dataItem, const char *label, $/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:TextBox *
addDPO	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addDPO(int height, int period, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addDataGroup	.\\ChartDirector\\chartdir.h	/^	void addDataGroup(const char *name = 0) { CLayer_addDataGroup(ptr, name); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
addDataSet	.\\ChartDirector\\chartdir.h	/^	DataSet *addDataSet(DoubleArray data, int color = -1, const char *name = 0)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:DataSet *
addDataSet	.\\ChartDirector\\chartdir.h	/^	DataSet *addDataSet(int noOfPoints, const double *d, int color = -1, const char *name = 0)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:DataSet *
addDonchianChannel	.\\ChartDirector\\FinanceChart.h	/^    public: InterLineLayer* addDonchianChannel(int period, int lineColor, int fillColor)$/;"	f	class:FinanceChart	typeref:typename:InterLineLayer *
addDonchianWidth	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addDonchianWidth(int height, int period, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addEaseOfMovement	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addEaseOfMovement(int height, int period, int color1, int color2)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addEnvelop	.\\ChartDirector\\FinanceChart.h	/^    public: InterLineLayer* addEnvelop(int period, double range, int lineColor, int fillColor)$/;"	f	class:FinanceChart	typeref:typename:InterLineLayer *
addExpMovingAvg	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addExpMovingAvg(int period, int color)$/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addExtraField	.\\ChartDirector\\chartdir.h	/^	void addExtraField(DoubleArray numbers) { CBaseChart_addExtraField2(ptr, numbers.data, numbers./;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
addExtraField	.\\ChartDirector\\chartdir.h	/^	void addExtraField(DoubleArray numbers) { CLayer_addExtraField2(ptr, numbers.data, numbers.len)/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
addExtraField	.\\ChartDirector\\chartdir.h	/^	void addExtraField(DoubleArray numbers)$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:void
addExtraField	.\\ChartDirector\\chartdir.h	/^	void addExtraField(StringArray texts) { CBaseChart_addExtraField(ptr, texts.data, texts.len); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
addExtraField	.\\ChartDirector\\chartdir.h	/^	void addExtraField(StringArray texts) { CLayer_addExtraField(ptr, texts.data, texts.len); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
addExtraField	.\\ChartDirector\\chartdir.h	/^	void addExtraField(StringArray texts)$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:void
addFastStochastic	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addFastStochastic(int height, int period1, int period2, int color1, int col/;"	f	class:FinanceChart	typeref:typename:XYChart *
addGlare	.\\ChartDirector\\chartdir.h	/^	void addGlare(double radius = Chart::NoValue, double span = 135, double rotate = 0, $/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:void
addHLOC	.\\ChartDirector\\FinanceChart.h	/^    public: HLOCLayer* addHLOC(int upColor, int downColor)$/;"	f	class:FinanceChart	typeref:typename:HLOCLayer *
addHLOCLayer	.\\ChartDirector\\chartdir.h	/^	HLOCLayer *addHLOCLayer()$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:HLOCLayer *
addHLOCLayer	.\\ChartDirector\\chartdir.h	/^	HLOCLayer *addHLOCLayer(DoubleArray highData, DoubleArray lowData, DoubleArray openData = Doubl/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:HLOCLayer *
addHLOCLayer	.\\ChartDirector\\chartdir.h	/^	HLOCLayer *addHLOCLayer(DoubleArray highData, DoubleArray lowData, DoubleArray openData,$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:HLOCLayer *
addHLOCLayer	.\\ChartDirector\\chartdir.h	/^	HLOCLayer *addHLOCLayer(int noOfPoints, const double *highData, const double *lowData, const do/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:HLOCLayer *
addIndicator	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addIndicator(int height)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addInterLineLayer	.\\ChartDirector\\chartdir.h	/^	InterLineLayer *addInterLineLayer(LineObj *line1, LineObj *line2, int color12, int color21 = -1/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:InterLineLayer *
addKey	.\\ChartDirector\\chartdir.h	/^	void addKey(const char *text, int color, int lineWidth = 0, const DrawArea *drawarea = 0)$/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:void
addKey	.\\ChartDirector\\chartdir.h	/^	void addKey(int pos, const char *text, int color, int lineWidth = 0, const DrawArea *drawarea =/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:void
addLabel	.\\ChartDirector\\chartdir.h	/^	void addLabel(double pos, const char *label) { CBaseMeter_addLabel(ptr, pos, label); }$/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
addLabel	.\\ChartDirector\\chartdir.h	/^	void addLabel(double pos, const char *label)$/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:void
addLabel	.\\ChartDirector\\chartdir.h	/^	void addLabel(double pos, const char *label)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
addLegend	.\\ChartDirector\\chartdir.h	/^	LegendBox *addLegend(int x, int y, bool vertical = true, const char *font = 0,$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:LegendBox *
addLegend2	.\\ChartDirector\\chartdir.h	/^	LegendBox *addLegend2(int x, int y, int noOfCols, const char *font = 0, double fontSize = 10)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:LegendBox *
addLine	.\\ChartDirector\\chartdir.h	/^	Line *addLine(int x1, int y1, int x2, int y2, int color = Chart::LineColor, int lineWidth = 1)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:Line *
addLineIndicator	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addLineIndicator(int height, DoubleArray data, int color, const char* name)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addLineIndicator2	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addLineIndicator2(XYChart* c, DoubleArray data, int color, const char* na/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addLineLayer	.\\ChartDirector\\chartdir.h	/^	LineLayer *addLineLayer(DoubleArray data, int color = -1, const char *name = 0, int depth = 0)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:LineLayer *
addLineLayer	.\\ChartDirector\\chartdir.h	/^	LineLayer *addLineLayer(int dataCombineMethod = Chart::Overlay, int depth = 0)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:LineLayer *
addLineLayer	.\\ChartDirector\\chartdir.h	/^	LineLayer *addLineLayer(int noOfPoints, const double *data, int color = -1, const char *name = /;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:LineLayer *
addLineLayer	.\\ChartDirector\\chartdir.h	/^	PolarLineLayer *addLineLayer(DoubleArray data, int color = -1, const char *name = 0)$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:PolarLineLayer *
addMACD	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addMACD(int height, int period1, int period2, int period3, int color,$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addMFI	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addMFI(int height, int period, int color, double range, int upColor,$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addMainChart	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addMainChart(int height)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addMark	.\\ChartDirector\\chartdir.h	/^	Mark *addMark(double value, int lineColor, const char *text = 0,$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:Mark *
addMassIndex	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addMassIndex(int height, int color, int upColor, int downColor)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addMedianPrice	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addMedianPrice(int color)$/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addMomentum	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addMomentum(int height, int period, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addNVI	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addNVI(int height, int period, int color, int signalColor)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addOBV	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addOBV(int height, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addOHLCLabel	.\\ChartDirector\\FinanceChart.h	/^    private: void addOHLCLabel(int upColor, int downColor, bool candleStickMode)$/;"	f	class:FinanceChart	typeref:typename:void
addPPO	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addPPO(int height, int period1, int period2, int period3, int color,$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addPVI	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addPVI(int height, int period, int color, int signalColor)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addPVO	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addPVO(int height, int period1, int period2, int period3, int color,$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addPVT	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addPVT(int height, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addParabolicSAR	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addParabolicSAR(double accInitial, double accIncrement, double accMaximum/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addPerformance	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addPerformance(int height, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addPlotAreaTitle	.\\ChartDirector\\FinanceChart.h	/^    public: TextBox* addPlotAreaTitle(int alignment, const char* text)$/;"	f	class:FinanceChart	typeref:typename:TextBox *
addPointer	.\\ChartDirector\\chartdir.h	/^	MeterPointer *addPointer(double value, int fillColor = Chart::LineColor, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:MeterPointer *
addPointer2	.\\ChartDirector\\chartdir.h	/^	MeterPointer *addPointer2(double value, int fillColor, int edgeColor = -1, int pointerType = Ch/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:MeterPointer *
addPredictionBand	.\\ChartDirector\\chartdir.h	/^	void addPredictionBand(double confidence, int upperFillColor, int upperEdgeColor = Chart::Trans/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:void
addROC	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addROC(int height, int period, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addRSI	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addRSI(int height, int period, int color, double range, int upColor,$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addRing	.\\ChartDirector\\chartdir.h	/^	void addRing(int startRadius, int endRadius, int fillColor, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:void
addRingSector	.\\ChartDirector\\chartdir.h	/^	void addRingSector(int startRadius, int endRadius, double a1, double a2, int fillColor, int edg/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:void
addScaleBackground	.\\ChartDirector\\chartdir.h	/^    void addScaleBackground(int bgRadius, int fillColor, int edgeWidth = 0, int edgeColor = -1, /;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:void
addScatterGroup	.\\ChartDirector\\chartdir.h	/^	ThreeDScatterGroup *addScatterGroup(DoubleArray xData, DoubleArray yData, DoubleArray zData, co/;"	f	class:CD_NAMESPACE::ThreeDScatterChart	typeref:typename:ThreeDScatterGroup *
addScatterLayer	.\\ChartDirector\\chartdir.h	/^	ScatterLayer *addScatterLayer(DoubleArray xData, DoubleArray yData, const char *name = 0,$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:ScatterLayer *
addSimpleMovingAvg	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addSimpleMovingAvg(int period, int color)$/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addSlowStochastic	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addSlowStochastic(int height, int period1, int period2, int color1, int col/;"	f	class:FinanceChart	typeref:typename:XYChart *
addSplineAreaLayer	.\\ChartDirector\\chartdir.h	/^	PolarSplineAreaLayer *addSplineAreaLayer(DoubleArray data, int color = -1, const char *name = 0/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:PolarSplineAreaLayer *
addSplineLayer	.\\ChartDirector\\chartdir.h	/^	SplineLayer *addSplineLayer(DoubleArray data = DoubleArray(), int color = -1, const char *name /;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:SplineLayer *
addSplineLineLayer	.\\ChartDirector\\chartdir.h	/^	PolarSplineLineLayer *addSplineLineLayer(DoubleArray data, int color = -1, const char *name = 0/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:PolarSplineLineLayer *
addStdDev	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addStdDev(int height, int period, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addStepLineLayer	.\\ChartDirector\\chartdir.h	/^	StepLineLayer *addStepLineLayer(DoubleArray data = DoubleArray(), int color = -1, const char *n/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:StepLineLayer *
addStochRSI	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addStochRSI(int height, int period, int color, double range, int upColor,$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addTRIX	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addTRIX(int height, int period, int color)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addTable	.\\ChartDirector\\chartdir.h	/^	CDMLTable *addTable(int x, int y, int alignment, int col, int row)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:CDMLTable *
addText	.\\ChartDirector\\chartdir.h	/^	TextBox *addText(int x, int y, const char *text, const char *font = 0, double fontSize = 8,$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:TextBox *
addThreshold	.\\ChartDirector\\FinanceChart.h	/^    public: void addThreshold(XYChart* c, LineLayer* layer, double topRange, int topColor,$/;"	f	class:FinanceChart	typeref:typename:void
addTitle	.\\ChartDirector\\chartdir.h	/^	TextBox *addTitle(const char *text, const char *font = 0, double fontSize = 12,$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:TextBox *
addTitle	.\\ChartDirector\\chartdir.h	/^	TextBox *addTitle(int alignment, const char *text, const char *font = 0, double fontSize = 12,$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:TextBox *
addTrendLayer	.\\ChartDirector\\chartdir.h	/^	TrendLayer *addTrendLayer(DoubleArray data, int color = -1, const char *name = 0, int depth = 0/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:TrendLayer *
addTrendLayer	.\\ChartDirector\\chartdir.h	/^	TrendLayer *addTrendLayer(DoubleArray xData, DoubleArray yData, int color = -1, const char *nam/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:TrendLayer *
addTriMovingAvg	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addTriMovingAvg(int period, int color)$/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addTypicalPrice	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addTypicalPrice(int color)$/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addUltimateOscillator	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addUltimateOscillator(int height, int period1, int period2, int period3,$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addVectorLayer	.\\ChartDirector\\chartdir.h	/^	PolarVectorLayer *addVectorLayer(DoubleArray rData, DoubleArray aData, DoubleArray lengths,$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:PolarVectorLayer *
addVectorLayer	.\\ChartDirector\\chartdir.h	/^	VectorLayer *addVectorLayer(DoubleArray xData, DoubleArray yData, DoubleArray lengths, DoubleAr/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:VectorLayer *
addVolBars	.\\ChartDirector\\FinanceChart.h	/^    public: BarLayer* addVolBars(int height, int upColor, int downColor, int flatColor)$/;"	f	class:FinanceChart	typeref:typename:BarLayer *
addVolBars2	.\\ChartDirector\\FinanceChart.h	/^    private: BarLayer* addVolBars2(XYChart* c, int height, int upColor, int downColor, int flatC/;"	f	class:FinanceChart	typeref:typename:BarLayer *
addVolIndicator	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addVolIndicator(int height, int upColor, int downColor, int flatColor)$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addWeightedClose	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addWeightedClose(int color)$/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addWeightedMovingAvg	.\\ChartDirector\\FinanceChart.h	/^    public: LineLayer* addWeightedMovingAvg(int period, int color)$/;"	f	class:FinanceChart	typeref:typename:LineLayer *
addWilliamR	.\\ChartDirector\\FinanceChart.h	/^    public: XYChart* addWilliamR(int height, int period, int color, double range, int upColor,$/;"	f	class:FinanceChart	typeref:typename:XYChart *
addZone	.\\ChartDirector\\chartdir.h	/^	TextBox *addZone(double startValue, double endValue, int color, const char *label = 0)$/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:TextBox *
addZone	.\\ChartDirector\\chartdir.h	/^	void addZone(double startValue, double endValue, double startRadius, double endRadius, $/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:void
addZone	.\\ChartDirector\\chartdir.h	/^	void addZone(double startValue, double endValue, int color)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
addZone	.\\ChartDirector\\chartdir.h	/^	void addZone(double startValue, double endValue, int fillColor, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:void
addZone	.\\ChartDirector\\chartdir.h	/^	void addZone(double startValue, double endValue, int fillColor, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:void
addZone	.\\ChartDirector\\chartdir.h	/^	void addZone(double startValue, double endValue, int startRadius, int endRadius, int fillColor,/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:void
adjustBrightness	.\\ChartDirector\\chartdir.h	/^	int adjustBrightness(int c, double brightness) { return CBaseChart_adjustBrightness(ptr, c, bri/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
adjustBrightness	.\\ChartDirector\\chartdir.h	/^	int adjustBrightness(int c, double brightness) { return CDrawArea_adjustBrightness(ptr, c, brig/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
affineTransform	.\\ChartDirector\\chartdir.h	/^	void affineTransform(double a, double b, double c, double d, double e, double f,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
aggregate	.\\ChartDirector\\chartdir.h	/^	DoubleArray aggregate(DoubleArray srcArray, int aggregateMethod, double param = 50) const$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:DoubleArray
alignLayer	.\\ChartDirector\\chartdir.h	/^	void alignLayer(const Layer *layer, int dataSet) { CLayer_alignLayer(ptr, layer->getInternalPtr/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
angularAxis	.\\ChartDirector\\chartdir.h	/^	AngularAxis *angularAxis() { AngularAxis *ret = new AngularAxis(CPolarChart_angularAxis(ptr)); /;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:AngularAxis *
appendCol	.\\ChartDirector\\chartdir.h	/^	TextBox *appendCol() { return makeTextBox(CCDMLTable_appendCol(ptr)); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
appendRow	.\\ChartDirector\\chartdir.h	/^	TextBox *appendRow() { return makeTextBox(CCDMLTable_appendRow(ptr)); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
applyAutoHide	.\\ChartViewer.cpp	/^void CChartViewer::applyAutoHide(int msg)$/;"	f	class:CChartViewer	typeref:typename:void
arc	.\\ChartDirector\\chartdir.h	/^	void arc(int cx, int cy, int rx, int ry, double a1, double a2, int c)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
avg	.\\ChartDirector\\chartdir.h	/^	double avg() const { return CArrayMath_avg(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:double
axisCache	.\\ChartDirector\\chartdir.h	/^	Axis **axisCache;$/;"	m	class:CD_NAMESPACE::XYChart	typeref:typename:Axis **
axisCacheCount	.\\ChartDirector\\chartdir.h	/^	int axisCacheCount;$/;"	m	class:CD_NAMESPACE::XYChart	typeref:typename:int
bSearch	.\\ChartDirector\\chartdir.h	/^	static inline double bSearch(DoubleArray a, double v)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:double
barLighting	.\\ChartDirector\\chartdir.h	/^	static inline int barLighting(double startBrightness = 0.75, double endBrightness = 1.5)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
blueMetalGradient	.\\ChartDirector\\chartdir.h	/^	static const int blueMetalGradient[] = {0, 0x9898E0, 0x60, 0xF0F0FF, 0xB0, 0xD8D8F0, 0x100, 0x9/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const int[]
blueMetalGradient	.\\ChartDirector\\chartdir.h	/^static const int * const blueMetalGradient = Chart::blueMetalGradient;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const int * const
bmpToHBITMAP	.\\ChartViewer.cpp	/^HBITMAP CStaticHelper::bmpToHBITMAP(CStatic *self, const char *data)$/;"	f	class:CStaticHelper	typeref:typename:HBITMAP
brushedGoldColor	.\\ChartDirector\\chartdir.h	/^	static inline int brushedGoldColor(int texture = 2, int angle = 90)  {return brushedMetalColor(/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
brushedMetalColor	.\\ChartDirector\\chartdir.h	/^	static inline int brushedMetalColor(int c, int texture = 2, int angle = 90) { return metalColor/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
brushedSilverColor	.\\ChartDirector\\chartdir.h	/^	static inline int brushedSilverColor(int texture = 2, int angle = 90) {return brushedMetalColor/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
canZoomIn	.\\ChartDirector\\chartdir.h	/^	bool canZoomIn(int zoomDirection) { return CViewPortManager_canZoomIn(ptr, zoomDirection); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
canZoomOut	.\\ChartDirector\\chartdir.h	/^	bool canZoomOut(int zoomDirection) { return CViewPortManager_canZoomOut(ptr, zoomDirection); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
cb	.\\Globals.cpp	/^   DWORD cb;$/;"	m	struct:__anon1ad2ae240108	typeref:typename:DWORD	file:
chartCount	.\\ChartDirector\\chartdir.h	/^	int chartCount;$/;"	m	class:CD_NAMESPACE::MultiChart	typeref:typename:int
chartTime	.\\ChartDirector\\chartdir.h	/^	static inline double chartTime(int y, int m, int d, int h = 0, int n = 0, int s = 0)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:double
chartTime	.\\ChartDirector\\chartdir.h	/^static inline double chartTime(int y, int m, int d, int h = 0, int n = 0, int s = 0)$/;"	f	namespace:CD_NAMESPACE	typeref:typename:double
chartTime2	.\\ChartDirector\\chartdir.h	/^	static inline double chartTime2(int t) { return CChart_chartTime2(t); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:double
chartTime2	.\\ChartDirector\\chartdir.h	/^static inline double chartTime2(int t)$/;"	f	namespace:CD_NAMESPACE	typeref:typename:double
charts	.\\ChartDirector\\chartdir.h	/^	BaseChart **charts;$/;"	m	class:CD_NAMESPACE::MultiChart	typeref:typename:BaseChart **
circle	.\\ChartDirector\\chartdir.h	/^	void circle(int cx, int cy, int rx, int ry, int edgeColor, int fillColor)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
clearAllRanges	.\\ChartDirector\\chartdir.h	/^    void clearAllRanges()$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
clone	.\\ChartDirector\\chartdir.h	/^	void clone(DrawArea *d, int x, int y, int align, int newWidth = -1, int newHeight = -1,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
close	.\\ChartDirector\\chartdir.h	/^	void close(TTFText *_text) { delete _text; }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
col	.\\gridctrl_src\\CellRange.h	/^    int row, col;$/;"	m	class:CCellID	typeref:typename:int
col	.\\gridctrl_src\\GridCtrl.h	/^    int      row,col;     \/\/ Row and Column of item$/;"	m	struct:_GV_ITEM	typeref:typename:int
colorAxis	.\\ChartDirector\\chartdir.h	/^	ColorAxis *colorAxis()$/;"	f	class:CD_NAMESPACE::ContourLayer	typeref:typename:ColorAxis *
colorAxis	.\\ChartDirector\\chartdir.h	/^	ColorAxis *colorAxis()$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:ColorAxis *
commitMouseMove	.\\ChartViewer.cpp	/^void CChartViewer::commitMouseMove(UINT nFlags, CPoint point)$/;"	f	class:CChartViewer	typeref:typename:void
commitPendingSyncAxis	.\\ChartDirector\\chartdir.h	/^    void commitPendingSyncAxis(BaseChart *c)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
commitUpdateChart	.\\ChartViewer.cpp	/^void CChartViewer::commitUpdateChart()$/;"	f	class:CChartViewer	typeref:typename:void
computeAroonDn	.\\ChartDirector\\FinanceChart.h	/^    private: ArrayMath computeAroonDn(int period)$/;"	f	class:FinanceChart	typeref:typename:ArrayMath
computeAroonUp	.\\ChartDirector\\FinanceChart.h	/^    private: ArrayMath computeAroonUp(int period)$/;"	f	class:FinanceChart	typeref:typename:ArrayMath
computeRSI	.\\ChartDirector\\FinanceChart.h	/^    private: ArrayMath computeRSI(int period)$/;"	f	class:FinanceChart	typeref:typename:ArrayMath
computeTriMovingAvg	.\\ChartDirector\\FinanceChart.h	/^    private: ArrayMath computeTriMovingAvg(DoubleArray data, int period)$/;"	f	class:FinanceChart	typeref:typename:ArrayMath
computeTrueLow	.\\ChartDirector\\FinanceChart.h	/^    private: ArrayMath computeTrueLow()$/;"	f	class:FinanceChart	typeref:typename:ArrayMath
computeTrueRange	.\\ChartDirector\\FinanceChart.h	/^    private: ArrayMath computeTrueRange()$/;"	f	class:FinanceChart	typeref:typename:ArrayMath
computeWeightedMovingAvg	.\\ChartDirector\\FinanceChart.h	/^    private: ArrayMath computeWeightedMovingAvg(DoubleArray data, int period)$/;"	f	class:FinanceChart	typeref:typename:ArrayMath
configureYAxis	.\\ChartDirector\\FinanceChart.h	/^    private: void configureYAxis(Axis* a, int height)$/;"	f	class:FinanceChart	typeref:typename:void
copyAxis	.\\ChartDirector\\chartdir.h	/^	void copyAxis(const Axis *axis)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
crBkClr	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF crBkClr;     \/\/ Background colour (or CLR_DEFAULT)$/;"	m	class:CGridCell	typeref:typename:COLORREF
crBkClr	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF crBkClr;     \/\/ Background colour (or CLR_DEFAULT)$/;"	m	struct:_GV_ITEM	typeref:typename:COLORREF
crFgClr	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF crFgClr;     \/\/ Forground colour (or CLR_DEFAULT)$/;"	m	class:CGridCell	typeref:typename:COLORREF
crFgClr	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF crFgClr;     \/\/ Forground colour (or CLR_DEFAULT)$/;"	m	struct:_GV_ITEM	typeref:typename:COLORREF
create	.\\ChartDirector\\chartdir.h	/^	static ArrayMath *create(DoubleArray a) { return new ArrayMath(a); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath *
create	.\\ChartDirector\\chartdir.h	/^	static DrawArea* create() { return new DrawArea(); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:DrawArea *
create	.\\ChartDirector\\chartdir.h	/^	static MultiChart *create(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::MultiChart	typeref:typename:MultiChart *
create	.\\ChartDirector\\chartdir.h	/^	static PieChart *create(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:PieChart *
create	.\\ChartDirector\\chartdir.h	/^	static PolarChart *create(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:PolarChart *
create	.\\ChartDirector\\chartdir.h	/^	static RanSeries *create(int seed) { return new RanSeries(seed); }$/;"	f	class:CD_NAMESPACE::RanSeries	typeref:typename:RanSeries *
create	.\\ChartDirector\\chartdir.h	/^	static RanTable *create(int seed, int noOfCols, int noOfRows) { return new RanTable(seed, noOfC/;"	f	class:CD_NAMESPACE::RanTable	typeref:typename:RanTable *
create	.\\ChartDirector\\chartdir.h	/^	static XYChart *create(int width, int height, int bgColor = Chart::BackgroundColor,$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:XYChart *
cylinder	.\\ChartDirector\\chartdir.h	/^	void cylinder(int cx, int cy, int rx, int ry, double a1, double a2,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
cylinderEffect	.\\ChartDirector\\chartdir.h	/^	static inline int cylinderEffect(int orientation = Chart::Center, double ambientIntensity = 0.5/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
dAdI	.\\System.h	/^	double	dAdI;		\/\/ Col27, Col33, Col39, ... Col81$/;"	m	struct:sMEAS_DATA	typeref:typename:double
dAdVc	.\\System.h	/^	double	dAdVc;		\/\/ Col26, Col32, Col38, ... Col80$/;"	m	struct:sMEAS_DATA	typeref:typename:double
dI	.\\System.h	/^	double	dI;			\/\/ Col25, Col31, Col37, ... Col79$/;"	m	struct:sMEAS_DATA	typeref:typename:double
dMeasAdI_Avg	.\\System.h	/^	double 	dMeasAdI_Avg;		\/\/ Col19$/;"	m	struct:sCAL_DATA	typeref:typename:double
dMeasAdVc_Avg	.\\System.h	/^	double 	dMeasAdVc_Avg;		\/\/ Col18$/;"	m	struct:sCAL_DATA	typeref:typename:double
dMeasI_Avg	.\\System.h	/^	double 	dMeasI_Avg;			\/\/ Col17$/;"	m	struct:sCAL_DATA	typeref:typename:double
dMeasR_Avg	.\\System.h	/^	double 	dMeasR_Avg;			\/\/ Col12$/;"	m	struct:sCAL_DATA	typeref:typename:double
dMeasR_Max	.\\System.h	/^	double 	dMeasR_Max;			\/\/ Col20$/;"	m	struct:sCAL_DATA	typeref:typename:double
dMeasR_MaxDiffRate	.\\System.h	/^	double 	dMeasR_MaxDiffRate;	\/\/ Col13	\/\/ (Max - Avg)\/Avg : + ¿ÀÂ÷À²  .ÃßÈÄ +5%º¸´Ù Å©¸é ºÓÀ/;"	m	struct:sCAL_DATA	typeref:typename:double
dMeasR_Min	.\\System.h	/^	double 	dMeasR_Min;			\/\/ Col21$/;"	m	struct:sCAL_DATA	typeref:typename:double
dMeasR_MinDiffRate	.\\System.h	/^	double 	dMeasR_MinDiffRate; \/\/ Col14	\/\/ (Min - Avg)\/Avg : - ¿ÀÂ÷À²  .ÃßÈÄ -5%º¸´Ù ÀÛÀ¸¸é º/;"	m	struct:sCAL_DATA	typeref:typename:double
dMeasVc_Avg	.\\System.h	/^	double 	dMeasVc_Avg;		\/\/ Col16$/;"	m	struct:sCAL_DATA	typeref:typename:double
dOrgR	.\\System.h	/^	double 	dOrgR;				\/\/ Col7		\/\/  Original R Value   (Real H\/W) . sRJIG_DATA ÀÇ dOrgR°ú °°Àº /;"	m	struct:sCAL_DATA	typeref:typename:double
dR	.\\System.h	/^	double	dR;			\/\/ Col23, Col29, Col35, ... Col77$/;"	m	struct:sMEAS_DATA	typeref:typename:double
dRefIVal	.\\System.h	/^	double 	dRefIVal;			\/\/ Col10	\/\/ ÃßÈÄ ÇÊ¿ä¾ø´Ù¸é Áö¿î´Ù.$/;"	m	struct:sCAL_DATA	typeref:typename:double
dRefR_Avg	.\\System.h	/^	double 	dRefR_Avg;			\/\/ Col8$/;"	m	struct:sCAL_DATA	typeref:typename:double
dRefVcVal	.\\System.h	/^	double 	dRefVcVal;			\/\/ Col9		\/\/ ÃßÈÄ ÇÊ¿ä¾ø´Ù¸é Áö¿î´Ù.$/;"	m	struct:sCAL_DATA	typeref:typename:double
dVc	.\\System.h	/^	double	dVc;		\/\/ Col24, Col30, Col36, ... Col78$/;"	m	struct:sMEAS_DATA	typeref:typename:double
dashLineColor	.\\ChartDirector\\chartdir.h	/^	int dashLineColor(int color, int patternCode = Chart::DashLine)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
dashLineColor	.\\ChartDirector\\chartdir.h	/^	int dashLineColor(int color, int patternCode = Chart::DashLine)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
data	.\\memblock.h	/^	const char * const *data;$/;"	m	class:StringArray	typeref:typename:const char * const *
data	.\\memblock.h	/^	const char *data;$/;"	m	class:MemBlock	typeref:typename:const char *
data	.\\memblock.h	/^	const double *data;$/;"	m	class:DoubleArray	typeref:typename:const double *
data	.\\memblock.h	/^	const int *data;$/;"	m	class:IntArray	typeref:typename:const int *
dataSetCache	.\\ChartDirector\\chartdir.h	/^	DataSet **dataSetCache;$/;"	m	class:CD_NAMESPACE::Layer	typeref:typename:DataSet **
dataSetCacheCount	.\\ChartDirector\\chartdir.h	/^	int dataSetCacheCount;$/;"	m	class:CD_NAMESPACE::Layer	typeref:typename:int
deepCopy	.\\ChartDirector\\FinanceChart.h	/^    private: void deepCopy(DoubleArray &dest, DoubleArray src)$/;"	f	class:FinanceChart	typeref:typename:void
defaultPalette	.\\ChartDirector\\chartdir.h	/^	static const int defaultPalette[] =$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const int[]
defaultPalette	.\\ChartDirector\\chartdir.h	/^static const int * const defaultPalette = Chart::defaultPalette;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const int * const
delta	.\\ChartDirector\\chartdir.h	/^	ArrayMath& delta(int offset = 1) { CArrayMath_delta(ptr, offset); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
destroy	.\\ChartDirector\\chartdir.h	/^	static void destroy(TTFText *t) { t->destroy(); }$/;"	f	class:CD_NAMESPACE::TTFText	typeref:typename:void
destroy	.\\ChartDirector\\chartdir.h	/^	void destroy() { delete this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:void
destroy	.\\ChartDirector\\chartdir.h	/^	void destroy() { delete this; }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
destroy	.\\ChartDirector\\chartdir.h	/^	void destroy() { delete this; }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
destroy	.\\ChartDirector\\chartdir.h	/^	void destroy() { delete this; }$/;"	f	class:CD_NAMESPACE::DrawObj	typeref:typename:void
destroy	.\\ChartDirector\\chartdir.h	/^	void destroy() { delete this; }$/;"	f	class:CD_NAMESPACE::RanSeries	typeref:typename:void
destroy	.\\ChartDirector\\chartdir.h	/^	void destroy() { delete this; }$/;"	f	class:CD_NAMESPACE::RanTable	typeref:typename:void
destroy	.\\ChartDirector\\chartdir.h	/^	void destroy() { delete this; }$/;"	f	class:CD_NAMESPACE::TTFText	typeref:typename:void
displayChart	.\\ChartViewer.cpp	/^void CStaticHelper::displayChart(CStatic *self, BaseChart *c)$/;"	f	class:CStaticHelper	typeref:typename:void
div	.\\ChartDirector\\chartdir.h	/^	ArrayMath& div(DoubleArray b) { CArrayMath_div(ptr, b.data, b.len); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
div	.\\ChartDirector\\chartdir.h	/^	ArrayMath& div(double b) { CArrayMath_div2(ptr, b); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
dragTo	.\\ChartDirector\\chartdir.h	/^	bool dragTo(int scrollDirection, int deltaX, int deltaY) $/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
draw	.\\ChartDirector\\chartdir.h	/^	void draw(int x, int y, int color, int alignment = Chart::TopLeft) const$/;"	f	class:CD_NAMESPACE::TTFText	typeref:typename:void
drawAreaCache	.\\ChartDirector\\chartdir.h	/^	DrawArea *drawAreaCache;$/;"	m	class:CD_NAMESPACE::BaseChart	typeref:typename:DrawArea *
drawRect	.\\ChartViewer.cpp	/^void CChartViewer::drawRect(int	x, int y, int width, int height)$/;"	f	class:CChartViewer	typeref:typename:void
dummyFreeCursorObj	.\\ChartViewer.cpp	/^} dummyFreeCursorObj;$/;"	v	typeref:class:FreeCursors
eMouseModes	.\\gridctrl_src\\GridCtrl.h	/^    enum eMouseModes { MOUSE_NOTHING, MOUSE_SELECT_ALL, MOUSE_SELECT_COL, MOUSE_SELECT_ROW,$/;"	g	class:CGridCtrl
enableAntiAlias	.\\ChartDirector\\FinanceChart.h	/^    public: void enableAntiAlias(bool antiAlias)$/;"	f	class:FinanceChart	typeref:typename:void
enableVectorOutput	.\\ChartDirector\\chartdir.h	/^	void enableVectorOutput() { CBaseChart_enableVectorOutput(ptr); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
enableVectorOutput	.\\ChartDirector\\chartdir.h	/^	void enableVectorOutput() { CDrawArea_enableVectorOutput(ptr); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
error_no	.\\Error.h	/^    int error_no;$/;"	m	struct:__anon99cd842f0108	typeref:typename:int
expAvg	.\\ChartDirector\\chartdir.h	/^	ArrayMath& expAvg(double smoothingFactor)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
fill	.\\ChartDirector\\chartdir.h	/^	void fill(int x, int y, int color) { CDrawArea_fill(ptr, x, y, color); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
fill	.\\ChartDirector\\chartdir.h	/^	void fill(int x, int y, int color, int borderColor) { CDrawArea_fill2(ptr, x, y, color, borderC/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
financeDiv	.\\ChartDirector\\chartdir.h	/^	ArrayMath& financeDiv(DoubleArray b, double zeroByZeroValue) { CArrayMath_financeDiv(ptr, b.dat/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
firstCloseValue	.\\ChartDirector\\FinanceChart.h	/^    private: double firstCloseValue()$/;"	f	class:FinanceChart	typeref:typename:double
flatBorder	.\\ChartDirector\\chartdir.h	/^	static inline int flatBorder(int thickness)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
formatIndicatorLabel	.\\ChartDirector\\FinanceChart.h	/^    private: std::string formatIndicatorLabel(const char* name, DoubleArray data)$/;"	f	class:FinanceChart	typeref:typename:std::string
formatValue	.\\ChartDirector\\chartdir.h	/^	const char *formatValue(double value, const char *formatString)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:const char *
g_MeasInfoTable	.\\GageDialog.h	/^static sMeasInfo	g_MeasInfoTable[] = {$/;"	v	typeref:typename:sMeasInfo[]
g_cs	.\\Globals.cpp	/^static CCriticalSection g_cs;		$/;"	v	typeref:typename:CCriticalSection	file:
g_sFile	.\\Globals.cpp	/^sFILE_DATA		g_sFile;$/;"	v	typeref:typename:sFILE_DATA
g_sSystem	.\\System.cpp	/^CSystem g_sSystem;$/;"	v	typeref:typename:CSystem
g_wPrintState	.\\Globals.cpp	/^WORD			g_wPrintState = 0x0001;		\/\/ PRT_BASIC    on $/;"	v	typeref:typename:WORD
garbage	.\\ChartDirector\\FinanceChart.h	/^    std::vector<XYChart *> garbage;$/;"	m	class:FinanceChart	typeref:typename:std::vector<XYChart * >
get2DSeries	.\\ChartDirector\\chartdir.h	/^	DoubleArray get2DSeries(int xLen, int yLen, double minValue, double maxValue)$/;"	f	class:CD_NAMESPACE::RanSeries	typeref:typename:DoubleArray
getARGBColor	.\\ChartDirector\\chartdir.h	/^	int getARGBColor(int c) { return CDrawArea_getARGBColor(ptr, c); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
getAbsOffsetX	.\\ChartDirector\\chartdir.h	/^	int getAbsOffsetX() const$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
getAbsOffsetY	.\\ChartDirector\\chartdir.h	/^	int getAbsOffsetY() const$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
getAlignment	.\\ChartDirector\\chartdir.h	/^	int getAlignment() { return CAxis_getAlignment(ptr); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:int
getAxisImageMap	.\\ChartDirector\\chartdir.h	/^	const char *getAxisImageMap(int noOfSegments, int mapWidth, const char *url, const char *queryF/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:const char *
getAxisImageMap	.\\ChartDirector\\chartdir.h	/^	const char *getAxisImageMap(int noOfSegments, int mapWidth, const char *url, const char *queryF/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:const char *
getBootLog	.\\ChartDirector\\chartdir.h	/^	static inline void getBootLog(char *buffer) { CChart_getBootLog(buffer); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:void
getBottomY	.\\ChartDirector\\chartdir.h	/^	int getBottomY() const { return CPlotArea_getBottomY(ptr); }$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:int
getBottomY	.\\ChartDirector\\chartdir.h	/^    int getBottomY() const$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:int
getBoxHeight	.\\ChartDirector\\chartdir.h	/^	int getBoxHeight() const { return CColorAxis_getBoxHeight(ptr); }$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:int
getBoxWidth	.\\ChartDirector\\chartdir.h	/^	int getBoxWidth() const { return CColorAxis_getBoxWidth(ptr); }$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:int
getCell	.\\ChartDirector\\chartdir.h	/^	TextBox *getCell(int col, int row)$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
getChart	.\\ChartDirector\\chartdir.h	/^	BaseChart *getChart(int i = 0) {$/;"	f	class:CD_NAMESPACE::MultiChart	typeref:typename:BaseChart *
getChart	.\\ChartViewer.cpp	/^BaseChart *CChartViewer::getChart()$/;"	f	class:CChartViewer	typeref:typename:BaseChart *
getChart	.\\ChartViewer.cpp	/^BaseChart *CViewPortControl::getChart()$/;"	f	class:CViewPortControl	typeref:typename:BaseChart *
getChartCount	.\\ChartDirector\\chartdir.h	/^	int getChartCount() {$/;"	f	class:CD_NAMESPACE::MultiChart	typeref:typename:int
getChartMetrics	.\\ChartDirector\\chartdir.h	/^	const char *getChartMetrics() { return CBaseChart_getChartMetrics(ptr); }	$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:const char *
getChartMouseX	.\\ChartViewer.cpp	/^int CChartViewer::getChartMouseX()$/;"	f	class:CChartViewer	typeref:typename:int
getChartMouseY	.\\ChartViewer.cpp	/^int CChartViewer::getChartMouseY()$/;"	f	class:CChartViewer	typeref:typename:int
getChartWeekDay	.\\ChartDirector\\chartdir.h	/^	static inline int getChartWeekDay(double t) { return ((int)(t \/ 86400 + 1)) % 7; }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
getChartYMD	.\\ChartDirector\\chartdir.h	/^	static inline int getChartYMD(double t) { return CChart_getChartYMD(t); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
getClickToCenter	.\\ChartDirector\\chartdir.h	/^    bool getClickToCenter() { return getProperty(VPC_ClickToCenter) != 0; }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:bool
getCloseData	.\\ChartDirector\\chartdir.h	/^	DoubleArray getCloseData()$/;"	f	class:CD_NAMESPACE::FinanceSimulator	typeref:typename:DoubleArray
getCoefficient	.\\ChartDirector\\chartdir.h	/^	double getCoefficient(int i) { return CTrendLayer_getCoefficient(ptr, i); }$/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:double
getCol	.\\ChartDirector\\chartdir.h	/^	DoubleArray getCol(int i)$/;"	f	class:CD_NAMESPACE::RanTable	typeref:typename:DoubleArray
getColCount	.\\ChartDirector\\chartdir.h	/^	int getColCount() const { return CCDMLTable_getColCount(ptr); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:int
getColStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *getColStyle(int col) { return makeTextBox(CCDMLTable_getColStyle(ptr, col)); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
getColWidth	.\\ChartDirector\\chartdir.h	/^	int getColWidth(int col) const { return CCDMLTable_getColWidth(ptr, col); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:int
getColor	.\\ChartDirector\\chartdir.h	/^	int getColor(double z) const { return CColorAxis_getColor(ptr, z); }$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:int
getColor	.\\ChartDirector\\chartdir.h	/^	int getColor(int paletteEntry) { return CBaseChart_getColor(ptr, paletteEntry); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
getCoor	.\\ChartDirector\\chartdir.h	/^	int getCoor(double v) const { return CAxis_getCoor(ptr, v); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:int
getCoor	.\\ChartDirector\\chartdir.h	/^	int getCoor(double v) const { return CBaseMeter_getCoor(ptr, v); }$/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:int
getCopyright	.\\ChartDirector\\chartdir.h	/^	static inline const char *getCopyright() { return CChart_getCopyright(); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:const char *
getCopyright	.\\ChartDirector\\chartdir.h	/^static inline const char * getCopyright() { return Chart::getCopyright(); }$/;"	f	namespace:CD_NAMESPACE	typeref:typename:const char *
getCorrelation	.\\ChartDirector\\chartdir.h	/^	double getCorrelation() { return CTrendLayer_getCorrelation(ptr); }$/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:double
getCursor	.\\ChartDirector\\chartdir.h	/^	int getCursor()	{ return getProperty(VPC_MouseCursor); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:int
getDataColor	.\\ChartDirector\\chartdir.h	/^	int getDataColor() $/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:int
getDataName	.\\ChartDirector\\chartdir.h	/^	const char *getDataName() $/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:const char *
getDataSet	.\\ChartDirector\\chartdir.h	/^	DataSet *getDataSet(int i)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:DataSet *
getDataSetByZ	.\\ChartDirector\\chartdir.h	/^	DataSet *getDataSetByZ(int i)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:DataSet *
getDataSetCount	.\\ChartDirector\\chartdir.h	/^	int getDataSetCount() $/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:int
getDateSeries	.\\ChartDirector\\chartdir.h	/^	DoubleArray getDateSeries(int len, double startTime, double tickInc, bool weekDayOnly = false) $/;"	f	class:CD_NAMESPACE::RanSeries	typeref:typename:DoubleArray
getDescription	.\\ChartDirector\\chartdir.h	/^	static inline const char *getDescription() { return CChart_getDescription(); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:const char *
getDescription	.\\ChartDirector\\chartdir.h	/^static inline const char * getDescription() { return Chart::getDescription(); }$/;"	f	namespace:CD_NAMESPACE	typeref:typename:const char *
getDragBorderToResize	.\\ChartDirector\\chartdir.h	/^    bool getDragBorderToResize() { return getProperty(VPC_DragBorderToResize) != 0; }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:bool
getDragInsideToMove	.\\ChartDirector\\chartdir.h	/^	bool getDragInsideToMove() { return getProperty(VPC_DragInsideToMove) != 0; }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:bool
getDragOutsideToSelect	.\\ChartDirector\\chartdir.h	/^    bool getDragOutsideToSelect() { return getProperty(VPC_DragOutsideToSelect) != 0; }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:bool
getDrawArea	.\\ChartDirector\\chartdir.h	/^	DrawArea *getDrawArea() { return regDrawArea(CBaseChart_getDrawArea(ptr)); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:DrawArea *
getFormattedLabel	.\\ChartDirector\\chartdir.h	/^	const char *getFormattedLabel(double v, const char *formatString = 0) $/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:const char *
getGaussianSeries	.\\ChartDirector\\chartdir.h	/^	DoubleArray getGaussianSeries(int len, double mean, double stdDev)$/;"	f	class:CD_NAMESPACE::RanSeries	typeref:typename:DoubleArray
getHCursor	.\\ChartViewer.cpp	/^HCURSOR CViewPortControl::getHCursor(int position)$/;"	f	class:CViewPortControl	typeref:typename:HCURSOR
getHLOCToolTipFormat	.\\ChartDirector\\FinanceChart.h	/^    private: std::string getHLOCToolTipFormat()$/;"	f	class:FinanceChart	typeref:typename:std::string
getHTMLImageMap	.\\ChartDirector\\chartdir.h	/^	const char *getHTMLImageMap(const char *url, const char *queryFormat = 0, const char *extraAttr/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:const char *
getHTMLImageMap	.\\ChartDirector\\chartdir.h	/^	const char *getHTMLImageMap(const char *url, const char *queryFormat = 0, const char *extraAttr/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:const char *
getHTMLImageMap	.\\ChartDirector\\chartdir.h	/^	const char *getHTMLImageMap(const char *url, const char *queryFormat = 0, const char *extraAttr/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:const char *
getHTMLImageMap	.\\ChartDirector\\chartdir.h	/^	const char *getHTMLImageMap(const char *url, const char *queryFormat = 0, const char *extraAttr/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:const char *
getHTMLImageMap	.\\ChartDirector\\chartdir.h	/^	const char *getHTMLImageMap(const char *url, const char *queryFormat = 0, const char *extraAttr/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:const char *
getHTMLImageMap	.\\ChartDirector\\chartdir.h	/^	const char *getHTMLImageMap(const char *url, const char *queryFormat = 0,$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:const char *
getHeight	.\\ChartDirector\\chartdir.h	/^	int getHeight() const { return CBaseChart_getHeight(ptr); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
getHeight	.\\ChartDirector\\chartdir.h	/^	int getHeight() const { return CBox_getHeight(ptr); }$/;"	f	class:CD_NAMESPACE::Box	typeref:typename:int
getHeight	.\\ChartDirector\\chartdir.h	/^	int getHeight() const { return CCDMLTable_getHeight(ptr); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:int
getHeight	.\\ChartDirector\\chartdir.h	/^	int getHeight() const { return CDrawArea_getHeight(ptr); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
getHeight	.\\ChartDirector\\chartdir.h	/^	int getHeight() const { return CPlotArea_getHeight(ptr); }$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:int
getHeight	.\\ChartDirector\\chartdir.h	/^	int getHeight() const { return CTTFText_getHeight(ptr); }$/;"	f	class:CD_NAMESPACE::TTFText	typeref:typename:int
getHeight	.\\ChartDirector\\chartdir.h	/^    int getHeight() const$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:int
getHighData	.\\ChartDirector\\chartdir.h	/^	DoubleArray getHighData()$/;"	f	class:CD_NAMESPACE::FinanceSimulator	typeref:typename:DoubleArray
getHotSpot	.\\ChartDirector\\chartdir.h	/^	int getHotSpot(int x, int y)$/;"	f	class:CD_NAMESPACE::ImageMapHandler	typeref:typename:int
getImageCoor	.\\ChartDirector\\chartdir.h	/^	const char *getImageCoor(int dataItem, int offsetX = 0, int offsetY = 0)$/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:const char *
getImageCoor	.\\ChartDirector\\chartdir.h	/^	const char *getImageCoor(int dataItem, int offsetX = 0, int offsetY = 0)$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:const char *
getImageCoor	.\\ChartDirector\\chartdir.h	/^	const char *getImageCoor(int dataSet, int dataItem = -0x7fffffff, int offsetX = 0, int offsetY /;"	f	class:CD_NAMESPACE::Layer	typeref:typename:const char *
getImageCoor	.\\ChartDirector\\chartdir.h	/^	const char *getImageCoor(int offsetX = 0, int offsetY = 0)$/;"	f	class:CD_NAMESPACE::Box	typeref:typename:const char *
getImageCoor	.\\ChartDirector\\chartdir.h	/^	const char *getImageCoor(int offsetX = 0, int offsetY = 0)$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:const char *
getImageCoor2	.\\ChartDirector\\chartdir.h	/^	const char *getImageCoor2(int dataItem, int offsetX = 0, int offsetY = 0)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:const char *
getImageMapHandler	.\\ChartViewer.cpp	/^ImageMapHandler	*CChartViewer::getImageMapHandler()$/;"	f	class:CChartViewer	typeref:typename:ImageMapHandler *
getIntercept	.\\ChartDirector\\chartdir.h	/^	double getIntercept() { return CTrendLayer_getIntercept(ptr); }$/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:double
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	AxisInternal *getInternalPtr() { return ptr; }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:AxisInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	BaseChartInternal *getInternalPtr() { return ptr; }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:BaseChartInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	DataSetInternal *getInternalPtr() { return ptr; }$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:DataSetInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	DrawAreaInternal *getInternalPtr() { return ptr; }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:DrawAreaInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	DrawObjInternal *getInternalPtr() { return ptr; }$/;"	f	class:CD_NAMESPACE::DrawObj	typeref:typename:DrawObjInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	LayerInternal *getInternalPtr() { return ptr; }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:LayerInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	PlotAreaInternal *getInternalPtr() { return ptr; }$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:PlotAreaInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	ViewPortManagerInternal *getInternalPtr() { return ptr; }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:ViewPortManagerInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	const AxisInternal *getInternalPtr() const { return ptr; }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:const AxisInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	const BaseChartInternal *getInternalPtr() const { return ptr; }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:const BaseChartInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	const DataSetInternal *getInternalPtr() const { return ptr; }$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:const DataSetInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	const DrawAreaInternal *getInternalPtr() const { return ptr; }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:const DrawAreaInternal *
getInternalPtr	.\\ChartDirector\\chartdir.h	/^	const LayerInternal *getInternalPtr() const { return ptr; }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:const LayerInternal *
getJsChartModel	.\\ChartDirector\\chartdir.h	/^	const char *getJsChartModel(const char *options = 0)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:const char *
getKey	.\\ChartDirector\\chartdir.h	/^	const char *getKey(int i)$/;"	f	class:CD_NAMESPACE::ImageMapHandler	typeref:typename:const char *
getLabel	.\\ChartDirector\\chartdir.h	/^	const char *getLabel() const$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:const char *
getLabel	.\\ChartDirector\\chartdir.h	/^	const char *getLabel(double i) const { return CAxis_getLabel(ptr, i); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:const char *
getLabel	.\\ChartDirector\\chartdir.h	/^	const char *getLabel(double i) const { return CBaseMeter_getLabel(ptr, i); }$/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:const char *
getLabelCoor	.\\ChartDirector\\chartdir.h	/^	const char *getLabelCoor(int offsetX = 0, int offsetY = 0)$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:const char *
getLabelTable	.\\ChartDirector\\chartdir.h	/^	CDMLTable *getLabelTable()$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:CDMLTable *
getLayer	.\\ChartDirector\\chartdir.h	/^	Layer *getLayer(int i) $/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:Layer *
getLayer	.\\ChartDirector\\chartdir.h	/^	PyramidLayer *getLayer(int layerNo)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:PyramidLayer *
getLayerByZ	.\\ChartDirector\\chartdir.h	/^	Layer *getLayerByZ(int i) $/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:Layer *
getLayerCount	.\\ChartDirector\\chartdir.h	/^	int getLayerCount() $/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:int
getLeftX	.\\ChartDirector\\chartdir.h	/^	int getLeftX() const { return CBox_getLeftX(ptr); }$/;"	f	class:CD_NAMESPACE::Box	typeref:typename:int
getLeftX	.\\ChartDirector\\chartdir.h	/^	int getLeftX() const { return CPlotArea_getLeftX(ptr); }$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:int
getLeftX	.\\ChartDirector\\chartdir.h	/^    int getLeftX() const$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:int
getLegend	.\\ChartDirector\\chartdir.h	/^	LegendBox *getLegend() { LegendBox *ret = new LegendBox(CBaseChart_getLegend(ptr)); reg(ret); r/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:LegendBox *
getLegendIcon	.\\ChartDirector\\chartdir.h	/^	const char *getLegendIcon() $/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:const char *
getLegendIcon	.\\ChartDirector\\chartdir.h	/^	const char *getLegendIcon(int dataSetNo) const $/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:const char *
getLevelPrototype	.\\ChartDirector\\chartdir.h	/^	TreeMapNode *getLevelPrototype(int i)$/;"	f	class:CD_NAMESPACE::TreeMapChart	typeref:typename:TreeMapNode *
getLicenseAttr	.\\ChartDirector\\chartdir.h	/^	static inline bool getLicenseAttr(const char *key, char *buffer) $/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:bool
getLicenseAttr	.\\ChartDirector\\chartdir.h	/^static inline bool getLicenseAttr(const char *key, char *buffer) $/;"	f	namespace:CD_NAMESPACE	typeref:typename:bool
getLine	.\\ChartDirector\\chartdir.h	/^	LineObj *getLine() { return (LineObj *)CMark_getLine(ptr); }$/;"	f	class:CD_NAMESPACE::Mark	typeref:typename:LineObj *
getLine	.\\ChartDirector\\chartdir.h	/^	LineObj *getLine() { return (LineObj *)CTrendLayer_getLine(ptr); }$/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:LineObj *
getLine	.\\ChartDirector\\chartdir.h	/^	LineObj *getLine(int dataSet = 0)$/;"	f	class:CD_NAMESPACE::LineLayer	typeref:typename:LineObj *
getLineDistance	.\\ChartDirector\\chartdir.h	/^	int getLineDistance() const { return CTTFText_getLineDistance(ptr); }$/;"	f	class:CD_NAMESPACE::TTFText	typeref:typename:int
getLineHeight	.\\ChartDirector\\chartdir.h	/^	int getLineHeight() const { return CTTFText_getLineHeight(ptr); }$/;"	f	class:CD_NAMESPACE::TTFText	typeref:typename:int
getLowData	.\\ChartDirector\\chartdir.h	/^	DoubleArray getLowData()$/;"	f	class:CD_NAMESPACE::FinanceSimulator	typeref:typename:DoubleArray
getMaxValue	.\\ChartDirector\\chartdir.h	/^	double getMaxValue() const { return CAxis_getMaxValue(ptr); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:double
getMeasData	.\\GageDialog.cpp	/^int CGageDialog::getMeasData(char *pStr, int strMax, double &rdMeasData) $/;"	f	class:CGageDialog	typeref:typename:int
getMeasDataLoc	.\\GageDialog.cpp	/^int CGageDialog::getMeasDataLoc(char *pStr, int strMax, int &rLoc) $/;"	f	class:CGageDialog	typeref:typename:int
getMeterBottomY	.\\ChartDirector\\chartdir.h	/^    int getMeterBottomY() { return getMeterTopY() + getMeterHeight(); }$/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:int
getMeterHeight	.\\ChartDirector\\chartdir.h	/^    int getMeterHeight() { return CLinearMeter_getMeterHeight(ptr); }$/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:int
getMeterLeftX	.\\ChartDirector\\chartdir.h	/^	int getMeterLeftX() { return CLinearMeter_getMeterLeftX(ptr); }$/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:int
getMeterRightX	.\\ChartDirector\\chartdir.h	/^    int getMeterRightX() { return getMeterLeftX() + getMeterWidth(); }$/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:int
getMeterTopY	.\\ChartDirector\\chartdir.h	/^    int getMeterTopY() { return CLinearMeter_getMeterTopY(ptr); }$/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:int
getMeterWidth	.\\ChartDirector\\chartdir.h	/^    int getMeterWidth() { return CLinearMeter_getMeterWidth(ptr); }$/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:int
getMinValue	.\\ChartDirector\\chartdir.h	/^	double getMinValue() const { return CAxis_getMinValue(ptr); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:double
getMinimumDrag	.\\ChartViewer.cpp	/^int	CChartViewer::getMinimumDrag()$/;"	f	class:CChartViewer	typeref:typename:int
getMouseUsage	.\\ChartViewer.cpp	/^int	CChartViewer::getMouseUsage()$/;"	f	class:CChartViewer	typeref:typename:int
getMouseWheelZoomRatio	.\\ChartViewer.cpp	/^double CChartViewer::getMouseWheelZoomRatio()$/;"	f	class:CChartViewer	typeref:typename:double
getNearestXValue	.\\ChartDirector\\chartdir.h	/^	double getNearestXValue(double target) $/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:double
getNearestXValue	.\\ChartDirector\\chartdir.h	/^	double getNearestXValue(double xCoor) $/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:double
getNoMove2DCursor	.\\ChartViewer.cpp	/^static HCURSOR getNoMove2DCursor()$/;"	f	typeref:typename:HCURSOR	file:
getNoMoveHorizCursor	.\\ChartViewer.cpp	/^static HCURSOR getNoMoveHorizCursor()$/;"	f	typeref:typename:HCURSOR	file:
getNoMoveVertCursor	.\\ChartViewer.cpp	/^static HCURSOR getNoMoveVertCursor()$/;"	f	typeref:typename:HCURSOR	file:
getNoZoomCursor	.\\ChartViewer.cpp	/^static HCURSOR getNoZoomCursor()$/;"	f	typeref:typename:HCURSOR	file:
getNode	.\\ChartDirector\\chartdir.h	/^	TreeMapNode *getNode(int i)$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:TreeMapNode *
getNodeCount	.\\ChartDirector\\chartdir.h	/^	int getNodeCount() const$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:int
getOpenData	.\\ChartDirector\\chartdir.h	/^	DoubleArray getOpenData()$/;"	f	class:CD_NAMESPACE::FinanceSimulator	typeref:typename:DoubleArray
getPixel	.\\ChartDirector\\chartdir.h	/^	int getPixel(int x, int y) const { return CDrawArea_getPixel(ptr, x, y); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
getPlotArea	.\\ChartDirector\\chartdir.h	/^	PlotArea *getPlotArea() { return regPlotArea(CXYChart_getPlotArea(ptr)); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:PlotArea *
getPlotAreaHeight	.\\ChartDirector\\chartdir.h	/^	int getPlotAreaHeight() { return CViewPortManager_getPlotAreaHeight(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:int
getPlotAreaLeft	.\\ChartDirector\\chartdir.h	/^	int getPlotAreaLeft() { return CViewPortManager_getPlotAreaLeft(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:int
getPlotAreaMouseX	.\\ChartViewer.cpp	/^int CChartViewer::getPlotAreaMouseX()$/;"	f	class:CChartViewer	typeref:typename:int
getPlotAreaMouseY	.\\ChartViewer.cpp	/^int CChartViewer::getPlotAreaMouseY()$/;"	f	class:CChartViewer	typeref:typename:int
getPlotAreaTop	.\\ChartDirector\\chartdir.h	/^	int getPlotAreaTop() { return CViewPortManager_getPlotAreaTop(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:int
getPlotAreaWidth	.\\ChartDirector\\chartdir.h	/^	int getPlotAreaWidth() { return CViewPortManager_getPlotAreaWidth(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:int
getPosition	.\\ChartDirector\\chartdir.h	/^	double getPosition(int i ) $/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:double
getProperty	.\\ChartDirector\\chartdir.h	/^	int getProperty(int attr) $/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:int
getRightX	.\\ChartDirector\\chartdir.h	/^	int getRightX() const { return CPlotArea_getRightX(ptr); }$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:int
getRightX	.\\ChartDirector\\chartdir.h	/^    int getRightX() const$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:int
getRootNode	.\\ChartDirector\\chartdir.h	/^    TreeMapNode *getRootNode()$/;"	f	class:CD_NAMESPACE::TreeMapChart	typeref:typename:TreeMapNode *
getRowCount	.\\ChartDirector\\chartdir.h	/^	int getRowCount() const { return CCDMLTable_getRowCount(ptr); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:int
getRowHeight	.\\ChartDirector\\chartdir.h	/^	int getRowHeight(int row) const { return CCDMLTable_getRowHeight(ptr, row); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:int
getRowStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *getRowStyle(int row) { return makeTextBox(CCDMLTable_getRowStyle(ptr, row)); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
getScrollDirection	.\\ChartViewer.cpp	/^int	CChartViewer::getScrollDirection()$/;"	f	class:CChartViewer	typeref:typename:int
getSector	.\\ChartDirector\\chartdir.h	/^	Sector *getSector(int sectorNo)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:Sector *
getSelectionBorderColor	.\\ChartDirector\\chartdir.h	/^	int getSelectionBorderColor() { return getProperty(VPC_SelectBoxLineColor); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:int
getSelectionBorderColor	.\\ChartViewer.cpp	/^COLORREF CChartViewer::getSelectionBorderColor()$/;"	f	class:CChartViewer	typeref:typename:COLORREF
getSelectionBorderWidth	.\\ChartDirector\\chartdir.h	/^	int getSelectionBorderWidth() { return getProperty(VPC_SelectBoxLineWidth); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:int
getSelectionBorderWidth	.\\ChartViewer.cpp	/^int	CChartViewer::getSelectionBorderWidth()$/;"	f	class:CChartViewer	typeref:typename:int
getSeries	.\\ChartDirector\\chartdir.h	/^	DoubleArray getSeries(int len, double minValue, double maxValue) $/;"	f	class:CD_NAMESPACE::RanSeries	typeref:typename:DoubleArray
getSeries	.\\ChartDirector\\chartdir.h	/^	DoubleArray getSeries(int len, double minValue, double maxValue, double maxDelta, $/;"	f	class:CD_NAMESPACE::RanSeries	typeref:typename:DoubleArray
getSlope	.\\ChartDirector\\chartdir.h	/^	double getSlope() { return CTrendLayer_getSlope(ptr); }$/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:double
getStdError	.\\ChartDirector\\chartdir.h	/^	double getStdError() { return CTrendLayer_getStdError(ptr); }$/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:double
getStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *getStyle() { return makeTextBox(CCDMLTable_getStyle(ptr)); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
getThickness	.\\ChartDirector\\chartdir.h	/^	int getThickness() const { return CAxis_getThickness(ptr); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:int
getTicks	.\\ChartDirector\\chartdir.h	/^	DoubleArray getTicks() const$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:DoubleArray
getTicks	.\\ChartDirector\\chartdir.h	/^	DoubleArray getTicks() const$/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:DoubleArray
getTimeStamps	.\\ChartDirector\\chartdir.h	/^	DoubleArray getTimeStamps() $/;"	f	class:CD_NAMESPACE::FinanceSimulator	typeref:typename:DoubleArray
getToolTipCtrl	.\\ChartViewer.cpp	/^CToolTipCtrl *CChartViewer::getToolTipCtrl()$/;"	f	class:CChartViewer	typeref:typename:CToolTipCtrl *
getToolTipDateFormat	.\\ChartDirector\\FinanceChart.h	/^    public: const char *getToolTipDateFormat()$/;"	f	class:FinanceChart	typeref:typename:const char *
getTopY	.\\ChartDirector\\chartdir.h	/^	int getTopY() const { return CBox_getTopY(ptr); }$/;"	f	class:CD_NAMESPACE::Box	typeref:typename:int
getTopY	.\\ChartDirector\\chartdir.h	/^	int getTopY() const { return CPlotArea_getTopY(ptr); }$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:int
getTopY	.\\ChartDirector\\chartdir.h	/^    int getTopY() const$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:int
getUpdateInterval	.\\ChartViewer.cpp	/^int	CChartViewer::getUpdateInterval()$/;"	f	class:CChartViewer	typeref:typename:int
getUseYAxis	.\\ChartDirector\\chartdir.h	/^	Axis *getUseYAxis() {$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:Axis *
getValue	.\\ChartDirector\\chartdir.h	/^	const char *getValue(const char *key)$/;"	f	class:CD_NAMESPACE::ImageMapHandler	typeref:typename:const char *
getValue	.\\ChartDirector\\chartdir.h	/^	const char *getValue(int i)$/;"	f	class:CD_NAMESPACE::ImageMapHandler	typeref:typename:const char *
getValue	.\\ChartDirector\\chartdir.h	/^	double getValue(int i ) $/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:double
getValue	.\\ChartDirector\\chartdir.h	/^    double getValue() const$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:double
getValueAtViewPort	.\\ChartDirector\\chartdir.h	/^    double getValueAtViewPort(const char *id, double ratio, bool isLogScale = false)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
getVersion	.\\ChartDirector\\chartdir.h	/^	static inline int getVersion() { return CChart_getVersion(); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
getVersion	.\\ChartDirector\\chartdir.h	/^static inline int getVersion() { return Chart::getVersion(); }$/;"	f	namespace:CD_NAMESPACE	typeref:typename:int
getViewPortAtValue	.\\ChartDirector\\chartdir.h	/^	double getViewPortAtValue(const char *id, double ratio, bool isLogScale = false)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
getViewPortBorderColor	.\\ChartDirector\\chartdir.h	/^	int getViewPortBorderColor() { return getProperty(VPC_VpEdgeColor); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:int
getViewPortBorderWidth	.\\ChartDirector\\chartdir.h	/^	int getViewPortBorderWidth() { return getProperty(VPC_VpBorderWidth); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:int
getViewPortControl	.\\ChartViewer.cpp	/^CViewPortControl *CChartViewer::getViewPortControl()$/;"	f	class:CChartViewer	typeref:typename:CViewPortControl *
getViewPortExternalColor	.\\ChartDirector\\chartdir.h	/^	int getViewPortExternalColor() { return getProperty(VPC_VpExternalColor); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:int
getViewPortFillColor	.\\ChartDirector\\chartdir.h	/^	int getViewPortFillColor() { return getProperty(VPC_VpFillColor); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:int
getViewPortHeight	.\\ChartDirector\\chartdir.h	/^	double getViewPortHeight() { return CViewPortManager_getViewPortHeight(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
getViewPortLeft	.\\ChartDirector\\chartdir.h	/^	double getViewPortLeft() { return CViewPortManager_getViewPortLeft(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
getViewPortTop	.\\ChartDirector\\chartdir.h	/^	double getViewPortTop() { return CViewPortManager_getViewPortTop(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
getViewPortWidth	.\\ChartDirector\\chartdir.h	/^	double getViewPortWidth() { return CViewPortManager_getViewPortWidth(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
getViewer	.\\ChartViewer.cpp	/^CChartViewer *CViewPortControl::getViewer()$/;"	f	class:CViewPortControl	typeref:typename:CChartViewer *
getVolData	.\\ChartDirector\\chartdir.h	/^	DoubleArray getVolData()$/;"	f	class:CD_NAMESPACE::FinanceSimulator	typeref:typename:DoubleArray
getWidth	.\\ChartDirector\\chartdir.h	/^	int getWidth() const { return CBaseChart_getWidth(ptr); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
getWidth	.\\ChartDirector\\chartdir.h	/^	int getWidth() const { return CBox_getWidth(ptr); }$/;"	f	class:CD_NAMESPACE::Box	typeref:typename:int
getWidth	.\\ChartDirector\\chartdir.h	/^	int getWidth() const { return CCDMLTable_getWidth(ptr); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:int
getWidth	.\\ChartDirector\\chartdir.h	/^	int getWidth() const { return CDrawArea_getWidth(ptr); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
getWidth	.\\ChartDirector\\chartdir.h	/^	int getWidth() const { return CPlotArea_getWidth(ptr); }$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:int
getWidth	.\\ChartDirector\\chartdir.h	/^	int getWidth() const { return CTTFText_getWidth(ptr); }$/;"	f	class:CD_NAMESPACE::TTFText	typeref:typename:int
getWidth	.\\ChartDirector\\chartdir.h	/^    int getWidth() const$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:int
getX	.\\ChartDirector\\chartdir.h	/^	int getX() { return CAxis_getX(ptr); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:int
getXCoor	.\\ChartDirector\\chartdir.h	/^	int getXCoor(double r, double a) const { return CPolarChart_getXCoor(ptr, r, a); }$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:int
getXCoor	.\\ChartDirector\\chartdir.h	/^	int getXCoor(double v) const { return CLayer_getXCoor(ptr, v); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:int
getXCoor	.\\ChartDirector\\chartdir.h	/^	int getXCoor(double v) const { return CXYChart_getXCoor(ptr, v); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:int
getXCoor	.\\ChartDirector\\chartdir.h	/^    int getXCoor(double xValue, double yValue, double zValue)$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:int
getXIndexOf	.\\ChartDirector\\chartdir.h	/^	int getXIndexOf(double xValue, double tolerance = 0) $/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:int
getXPosition	.\\ChartDirector\\chartdir.h	/^	double getXPosition(int i) $/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:double
getXValue	.\\ChartDirector\\chartdir.h	/^	double getXValue(int xCoor) $/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:double
getY	.\\ChartDirector\\chartdir.h	/^	int getY() { return CAxis_getY(ptr); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:int
getYCoor	.\\ChartDirector\\chartdir.h	/^	int getYCoor(double r, double a) const { return CPolarChart_getYCoor(ptr, r, a); }$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:int
getYCoor	.\\ChartDirector\\chartdir.h	/^	int getYCoor(double v, bool yAxis = true) const { return CLayer_getYCoor(ptr, v, yAxis); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:int
getYCoor	.\\ChartDirector\\chartdir.h	/^	int getYCoor(double v, const Axis *_yAxis = 0) $/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:int
getYCoor	.\\ChartDirector\\chartdir.h	/^	int getYCoor(double v, const Axis *yAxis) const $/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:int
getYCoor	.\\ChartDirector\\chartdir.h	/^    int getYCoor(double xValue, double yValue, double zValue)$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:int
getYValue	.\\ChartDirector\\chartdir.h	/^	double getYValue(int yCoor, const Axis *_yAxis = 0) $/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:double
getZoomDirection	.\\ChartViewer.cpp	/^int	CChartViewer::getZoomDirection()$/;"	f	class:CChartViewer	typeref:typename:int
getZoomInCursor	.\\ChartViewer.cpp	/^static HCURSOR getZoomInCursor()$/;"	f	typeref:typename:HCURSOR	file:
getZoomInHeightLimit	.\\ChartDirector\\chartdir.h	/^	double getZoomInHeightLimit() { return CViewPortManager_getZoomInHeightLimit(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
getZoomInRatio	.\\ChartViewer.cpp	/^double CChartViewer::getZoomInRatio()$/;"	f	class:CChartViewer	typeref:typename:double
getZoomInWidthLimit	.\\ChartDirector\\chartdir.h	/^	double getZoomInWidthLimit() { return CViewPortManager_getZoomInWidthLimit(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
getZoomOutCursor	.\\ChartViewer.cpp	/^static HCURSOR getZoomOutCursor()$/;"	f	typeref:typename:HCURSOR	file:
getZoomOutHeightLimit	.\\ChartDirector\\chartdir.h	/^	double getZoomOutHeightLimit() { return CViewPortManager_getZoomOutHeightLimit(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
getZoomOutRatio	.\\ChartViewer.cpp	/^double CChartViewer::getZoomOutRatio()$/;"	f	class:CChartViewer	typeref:typename:double
getZoomOutWidthLimit	.\\ChartDirector\\chartdir.h	/^	double getZoomOutWidthLimit() { return CViewPortManager_getZoomOutWidthLimit(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:double
glassEffect	.\\ChartDirector\\chartdir.h	/^	static inline int glassEffect(int glareSize = Chart::NormalGlare, int glareDirection = Chart::T/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
goldColor	.\\ChartDirector\\chartdir.h	/^	static inline int goldColor(int angle = 90) { return metalColor(0xffee44, angle); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
goldGradient	.\\ChartDirector\\chartdir.h	/^	static const int goldGradient[] = {0, 0xFFE743, 0x60, 0xFFFFE0, 0xB0, 0xFFF0B0, 0x100, 0xFFE743/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const int[]
goldGradient	.\\ChartDirector\\chartdir.h	/^static const int * const goldGradient = Chart::goldGradient;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const int * const
gradientColor	.\\ChartDirector\\chartdir.h	/^	int gradientColor(IntArray colorArray, double angle = 90, double scale = 1.0, int startX = 0, i/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
gradientColor	.\\ChartDirector\\chartdir.h	/^	int gradientColor(IntArray colorArray, double angle = 90, double scale = 1.0, int startX = 0, i/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
gradientColor	.\\ChartDirector\\chartdir.h	/^	int gradientColor(const int *c, double angle = 90, double scale = 1, int startX = 0, int startY/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
gradientColor	.\\ChartDirector\\chartdir.h	/^	int gradientColor(const int *c, double angle = 90, double scale = 1, int startX = 0, int startY/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
gradientColor	.\\ChartDirector\\chartdir.h	/^	int gradientColor(int startX, int startY, int endX, int endY, int startColor, int endColor)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
gradientColor	.\\ChartDirector\\chartdir.h	/^	int gradientColor(int startX, int startY, int endX, int endY, int startColor, int endColor)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
greenMetalGradient	.\\ChartDirector\\chartdir.h	/^	static const int greenMetalGradient[] = {0, 0x98E098, 0x60, 0xF0FFF0, 0xB0, 0xD8F0D8, 0x100, 0x/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const int[]
greenMetalGradient	.\\ChartDirector\\chartdir.h	/^static const int * const greenMetalGradient = Chart::greenMetalGradient;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const int * const
hCylinderTransform	.\\ChartDirector\\chartdir.h	/^	void hCylinderTransform(int yDiameter, int bgColor = 0xffffff,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
hFlip	.\\ChartDirector\\chartdir.h	/^	void hFlip() { CDrawArea_hFlip(ptr); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
hNoMove2DCursor	.\\ChartViewer.cpp	/^static HCURSOR hNoMove2DCursor = 0;$/;"	v	typeref:typename:HCURSOR	file:
hNoMoveHorizCursor	.\\ChartViewer.cpp	/^static HCURSOR hNoMoveHorizCursor =	0;$/;"	v	typeref:typename:HCURSOR	file:
hNoMoveVertCursor	.\\ChartViewer.cpp	/^static HCURSOR hNoMoveVertCursor = 0;$/;"	v	typeref:typename:HCURSOR	file:
hNoZoomCursor	.\\ChartViewer.cpp	/^static HCURSOR hNoZoomCursor = 0;$/;"	v	typeref:typename:HCURSOR	file:
hTriangleTransform	.\\ChartDirector\\chartdir.h	/^	void hTriangleTransform(int tWidth = -1, int bgColor = 0xffffff,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
hZoomInCursor	.\\ChartViewer.cpp	/^static HCURSOR hZoomInCursor = 0;$/;"	v	typeref:typename:HCURSOR	file:
hZoomOutCursor	.\\ChartViewer.cpp	/^static HCURSOR hZoomOutCursor =	0;$/;"	v	typeref:typename:HCURSOR	file:
halfColor	.\\ChartDirector\\chartdir.h	/^	int halfColor(int c) { return CBaseChart_halfColor(ptr, c); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
halfColor	.\\ChartDirector\\chartdir.h	/^	int halfColor(int c) { return CDrawArea_halfColor(ptr, c); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
handleMouseDown	.\\ChartDirector\\chartdir.h	/^	void handleMouseDown(double x, double y)$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
handleMouseMove	.\\ChartDirector\\chartdir.h	/^	void handleMouseMove(double x, double y, bool isDragging)$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
handleMouseUp	.\\ChartDirector\\chartdir.h	/^	void handleMouseUp(double x, double y) $/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
hdr	.\\gridctrl_src\\GridCtrl.h	/^    NMHDR   hdr; $/;"	m	struct:tagGV_DISPINFO	typeref:typename:NMHDR
hdr	.\\gridctrl_src\\GridCtrl.h	/^    NMHDR hdr; $/;"	m	struct:tagNM_GRIDVIEW	typeref:typename:NMHDR
hline	.\\ChartDirector\\chartdir.h	/^	void hline(int x1, int x2, int y, int c) { CDrawArea_hline(ptr, x1, x2, y, c); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
iColumn	.\\gridctrl_src\\GridCtrl.h	/^    int   iColumn; $/;"	m	struct:tagNM_GRIDVIEW	typeref:typename:int
iImage	.\\gridctrl_src\\GridCtrl.h	/^    int      iImage;      \/\/ Index of the list view items icon $/;"	m	class:CGridCell	typeref:typename:int
iImage	.\\gridctrl_src\\GridCtrl.h	/^    int      iImage;      \/\/ index of the list view items icon$/;"	m	struct:_GV_ITEM	typeref:typename:int
iRow	.\\gridctrl_src\\GridCtrl.h	/^    int   iRow; $/;"	m	struct:tagNM_GRIDVIEW	typeref:typename:int
inExtendedPlotArea	.\\ChartDirector\\chartdir.h	/^	bool inExtendedPlotArea(int x, int y)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
inPlotArea	.\\ChartDirector\\chartdir.h	/^	bool inPlotArea(int x, int y) { return CViewPortManager_inPlotArea(ptr, x, y); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
init	.\\ChartDirector\\FinanceChart.h	/^    private: void init()$/;"	f	class:FinanceChart	typeref:typename:void
init	.\\ChartDirector\\chartdir.h	/^	void init(BaseChartInternal *_ptr) { this->ptr = _ptr; }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
init	.\\ChartDirector\\chartdir.h	/^	void init(BaseMeterInternal *_ptr) { this->ptr = _ptr; BaseChart::init(BaseMeter2BaseChart(_ptr/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
init	.\\ChartDirector\\chartdir.h	/^	void init(ThreeDChartInternal *_ptr) { this->ptr = _ptr; BaseChart::init(ThreeDChart2BaseChart(/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:void
initDynamicLayer	.\\ChartDirector\\chartdir.h	/^	DrawArea *initDynamicLayer() $/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:DrawArea *
initDynamicLayer	.\\ChartDirector\\chartdir.h	/^	void initDynamicLayer()$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
initRect	.\\ChartViewer.cpp	/^void CChartViewer::initRect()$/;"	f	class:CChartViewer	typeref:typename:void
insert	.\\ChartDirector\\chartdir.h	/^	ArrayMath& insert(DoubleArray a, int insertPoint = -1)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
insert	.\\ChartDirector\\chartdir.h	/^	ArrayMath& insert(double c, int len, int insertPoint = -1)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
insertCol	.\\ChartDirector\\chartdir.h	/^	TextBox *insertCol(int col) { return makeTextBox(CCDMLTable_insertCol(ptr, col)); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
insertRow	.\\ChartDirector\\chartdir.h	/^	TextBox *insertRow(int row) { return makeTextBox(CCDMLTable_insertRow(ptr, row)); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
isDrag	.\\ChartViewer.cpp	/^bool CChartViewer::isDrag(int direction, CPoint	point)$/;"	f	class:CChartViewer	typeref:typename:bool
isDrag	.\\ChartViewer.cpp	/^bool CViewPortControl::isDrag(CPoint point)$/;"	f	class:CViewPortControl	typeref:typename:bool
isInMouseMoveEvent	.\\ChartViewer.cpp	/^bool CChartViewer::isInMouseMoveEvent()$/;"	f	class:CChartViewer	typeref:typename:bool
isLicensed	.\\ChartDirector\\chartdir.h	/^	static inline bool isLicensed() { return CChart_isLicensed(); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:bool
isLicensed	.\\ChartDirector\\chartdir.h	/^static inline bool isLicensed() { return Chart::isLicensed(); }$/;"	f	namespace:CD_NAMESPACE	typeref:typename:bool
isMouseDragging	.\\ChartViewer.cpp	/^bool CChartViewer::isMouseDragging()$/;"	f	class:CChartViewer	typeref:typename:bool
isMouseOnPlotArea	.\\ChartViewer.cpp	/^bool CChartViewer::isMouseOnPlotArea()$/;"	f	class:CChartViewer	typeref:typename:bool
isOnPlotArea	.\\ChartDirector\\chartdir.h	/^	bool isOnPlotArea(double x, double y)$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:bool
isPureAscii	.\\ChartViewer.h	/^	bool isPureAscii(const char *s)$/;"	f	class:TCHARtoUTF8	typeref:typename:bool
isPureAscii	.\\ChartViewer.h	/^	bool isPureAscii(const char *s)$/;"	f	class:UTF8toTCHAR	typeref:typename:bool
item	.\\gridctrl_src\\GridCtrl.h	/^    GV_ITEM item; $/;"	m	struct:tagGV_DISPINFO	typeref:typename:GV_ITEM
lParam	.\\gridctrl_src\\GridCtrl.h	/^    LPARAM   lParam;      \/\/ 32-bit value to associate with item $/;"	m	struct:_GV_ITEM	typeref:typename:LPARAM
lParam	.\\gridctrl_src\\GridCtrl.h	/^    LPARAM   lParam;      \/\/ 32-bit value to associate with item$/;"	m	class:CGridCell	typeref:typename:LPARAM
lastIndex	.\\ChartDirector\\FinanceChart.h	/^    private: int lastIndex(DoubleArray data)$/;"	f	class:FinanceChart	typeref:typename:int
layerCache	.\\ChartDirector\\chartdir.h	/^	Layer **layerCache;$/;"	m	class:CD_NAMESPACE::XYChart	typeref:typename:Layer **
layerCacheCount	.\\ChartDirector\\chartdir.h	/^	int layerCacheCount;$/;"	m	class:CD_NAMESPACE::XYChart	typeref:typename:int
layout	.\\ChartDirector\\chartdir.h	/^	void layout() { CBaseChart_layout(ptr); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
layout	.\\ChartDirector\\chartdir.h	/^	void layout() { CCDMLTable_layout(ptr); }$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:void
layoutAxes	.\\ChartDirector\\chartdir.h	/^	void layoutAxes() { CXYChart_layoutAxes(ptr); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:void
layoutLegend	.\\ChartDirector\\chartdir.h	/^	LegendBox *layoutLegend() { LegendBox *ret = new LegendBox(CBaseChart_layoutLegend(ptr)); reg(r/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:LegendBox *
len	.\\memblock.h	/^	int len;$/;"	m	class:DoubleArray	typeref:typename:int
len	.\\memblock.h	/^	int len;$/;"	m	class:IntArray	typeref:typename:int
len	.\\memblock.h	/^	int len;$/;"	m	class:MemBlock	typeref:typename:int
len	.\\memblock.h	/^	int len;$/;"	m	class:StringArray	typeref:typename:int
lfFont	.\\gridctrl_src\\GridCtrl.h	/^    LOGFONT  lfFont;      \/\/ Cell font$/;"	m	class:CGridCell	typeref:typename:LOGFONT
lfFont	.\\gridctrl_src\\GridCtrl.h	/^    LOGFONT  lfFont;      \/\/ Cell font$/;"	m	struct:_GV_ITEM	typeref:typename:LOGFONT
line	.\\ChartDirector\\chartdir.h	/^	void line(double x1, double y1, double x2, double y2, int c, int lineWidth = 1)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
linearGradientColor	.\\ChartDirector\\chartdir.h	/^	int linearGradientColor(int startX, int startY, int endX, int endY, IntArray c, bool periodic =/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
linearGradientColor	.\\ChartDirector\\chartdir.h	/^	int linearGradientColor(int startX, int startY, int endX, int endY, IntArray c, bool periodic =/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
linearGradientColor	.\\ChartDirector\\chartdir.h	/^	int linearGradientColor(int startX, int startY, int endX, int endY, int startColor, int endColo/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
linearGradientColor	.\\ChartDirector\\chartdir.h	/^	int linearGradientColor(int startX, int startY, int endX, int endY, int startColor, int endColo/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
load	.\\ChartDirector\\chartdir.h	/^	bool load(const char *filename)	{ return CDrawArea_load(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
loadGIF	.\\ChartDirector\\chartdir.h	/^	bool loadGIF(const char *filename) { return CDrawArea_loadGIF(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
loadJPG	.\\ChartDirector\\chartdir.h	/^	bool loadJPG(const char *filename) { return CDrawArea_loadJPG(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
loadPNG	.\\ChartDirector\\chartdir.h	/^	bool loadPNG(const char *filename) { return CDrawArea_loadPNG(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
loadWMP	.\\ChartDirector\\chartdir.h	/^	bool loadWMP(const char *filename) { return CDrawArea_loadWMP(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
loggamma	.\\TDist.cpp	/^double loggamma(double x)  \/* «¬«ó«Þ??ªÎ?? *\/$/;"	f	typeref:typename:double
lowess	.\\ChartDirector\\chartdir.h	/^	ArrayMath& lowess(DoubleArray b, double smoothness = 0.25, int iteration = 0)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
lowess	.\\ChartDirector\\chartdir.h	/^	ArrayMath& lowess(double smoothness = 0.25, int iteration = 0)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
mA	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
m_BottomLine	.\\ChartViewer.h	/^	CRectCtrl m_BottomLine;				\/\/ Bottom edge of selection rectangle$/;"	m	class:CChartViewer	typeref:typename:CRectCtrl
m_CharSize	.\\gridctrl_src\\GridCtrl.h	/^    CSize       m_CharSize;$/;"	m	class:CGridCtrl	typeref:typename:CSize
m_Chart	.\\ChartViewer.h	/^	BaseChart *m_Chart;					\/\/ BaseChart object displayed in the control$/;"	m	class:CViewPortControl	typeref:typename:BaseChart *
m_ChartViewer	.\\ChartViewer.h	/^	CChartViewer *m_ChartViewer;		\/\/ Associated CChartViewer$/;"	m	class:CViewPortControl	typeref:typename:CChartViewer *
m_ChartViewer	.\\GageDialog.h	/^	CChartViewer	m_ChartViewer;			\/\/ for Chart,	 ¼±ÅÃµÈ Lot, DateÀÇ ±×·¡ÇÁ Ãâ·Â$/;"	m	class:CGageDialog	typeref:typename:CChartViewer
m_Color	.\\ChartViewer.h	/^	CBrush m_Color;$/;"	m	class:CRectCtrl	typeref:typename:CBrush
m_ConfigDlg	.\\MainDialog.h	/^	CConfigDialog		m_ConfigDlg;$/;"	m	class:CMainDialog	typeref:typename:CConfigDialog
m_DropTarget	.\\gridctrl_src\\GridCtrl.h	/^    CGridDropTarget m_DropTarget;       \/\/ OLE Drop target for the grid$/;"	m	class:CGridCtrl	typeref:typename:CGridDropTarget
m_Font	.\\gridctrl_src\\GridCtrl.h	/^                m_Font;         \/\/ for the grid$/;"	m	class:CGridCtrl	typeref:typename:CFont
m_GageDlg	.\\MainDialog.h	/^	CGageDialog			m_GageDlg;$/;"	m	class:CMainDialog	typeref:typename:CGageDialog
m_LastDragOverCell	.\\gridctrl_src\\GridCtrl.h	/^    CCellID     m_LastDragOverCell;$/;"	m	class:CGridCtrl	typeref:typename:CCellID
m_LastMousePoint	.\\gridctrl_src\\GridCtrl.h	/^    CPoint      m_LeftClickDownPoint, m_LastMousePoint;$/;"	m	class:CGridCtrl	typeref:typename:CPoint
m_LeftClickDownCell	.\\gridctrl_src\\GridCtrl.h	/^    CCellID     m_LeftClickDownCell, m_SelectionStartCell;$/;"	m	class:CGridCtrl	typeref:typename:CCellID
m_LeftClickDownPoint	.\\gridctrl_src\\GridCtrl.h	/^    CPoint      m_LeftClickDownPoint, m_LastMousePoint;$/;"	m	class:CGridCtrl	typeref:typename:CPoint
m_LeftLine	.\\ChartViewer.h	/^	CRectCtrl m_LeftLine;				\/\/ Left edge of selection rectangle$/;"	m	class:CChartViewer	typeref:typename:CRectCtrl
m_Logfont	.\\gridctrl_src\\GridCtrl.h	/^    LOGFONT     m_Logfont;$/;"	m	class:CGridCtrl	typeref:typename:LOGFONT
m_LogicalPageSize	.\\gridctrl_src\\GridCtrl.h	/^    CSize       m_LogicalPageSize,      \/\/ Page size in gridctrl units.$/;"	m	class:CGridCtrl	typeref:typename:CSize
m_MouseMode	.\\gridctrl_src\\GridCtrl.h	/^    int         m_MouseMode;$/;"	m	class:CGridCtrl	typeref:typename:int
m_PaperSize	.\\gridctrl_src\\GridCtrl.h	/^                m_PaperSize;            \/\/ Page size in device units.$/;"	m	class:CGridCtrl	typeref:typename:CSize
m_PrevSelectedCellMap	.\\gridctrl_src\\GridCtrl.h	/^    CMap<DWORD,DWORD, CCellID, CCellID&> m_SelectedCellMap, m_PrevSelectedCellMap;$/;"	m	class:CGridCtrl	typeref:typename:CMap<DWORD,DWORD,CCellID,CCellID &>
m_PrinterFont	.\\gridctrl_src\\GridCtrl.h	/^    CFont       m_PrinterFont,  \/\/ for the printer$/;"	m	class:CGridCtrl	typeref:typename:CFont
m_Rect	.\\gridctrl_src\\InPlaceEdit.h	/^    CRect   m_Rect;$/;"	m	class:CInPlaceEdit	typeref:typename:CRect
m_ReentrantGuard	.\\ChartViewer.h	/^	bool m_ReentrantGuard;				\/\/ Prevents infinite calling loops$/;"	m	class:CChartViewer	typeref:typename:bool
m_ReentrantGuard	.\\ChartViewer.h	/^	bool m_ReentrantGuard;				\/\/ Prevents infinite calling loops$/;"	m	class:CViewPortControl	typeref:typename:bool
m_RightLine	.\\ChartViewer.h	/^	CRectCtrl m_RightLine;				\/\/ Right edge of selection rectangle$/;"	m	class:CChartViewer	typeref:typename:CRectCtrl
m_RowData	.\\gridctrl_src\\GridCtrl.h	/^    CTypedPtrArray<CObArray, GRID_ROW*> m_RowData;$/;"	m	class:CGridCtrl	typeref:typename:CTypedPtrArray<CObArray,GRID_ROW * >
m_SelectedCellMap	.\\gridctrl_src\\GridCtrl.h	/^    CMap<DWORD,DWORD, CCellID, CCellID&> m_SelectedCellMap, m_PrevSelectedCellMap;$/;"	m	class:CGridCtrl	typeref:typename:CMap<DWORD,DWORD,CCellID,CCellID &>
m_SelectionStartCell	.\\gridctrl_src\\GridCtrl.h	/^    CCellID     m_LeftClickDownCell, m_SelectionStartCell;$/;"	m	class:CGridCtrl	typeref:typename:CCellID
m_SortColumn	.\\gridctrl_src\\GridCtrl.h	/^    int         m_SortColumn;$/;"	m	class:CGridCtrl	typeref:typename:int
m_TitleTip	.\\gridctrl_src\\GridCtrl.h	/^    CTitleTip   m_TitleTip;             \/\/ Title tips for cells$/;"	m	class:CGridCtrl	typeref:typename:CTitleTip
m_ToolTip	.\\ChartViewer.h	/^	CToolTipCtrl m_ToolTip;				\/\/ CToolTipCtrl for managing tool tips$/;"	m	class:CChartViewer	typeref:typename:CToolTipCtrl
m_TopLine	.\\ChartViewer.h	/^	CRectCtrl m_TopLine;				\/\/ Top edge of selection rectangle$/;"	m	class:CChartViewer	typeref:typename:CRectCtrl
m_WCCisV6	.\\ChartViewer.h	/^	int m_WCCisV6;$/;"	m	class:CStaticHelper	typeref:typename:int
m_antiAlias	.\\ChartDirector\\FinanceChart.h	/^    bool m_antiAlias;$/;"	m	class:FinanceChart	typeref:typename:bool
m_arColWidths	.\\gridctrl_src\\GridCtrl.h	/^    CUIntArray  m_arRowHeights, m_arColWidths;$/;"	m	class:CGridCtrl	typeref:typename:CUIntArray
m_arRowHeights	.\\gridctrl_src\\GridCtrl.h	/^    CUIntArray  m_arRowHeights, m_arColWidths;$/;"	m	class:CGridCtrl	typeref:typename:CUIntArray
m_autoHideMsg	.\\ChartViewer.h	/^	int m_autoHideMsg;					\/\/ The message that will trigger removing the dynamic layer.$/;"	m	class:CChartViewer	typeref:typename:int
m_axisOnRight	.\\ChartDirector\\FinanceChart.h	/^    bool m_axisOnRight;$/;"	m	class:FinanceChart	typeref:typename:bool
m_bAllowColumnResize	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bAllowRowResize, m_bAllowColumnResize;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bAllowDragAndDrop	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bAllowDragAndDrop;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bAllowDraw	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bAllowDraw;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bAllowRowResize	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bAllowRowResize, m_bAllowColumnResize;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bAscending	.\\gridctrl_src\\GridCtrl.h	/^    int         m_bAscending;$/;"	m	class:CGridCtrl	typeref:typename:int
m_bDoubleBuffer	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bDoubleBuffer;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bEditable	.\\GageDialog.h	/^	BOOL	m_bEditable;$/;"	m	class:CGageDialog	typeref:typename:BOOL
m_bEditable	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bEditable;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bEnableSelection	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bEnableSelection;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bExitOnArrows	.\\gridctrl_src\\InPlaceEdit.h	/^    BOOL    m_bExitOnArrows;$/;"	m	class:CInPlaceEdit	typeref:typename:BOOL
m_bExitOnArrows	.\\gridctrl_src\\InPlaceList.h	/^	BOOL	m_bExitOnArrows; $/;"	m	class:CInPlaceList	typeref:typename:BOOL
m_bHandleTabKey	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bHandleTabKey;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bListMode	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bListMode;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bMemDC	.\\gridctrl_src\\MemDC.h	/^    BOOL     m_bMemDC;      \/\/ TRUE if CDC really is a Memory DC.$/;"	m	class:CMemDC	typeref:typename:BOOL
m_bModified	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bModified;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bMustUninitOLE	.\\gridctrl_src\\GridCtrl.h	/^	BOOL		m_bMustUninitOLE;		\/\/ Do we need to uninitialise OLE?$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bPrtBasic	.\\ConfigDialog.h	/^	BOOL	m_bPrtBasic;$/;"	m	class:CConfigDialog	typeref:typename:BOOL
m_bPrtDevD64	.\\ConfigDialog.h	/^	BOOL	m_bPrtDevD64;$/;"	m	class:CConfigDialog	typeref:typename:BOOL
m_bPrtDevice	.\\ConfigDialog.h	/^	BOOL	m_bPrtDevice;$/;"	m	class:CConfigDialog	typeref:typename:BOOL
m_bPrtLevel1	.\\ConfigDialog.h	/^	BOOL	m_bPrtLevel1;$/;"	m	class:CConfigDialog	typeref:typename:BOOL
m_bPrtLevel2	.\\ConfigDialog.h	/^	BOOL	m_bPrtLevel2;$/;"	m	class:CConfigDialog	typeref:typename:BOOL
m_bPrtLevel3	.\\ConfigDialog.h	/^	BOOL	m_bPrtLevel3;$/;"	m	class:CConfigDialog	typeref:typename:BOOL
m_bRegistered	.\\gridctrl_src\\GridDropTarget.h	/^    BOOL       m_bRegistered;$/;"	m	class:CGridDropTarget	typeref:typename:BOOL
m_bSingleRowSelection	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bSingleRowSelection;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bSortOnClick	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bSortOnClick;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bTitleTips	.\\gridctrl_src\\GridCtrl.h	/^    BOOL        m_bTitleTips;$/;"	m	class:CGridCtrl	typeref:typename:BOOL
m_bitmap	.\\gridctrl_src\\MemDC.h	/^    CBitmap  m_bitmap;      \/\/ Offscreen bitmap$/;"	m	class:CMemDC	typeref:typename:CBitmap
m_bottomMargin	.\\ChartDirector\\FinanceChart.h	/^    int m_bottomMargin;$/;"	m	class:FinanceChart	typeref:typename:int
m_closeData	.\\ChartDirector\\FinanceChart.h	/^    DoubleArray m_closeData;$/;"	m	class:FinanceChart	typeref:typename:DoubleArray
m_comboMeasType	.\\GageDialog.h	/^	CComboBox		m_comboMeasType;		\/\/ for mohm type combo box, Input$/;"	m	class:CGageDialog	typeref:typename:CComboBox
m_cr3DFace	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF    m_crWindowText, m_crWindowColour, m_cr3DFace,     \/\/ System colours$/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_crBkColour	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF    m_crTextColour, m_crTextBkColour, m_crBkColour,   \/\/ Grid colours$/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_crFixedBkColour	.\\gridctrl_src\\GridCtrl.h	/^                m_crFixedTextColour, m_crFixedBkColour, m_crGridColour;$/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_crFixedTextColour	.\\gridctrl_src\\GridCtrl.h	/^                m_crFixedTextColour, m_crFixedBkColour, m_crGridColour;$/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_crGridColour	.\\gridctrl_src\\GridCtrl.h	/^                m_crFixedTextColour, m_crFixedBkColour, m_crGridColour;$/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_crShadow	.\\gridctrl_src\\GridCtrl.h	/^                m_crShadow;    $/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_crTextBkColour	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF    m_crTextColour, m_crTextBkColour, m_crBkColour,   \/\/ Grid colours$/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_crTextColour	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF    m_crTextColour, m_crTextBkColour, m_crBkColour,   \/\/ Grid colours$/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_crWindowColour	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF    m_crWindowText, m_crWindowColour, m_cr3DFace,     \/\/ System colours$/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_crWindowText	.\\gridctrl_src\\GridCtrl.h	/^    COLORREF    m_crWindowText, m_crWindowColour, m_cr3DFace,     \/\/ System colours$/;"	m	class:CGridCtrl	typeref:typename:COLORREF
m_currentChart	.\\ChartDirector\\FinanceChart.h	/^    XYChart *m_currentChart;$/;"	m	class:FinanceChart	typeref:typename:XYChart *
m_currentChart	.\\ChartViewer.h	/^	BaseChart *m_currentChart;			\/\/ Current BaseChart object$/;"	m	class:CChartViewer	typeref:typename:BaseChart *
m_currentHBITMAP	.\\ChartViewer.h	/^	HBITMAP m_currentHBITMAP;$/;"	m	class:CStaticHelper	typeref:typename:HBITMAP
m_currentHotSpot	.\\ChartViewer.h	/^	int m_currentHotSpot;				\/\/ The hot spot under the mouse cursor.$/;"	m	class:CChartViewer	typeref:typename:int
m_currentMouseX	.\\ChartViewer.h	/^	int m_currentMouseX;				\/\/ Get the mouse x-pixel coordinate$/;"	m	class:CChartViewer	typeref:typename:int
m_currentMouseY	.\\ChartViewer.h	/^	int m_currentMouseY;				\/\/ Get the mouse y-pixel coordinate$/;"	m	class:CChartViewer	typeref:typename:int
m_d6StDev	.\\GageDialog.h	/^	double		m_d6StDev;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_dAvg	.\\GageDialog.h	/^	double		m_dAvg;				\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_dBias	.\\GageDialog.h	/^	double		m_dBias;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_dCg	.\\GageDialog.h	/^	double		m_dCg;				\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_dCgk	.\\GageDialog.h	/^	double		m_dCgk;				\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_dPValue	.\\GageDialog.h	/^	double		m_dPValue;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_dStDev	.\\GageDialog.h	/^	double		m_dStDev;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_dT	.\\GageDialog.h	/^	double		m_dT;				\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_dVarRept	.\\GageDialog.h	/^	double		m_dVarRept;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_dVarReptBias	.\\GageDialog.h	/^	double		m_dVarReptBias;		\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:double
m_daMeasData	.\\GageDialog.h	/^	double		m_daMeasData[MAX_MEAS_TYPE][MAX_MEAS_COUNT];$/;"	m	class:CGageDialog	typeref:typename:double[][]
m_defaultToolTip	.\\ChartViewer.h	/^	CString m_defaultToolTip;			\/\/ Default tool tip text$/;"	m	class:CChartViewer	typeref:typename:CString
m_delayImageMapUpdate	.\\ChartViewer.h	/^	bool m_delayImageMapUpdate;			\/\/ Delay image map update until mouse moves on plot area$/;"	m	class:CChartViewer	typeref:typename:bool
m_delayUpdateChart	.\\ChartViewer.h	/^	int m_delayUpdateChart;				\/\/ Delay chart update until the mouse event is completed$/;"	m	class:CChartViewer	typeref:typename:int
m_delayedChart	.\\ChartViewer.h	/^	BaseChart *m_delayedChart;			\/\/ The chart to be used for delayed update.$/;"	m	class:CChartViewer	typeref:typename:BaseChart *
m_delayedMouseMoveFlag	.\\ChartViewer.h	/^	UINT m_delayedMouseMoveFlag;		\/\/ The mouse key flags of the delayed mouse move event.$/;"	m	class:CChartViewer	typeref:typename:UINT
m_delayedMouseMovePoint	.\\ChartViewer.h	/^	CPoint m_delayedMouseMovePoint;		\/\/ The mouse coordinates of the delayed mouse move event.$/;"	m	class:CChartViewer	typeref:typename:CPoint
m_edit	.\\gridctrl_src\\InPlaceList.h	/^   CComboEdit m_edit;  \/\/ subclassed edit control$/;"	m	class:CInPlaceList	typeref:typename:CComboEdit
m_editMeasDataPath	.\\GageDialog.h	/^	CString			m_editMeasDataPath;		\/\/ for 4w Data file path$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStr6StDev	.\\GageDialog.h	/^	CString			m_editStr6StDev;		\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStrAvg	.\\GageDialog.h	/^	CString			m_editStrAvg;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStrBias	.\\GageDialog.h	/^	CString			m_editStrBias;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStrCg	.\\GageDialog.h	/^	CString			m_editStrCg;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStrCgk	.\\GageDialog.h	/^	CString			m_editStrCgk;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStrPValue	.\\GageDialog.h	/^	CString			m_editStrPValue;		\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStrStDev	.\\GageDialog.h	/^	CString			m_editStrStDev;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStrT	.\\GageDialog.h	/^	CString			m_editStrT;				\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStrVarRept	.\\GageDialog.h	/^	CString			m_editStrVarRept;		\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_editStrVarReptBias	.\\GageDialog.h	/^	CString			m_editStrVarReptBias;	\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:CString
m_edit_nRef	.\\GageDialog.h	/^	int				m_edit_nRef;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:int
m_edit_nRefInput	.\\GageDialog.h	/^	int				m_edit_nRefInput;		\/\/ Input$/;"	m	class:CGageDialog	typeref:typename:int
m_edit_nTol	.\\GageDialog.h	/^	int				m_edit_nTol;			\/\/ Output$/;"	m	class:CGageDialog	typeref:typename:int
m_edit_nTolInput	.\\GageDialog.h	/^	int				m_edit_nTolInput;		\/\/ Input$/;"	m	class:CGageDialog	typeref:typename:int
m_error_no	.\\Error.h	/^	int m_error_no;$/;"	m	class:CError	typeref:typename:int
m_extraPoints	.\\ChartDirector\\FinanceChart.h	/^    int m_extraPoints;$/;"	m	class:FinanceChart	typeref:typename:int
m_firstDayFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_firstDayFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_firstHourFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_firstHourFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_firstMonthFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_firstMonthFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_generalFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_generalFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_gridCtrl	.\\GageDialog.h	/^	CGridCtrl		m_gridCtrl;				\/\/ for Grid  (Input data list per type)$/;"	m	class:CGageDialog	typeref:typename:CGridCtrl
m_hIcon	.\\MainDialog.h	/^	HICON m_hIcon;$/;"	m	class:CMainDialog	typeref:typename:HICON
m_hasDelayedMouseMove	.\\ChartViewer.h	/^	bool m_hasDelayedMouseMove;			\/\/ Delay the mouse move event to allow other updates$/;"	m	class:CChartViewer	typeref:typename:bool
m_highData	.\\ChartDirector\\FinanceChart.h	/^    DoubleArray m_highData;$/;"	m	class:FinanceChart	typeref:typename:DoubleArray
m_holdTimerActive	.\\ChartViewer.h	/^	bool m_holdTimerActive;				\/\/ Delay chart update to limit update frequency$/;"	m	class:CChartViewer	typeref:typename:bool
m_hotSpotTester	.\\ChartViewer.h	/^	ImageMapHandler *m_hotSpotTester;	\/\/ ImageMapHander representing the image map$/;"	m	class:CChartViewer	typeref:typename:ImageMapHandler *
m_idCurrentCell	.\\gridctrl_src\\GridCtrl.h	/^    CCellID     m_idCurrentCell;$/;"	m	class:CGridCtrl	typeref:typename:CCellID
m_isClickable	.\\ChartViewer.h	/^	bool m_isClickable;					\/\/ Mouse is over a clickable hot spot.$/;"	m	class:CChartViewer	typeref:typename:bool
m_isDragScrolling	.\\ChartViewer.h	/^	bool m_isDragScrolling;				\/\/ Is drag scrolling the chart.$/;"	m	class:CChartViewer	typeref:typename:bool
m_isInMouseMove	.\\ChartViewer.h	/^    bool m_isInMouseMove;				\/\/ Is in mouse moeve event handler$/;"	m	class:CChartViewer	typeref:typename:bool
m_isInMouseMovePlotArea	.\\ChartViewer.h	/^	int m_isInMouseMovePlotArea;		\/\/ flag to indicate if is in a mouse move plot area event.$/;"	m	class:CChartViewer	typeref:typename:int
m_isMouseTracking	.\\ChartViewer.h	/^	bool m_isMouseTracking;				\/\/ Is tracking mouse leave event.$/;"	m	class:CChartViewer	typeref:typename:bool
m_isOnPlotArea	.\\ChartViewer.h	/^	bool m_isOnPlotArea;				\/\/ Mouse is over the plot area.$/;"	m	class:CChartViewer	typeref:typename:bool
m_isPlotAreaMouseDown	.\\ChartViewer.h	/^	bool m_isPlotAreaMouseDown;			\/\/ Mouse left button is down in the plot area.$/;"	m	class:CChartViewer	typeref:typename:bool
m_lastMouseMove	.\\ChartViewer.h	/^	unsigned int m_lastMouseMove;		\/\/ The timestamp of the last mouse move event.$/;"	m	class:CChartViewer	typeref:typename:unsigned int
m_leftMargin	.\\ChartDirector\\FinanceChart.h	/^    int m_leftMargin;$/;"	m	class:FinanceChart	typeref:typename:int
m_legendBgColor	.\\ChartDirector\\FinanceChart.h	/^    int m_legendBgColor;$/;"	m	class:FinanceChart	typeref:typename:int
m_legendFont	.\\ChartDirector\\FinanceChart.h	/^    std::string m_legendFont;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_legendFontColor	.\\ChartDirector\\FinanceChart.h	/^    int m_legendFontColor;$/;"	m	class:FinanceChart	typeref:typename:int
m_legendFontSize	.\\ChartDirector\\FinanceChart.h	/^    double m_legendFontSize;$/;"	m	class:FinanceChart	typeref:typename:double
m_logScale	.\\ChartDirector\\FinanceChart.h	/^    bool m_logScale;$/;"	m	class:FinanceChart	typeref:typename:bool
m_lowData	.\\ChartDirector\\FinanceChart.h	/^    DoubleArray m_lowData;$/;"	m	class:FinanceChart	typeref:typename:DoubleArray
m_mainChart	.\\ChartDirector\\FinanceChart.h	/^    XYChart *m_mainChart;$/;"	m	class:FinanceChart	typeref:typename:XYChart *
m_majorHGridColor	.\\ChartDirector\\FinanceChart.h	/^    int m_majorHGridColor;$/;"	m	class:FinanceChart	typeref:typename:int
m_majorVGridColor	.\\ChartDirector\\FinanceChart.h	/^    int m_majorVGridColor;$/;"	m	class:FinanceChart	typeref:typename:int
m_minDragAmount	.\\ChartViewer.h	/^	int m_minDragAmount;				\/\/ Minimum drag amount$/;"	m	class:CChartViewer	typeref:typename:int
m_minorHGridColor	.\\ChartDirector\\FinanceChart.h	/^    int m_minorHGridColor;$/;"	m	class:FinanceChart	typeref:typename:int
m_minorVGridColor	.\\ChartDirector\\FinanceChart.h	/^    int m_minorVGridColor;$/;"	m	class:FinanceChart	typeref:typename:int
m_mouseDownX	.\\ChartViewer.h	/^	int m_mouseDownX;					\/\/ Current mouse x coordinates$/;"	m	class:CViewPortControl	typeref:typename:int
m_mouseDownY	.\\ChartViewer.h	/^	int m_mouseDownY;					\/\/ Current mouse y coordinates$/;"	m	class:CViewPortControl	typeref:typename:int
m_mouseUsage	.\\ChartViewer.h	/^	int m_mouseUsage;					\/\/ Mouse usage mode$/;"	m	class:CChartViewer	typeref:typename:int
m_mouseWheelZoomRatio	.\\ChartViewer.h	/^	double m_mouseWheelZoomRatio;		\/\/ Mouse wheel zoom ratio$/;"	m	class:CChartViewer	typeref:typename:double
m_nBlock	.\\FileSysInfo.h	/^	int m_nBlock;			\/\/ Block °¹¼ö : m_nRow * m_nCol$/;"	m	struct:CSysInfo03	typeref:typename:int
m_nBlock	.\\FileSysInfo.h	/^	int m_nBlock;			\/\/ Piece °¹¼ö : m_nRow * m_nCol$/;"	m	struct:CSysInfo25	typeref:typename:int
m_nBlockNumber	.\\System.h	/^	int 			m_nBlockNumber[MAX_BOX];	\/\/ idx(0=Top, 1=Bottom)  val(m_nBlockTypeÀÇ block °¹¼ö)$/;"	m	class:CSystem	typeref:typename:int[]
m_nBlockTot	.\\FileSysInfo.h	/^	int m_nBlockTot;		\/\/ Block °¹¼ö 		$/;"	m	struct:CSysInfo19	typeref:typename:int
m_nBlockType	.\\System.h	/^	int 			m_nBlockType[MAX_BOX];		\/\/ idx(0=Top, 1=Bottom)  val(QD=0, DD=1, SD=2, S100_1=3, S100_/;"	m	class:CSystem	typeref:typename:int[]
m_nCellTotal	.\\FileSysInfo.h	/^	int m_nCellTotal;		\/\/ Block * Piece °¹¼ö $/;"	m	struct:CSysInfo19	typeref:typename:int
m_nCheck	.\\FileSysInfo.h	/^	int m_nCheck;\/\/sylee131117$/;"	m	struct:CSysInfo19	typeref:typename:int
m_nCol	.\\FileSysInfo.h	/^	int m_nCol;				\/\/ Block Col °¹¼ö $/;"	m	struct:CSysInfo03	typeref:typename:int
m_nCol	.\\FileSysInfo.h	/^	int m_nCol;				\/\/ Piece Col °¹¼ö$/;"	m	struct:CSysInfo25	typeref:typename:int
m_nCol	.\\gridctrl_src\\InPlaceList.h	/^	int		m_nCol;$/;"	m	class:CInPlaceList	typeref:typename:int
m_nColDel	.\\FileSysInfo.h	/^	int m_nColDel;$/;"	m	struct:CSysInfo25	typeref:typename:int
m_nCols	.\\GageDialog.h	/^	int		m_nCols;$/;"	m	class:CGageDialog	typeref:typename:int
m_nCols	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nRows, m_nFixedRows, m_nCols, m_nFixedCols;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nColumn	.\\gridctrl_src\\InPlaceEdit.h	/^    int     m_nColumn;$/;"	m	class:CInPlaceEdit	typeref:typename:int
m_nCombo_CurrType	.\\GageDialog.h	/^	int			m_nCombo_CurrType;	\/\/ ÇöÀç combo¿¡¼­ ¼±ÅÃµÈ type#. enum°ªÀ¸·Î access °¡´ÉÇÔ (ex: mohm_1/;"	m	class:CGageDialog	typeref:typename:int
m_nData	.\\FileSysInfo.h	/^	int m_nData[Def_MaxBlock1][Def_MaxBlock1];	$/;"	m	struct:CSysInfo03	typeref:typename:int[][]
m_nData	.\\FileSysInfo.h	/^	int m_nData[Def_MaxPiece1][Def_MaxPiece1];	$/;"	m	struct:CSysInfo25	typeref:typename:int[][]
m_nData	.\\FileSysInfo.h	/^	short m_nData[Def_MaxBlock1][Def_MaxPiece1]; $/;"	m	struct:CSysInfo19	typeref:typename:short[][]
m_nDefCellHeight	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nDefCellWidth, m_nDefCellHeight;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nDefCellWidth	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nDefCellWidth, m_nDefCellHeight;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nFixCols	.\\GageDialog.h	/^	int		m_nFixCols;$/;"	m	class:CGageDialog	typeref:typename:int
m_nFixRows	.\\GageDialog.h	/^	int		m_nFixRows;$/;"	m	class:CGageDialog	typeref:typename:int
m_nFixedCols	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nRows, m_nFixedRows, m_nCols, m_nFixedCols;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nFixedRows	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nRows, m_nFixedRows, m_nCols, m_nFixedCols;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nGridLines	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nGridLines;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nHScrollMax	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nVScrollMax, m_nHScrollMax;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nLastChar	.\\gridctrl_src\\InPlaceEdit.h	/^    UINT    m_nLastChar;$/;"	m	class:CInPlaceEdit	typeref:typename:UINT
m_nLastChar	.\\gridctrl_src\\InPlaceList.h	/^ 	UINT    m_nLastChar; $/;"	m	class:CInPlaceList	typeref:typename:UINT
m_nMargin	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nMargin;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nMaxCol	.\\gridctrl_src\\CellRange.h	/^    int m_nMaxCol;$/;"	m	class:CCellRange	typeref:typename:int
m_nMaxRow	.\\gridctrl_src\\CellRange.h	/^    int m_nMaxRow;$/;"	m	class:CCellRange	typeref:typename:int
m_nMeasCount	.\\GageDialog.h	/^	int			m_nMeasCount;$/;"	m	class:CGageDialog	typeref:typename:int
m_nMinCol	.\\gridctrl_src\\CellRange.h	/^    int m_nMinCol;$/;"	m	class:CCellRange	typeref:typename:int
m_nMinRow	.\\gridctrl_src\\CellRange.h	/^    int m_nMinRow;$/;"	m	class:CCellRange	typeref:typename:int
m_nNumLines	.\\gridctrl_src\\InPlaceList.h	/^	int		m_nNumLines;$/;"	m	class:CInPlaceList	typeref:typename:int
m_nPageHeight	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nPageHeight;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nPieceTot	.\\FileSysInfo.h	/^	int m_nPieceTot;		\/\/ Piece °¹¼ö $/;"	m	struct:CSysInfo19	typeref:typename:int
m_nResizeCaptureRange	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nResizeCaptureRange;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nRow	.\\FileSysInfo.h	/^	int m_nRow;				\/\/ Block Row °¹¼ö$/;"	m	struct:CSysInfo03	typeref:typename:int
m_nRow	.\\FileSysInfo.h	/^	int m_nRow;				\/\/ Piece Row °¹¼ö$/;"	m	struct:CSysInfo25	typeref:typename:int
m_nRow	.\\gridctrl_src\\InPlaceEdit.h	/^    int     m_nRow;$/;"	m	class:CInPlaceEdit	typeref:typename:int
m_nRow	.\\gridctrl_src\\InPlaceList.h	/^	int		m_nRow;$/;"	m	class:CInPlaceList	typeref:typename:int
m_nRowDel	.\\FileSysInfo.h	/^	int m_nRowDel;$/;"	m	struct:CSysInfo25	typeref:typename:int
m_nRows	.\\GageDialog.h	/^	int		m_nRows;$/;"	m	class:CGageDialog	typeref:typename:int
m_nRows	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nRows, m_nFixedRows, m_nCols, m_nFixedCols;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nRowsPerWheelNotch	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nRowsPerWheelNotch;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nTimerID	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nTimerID;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nTimerInterval	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nTimerInterval;$/;"	m	class:CGridCtrl	typeref:typename:int
m_nType	.\\FileSysInfo.h	/^	int m_nType;			\/\/ ¹«Á¶°Ç 1$/;"	m	struct:CSysInfo19	typeref:typename:int
m_nType	.\\FileSysInfo.h	/^	int m_nType;	 		\/\/ 1: A (X, Top Left)$/;"	m	struct:CSysInfo03	typeref:typename:int
m_nType	.\\FileSysInfo.h	/^	int m_nType;	 		\/\/ 1: A (X, Top Left)$/;"	m	struct:CSysInfo25	typeref:typename:int
m_nTypeCount	.\\GageDialog.h	/^	int			m_nTypeCount;$/;"	m	class:CGageDialog	typeref:typename:int
m_nUse	.\\FileSysInfo.h	/^	int m_nUse;				\/\/ ÀÌ ºÎºÐÀÌ 0ÀÌ¸é m_nData¸¦ ¸ðµÎ 0À¸·Î ÃÊ±âÈ­.$/;"	m	struct:CSysInfo19	typeref:typename:int
m_nVScrollMax	.\\gridctrl_src\\GridCtrl.h	/^    int         m_nVScrollMax, m_nHScrollMax;$/;"	m	class:CGridCtrl	typeref:typename:int
m_needUpdateChart	.\\ChartViewer.h	/^	bool m_needUpdateChart;				\/\/ Has pending chart update request$/;"	m	class:CChartViewer	typeref:typename:bool
m_needUpdateImageMap	.\\ChartViewer.h	/^	bool m_needUpdateImageMap;			\/\/ Has pending image map udpate request$/;"	m	class:CChartViewer	typeref:typename:bool
m_openData	.\\ChartDirector\\FinanceChart.h	/^    DoubleArray m_openData;$/;"	m	class:FinanceChart	typeref:typename:DoubleArray
m_otherDayFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_otherDayFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_otherHourFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_otherHourFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_otherMonthFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_otherMonthFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_pDC	.\\gridctrl_src\\MemDC.h	/^    CDC*     m_pDC;         \/\/ Saves CDC passed in constructor$/;"	m	class:CMemDC	typeref:typename:CDC *
m_pGridCtrl	.\\gridctrl_src\\GridDropTarget.h	/^    CGridCtrl* m_pGridCtrl;$/;"	m	class:CGridDropTarget	typeref:typename:CGridCtrl *
m_pImageList	.\\gridctrl_src\\GridCtrl.h	/^    CImageList* m_pImageList;$/;"	m	class:CGridCtrl	typeref:typename:CImageList *
m_pOldBitmap	.\\gridctrl_src\\MemDC.h	/^    CBitmap* m_pOldBitmap;  \/\/ bitmap originally found in CMemDC$/;"	m	class:CMemDC	typeref:typename:CBitmap *
m_pParentWnd	.\\gridctrl_src\\TitleTip.h	/^	CWnd *m_pParentWnd;$/;"	m	class:CTitleTip	typeref:typename:CWnd *
m_pStrFileBDLName	.\\FileSysInfo.h	/^	char  m_pStrFileBDLName[200]; \/\/SYLEE121202$/;"	m	struct:CSysInfoView01	typeref:typename:char[200]
m_pStrFileDri1	.\\FileSysInfo.h	/^	char  m_pStrFileDri1[200]; \/\/init sw load path$/;"	m	struct:CSysInfoView01	typeref:typename:char[200]
m_pStrFilePath1	.\\FileSysInfo.h	/^	char  m_pStrFilePath1[200]; \/\/init sw load path$/;"	m	struct:CSysInfoView01	typeref:typename:char[200]
m_pStrFilePathBDL	.\\FileSysInfo.h	/^	char  m_pStrFilePathBDL[200]; \/\/SYLEE121202$/;"	m	struct:CSysInfoView01	typeref:typename:char[200]
m_pStrFilePathJig1	.\\FileSysInfo.h	/^	char  m_pStrFilePathJig1[200]; \/\/jig load$/;"	m	struct:CSysInfoView01	typeref:typename:char[200]
m_pStrFilePathJig2	.\\FileSysInfo.h	/^	char  m_pStrFilePathJig2[200]; \/\/ jig set$/;"	m	struct:CSysInfoView01	typeref:typename:char[200]
m_plotAreaBgColor	.\\ChartDirector\\FinanceChart.h	/^    int m_plotAreaBgColor;$/;"	m	class:FinanceChart	typeref:typename:int
m_plotAreaBorder	.\\ChartDirector\\FinanceChart.h	/^    int m_plotAreaBorder;$/;"	m	class:FinanceChart	typeref:typename:int
m_plotAreaGap	.\\ChartDirector\\FinanceChart.h	/^    int m_plotAreaGap;$/;"	m	class:FinanceChart	typeref:typename:int
m_plotAreaMouseDownXPos	.\\ChartViewer.h	/^	int m_plotAreaMouseDownXPos;		\/\/ The starting x coordinate of the mouse drag.$/;"	m	class:CChartViewer	typeref:typename:int
m_plotAreaMouseDownYPos	.\\ChartViewer.h	/^	int m_plotAreaMouseDownYPos;		\/\/ The starting y coordinate of the mouse drag.$/;"	m	class:CChartViewer	typeref:typename:int
m_rect	.\\gridctrl_src\\MemDC.h	/^    CRect    m_rect;        \/\/ Rectangle of drawing area.$/;"	m	class:CMemDC	typeref:typename:CRect
m_rectHover	.\\gridctrl_src\\TitleTip.h	/^    CRect m_rectHover;$/;"	m	class:CTitleTip	typeref:typename:CRect
m_rectTitle	.\\gridctrl_src\\TitleTip.h	/^	CRect m_rectTitle;$/;"	m	class:CTitleTip	typeref:typename:CRect
m_rightMargin	.\\ChartDirector\\FinanceChart.h	/^    int m_rightMargin;$/;"	m	class:FinanceChart	typeref:typename:int
m_sInitText	.\\gridctrl_src\\InPlaceEdit.h	/^    CString m_sInitText;$/;"	m	class:CInPlaceEdit	typeref:typename:CString
m_sInitText	.\\gridctrl_src\\InPlaceList.h	/^	CString m_sInitText;$/;"	m	class:CInPlaceList	typeref:typename:CString
m_scrollDirection	.\\ChartViewer.h	/^	int m_scrollDirection;				\/\/ Scroll direction$/;"	m	class:CChartViewer	typeref:typename:int
m_selectBoxLineColor	.\\ChartViewer.h	/^	COLORREF m_selectBoxLineColor;		\/\/ Selectiom box border color$/;"	m	class:CChartViewer	typeref:typename:COLORREF
m_selectBoxLineWidth	.\\ChartViewer.h	/^	int m_selectBoxLineWidth;			\/\/ Selectiom box border width$/;"	m	class:CChartViewer	typeref:typename:int
m_strState	.\\Error.h	/^	CString m_strState;$/;"	m	class:CError	typeref:typename:CString
m_testMode	.\\ChartViewer.h	/^	bool m_testMode;$/;"	m	class:CStaticHelper	typeref:typename:bool
m_timeLabelSpacing	.\\ChartDirector\\FinanceChart.h	/^    int m_timeLabelSpacing;$/;"	m	class:FinanceChart	typeref:typename:int
m_timeStamps	.\\ChartDirector\\FinanceChart.h	/^    DoubleArray m_timeStamps;$/;"	m	class:FinanceChart	typeref:typename:DoubleArray
m_toolTipDayFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_toolTipDayFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_toolTipHasAttached	.\\ChartViewer.h	/^	bool m_toolTipHasAttached;			\/\/ CToolTipCtrl has attached to CChartViewer$/;"	m	class:CChartViewer	typeref:typename:bool
m_toolTipHourFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_toolTipHourFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_toolTipMonthFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_toolTipMonthFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_topMargin	.\\ChartDirector\\FinanceChart.h	/^    int m_topMargin;$/;"	m	class:FinanceChart	typeref:typename:int
m_totalHeight	.\\ChartDirector\\FinanceChart.h	/^    int m_totalHeight;$/;"	m	class:FinanceChart	typeref:typename:int
m_totalWidth	.\\ChartDirector\\FinanceChart.h	/^    int m_totalWidth;$/;"	m	class:FinanceChart	typeref:typename:int
m_updateInterval	.\\ChartViewer.h	/^	int m_updateInterval;				\/\/ Minimum interval between chart updates$/;"	m	class:CChartViewer	typeref:typename:int
m_volData	.\\ChartDirector\\FinanceChart.h	/^    DoubleArray m_volData;$/;"	m	class:FinanceChart	typeref:typename:DoubleArray
m_volUnit	.\\ChartDirector\\FinanceChart.h	/^    std::string m_volUnit;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_vpControl	.\\ChartViewer.h	/^	CViewPortControl *m_vpControl;		\/\/ Associated CViewPortControl      $/;"	m	class:CChartViewer	typeref:typename:CViewPortControl *
m_xAxisFont	.\\ChartDirector\\FinanceChart.h	/^    std::string m_xAxisFont;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_xAxisFontAngle	.\\ChartDirector\\FinanceChart.h	/^    double m_xAxisFontAngle;$/;"	m	class:FinanceChart	typeref:typename:double
m_xAxisFontColor	.\\ChartDirector\\FinanceChart.h	/^    int m_xAxisFontColor;$/;"	m	class:FinanceChart	typeref:typename:int
m_xAxisFontSize	.\\ChartDirector\\FinanceChart.h	/^    double m_xAxisFontSize;$/;"	m	class:FinanceChart	typeref:typename:double
m_yAxisFont	.\\ChartDirector\\FinanceChart.h	/^    std::string m_yAxisFont;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_yAxisFontColor	.\\ChartDirector\\FinanceChart.h	/^    int m_yAxisFontColor;$/;"	m	class:FinanceChart	typeref:typename:int
m_yAxisFontSize	.\\ChartDirector\\FinanceChart.h	/^    double m_yAxisFontSize;$/;"	m	class:FinanceChart	typeref:typename:double
m_yAxisMargin	.\\ChartDirector\\FinanceChart.h	/^    int m_yAxisMargin;$/;"	m	class:FinanceChart	typeref:typename:int
m_yearFormat	.\\ChartDirector\\FinanceChart.h	/^    std::string m_yearFormat;$/;"	m	class:FinanceChart	typeref:typename:std::string
m_zoomDirection	.\\ChartViewer.h	/^	int m_zoomDirection;				\/\/ Zoom direction$/;"	m	class:CChartViewer	typeref:typename:int
m_zoomInRatio	.\\ChartViewer.h	/^	double m_zoomInRatio;				\/\/ Click zoom in ratio$/;"	m	class:CChartViewer	typeref:typename:double
m_zoomOutRatio	.\\ChartViewer.h	/^	double m_zoomOutRatio;				\/\/ Click zoom out ratio$/;"	m	class:CChartViewer	typeref:typename:double
mainChart	.\\ChartDirector\\chartdir.h	/^	const BaseChart *mainChart;$/;"	m	class:CD_NAMESPACE::MultiChart	typeref:typename:const BaseChart *
makeChart	.\\ChartDirector\\chartdir.h	/^	DrawArea *makeChart()$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:DrawArea *
makeChart	.\\ChartDirector\\chartdir.h	/^	MemBlock makeChart(int format)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:MemBlock
makeChart	.\\ChartDirector\\chartdir.h	/^	bool makeChart(const char *filename)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:bool
makeChart	.\\ChartDirector\\chartdir.h	/^	bool makeChart(int format, const char **data, int *len)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:bool
makeLabelTable	.\\ChartDirector\\chartdir.h	/^	CDMLTable *makeLabelTable() $/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:CDMLTable *
makeTextBox	.\\ChartDirector\\chartdir.h	/^	TextBox *makeTextBox(TextBoxInternal *p) $/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
mask	.\\gridctrl_src\\GridCtrl.h	/^    UINT     mask;        \/\/ Mask for use in getting\/setting cell data$/;"	m	struct:_GV_ITEM	typeref:typename:UINT
max	.\\ChartDirector\\chartdir.h	/^	double max() const { return CArrayMath_max(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:double
maxAxisCacheCount	.\\ChartDirector\\chartdir.h	/^	int maxAxisCacheCount;$/;"	m	class:CD_NAMESPACE::XYChart	typeref:typename:int
maxChartCount	.\\ChartDirector\\chartdir.h	/^	int maxChartCount;$/;"	m	class:CD_NAMESPACE::MultiChart	typeref:typename:int
maxDataSetCacheCount	.\\ChartDirector\\chartdir.h	/^	int maxDataSetCacheCount;$/;"	m	class:CD_NAMESPACE::Layer	typeref:typename:int
maxIndex	.\\ChartDirector\\chartdir.h	/^	int maxIndex() const { return CArrayMath_maxIndex(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:int
maxLayerCacheCount	.\\ChartDirector\\chartdir.h	/^	int maxLayerCacheCount;$/;"	m	class:CD_NAMESPACE::XYChart	typeref:typename:int
maxValue	.\\ChartDirector\\chartdir.h	/^	double maxValue() const { return CArrayMath_max(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:double
med	.\\ChartDirector\\chartdir.h	/^	double med() const { return CArrayMath_med(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:double
merge	.\\ChartDirector\\chartdir.h	/^	void merge(const DrawArea *d, int x, int y, int align, int transparency)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
metalColor	.\\ChartDirector\\chartdir.h	/^	static inline int metalColor(int c, int angle = 90) { return CChart_metalColor(c, angle); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
min	.\\ChartDirector\\chartdir.h	/^	double min() const { return CArrayMath_min(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:double
minIndex	.\\ChartDirector\\chartdir.h	/^	int minIndex() const { return CArrayMath_minIndex(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:int
minValue	.\\ChartDirector\\chartdir.h	/^	double minValue() const { return CArrayMath_min(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:double
mohm	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
mohm_1	.\\GageDialog.h	/^enum	MEAS_TYPE	{ 	mohm_1 = 0,			\/\/ 0	$/;"	e	enum:MEAS_TYPE
mohm_10	.\\GageDialog.h	/^						mohm_10 = 5,		\/\/ 5$/;"	e	enum:MEAS_TYPE
mohm_100	.\\GageDialog.h	/^						mohm_100  = 10,		\/\/ 10$/;"	e	enum:MEAS_TYPE
mohm_1000	.\\GageDialog.h	/^						mohm_1000 = 14,$/;"	e	enum:MEAS_TYPE
mohm_10000	.\\GageDialog.h	/^						mohm_10000 = 19,$/;"	e	enum:MEAS_TYPE
mohm_2	.\\GageDialog.h	/^						mohm_2 = 1,$/;"	e	enum:MEAS_TYPE
mohm_20	.\\GageDialog.h	/^						mohm_20 = 6,$/;"	e	enum:MEAS_TYPE
mohm_200	.\\GageDialog.h	/^						mohm_200  = 11,$/;"	e	enum:MEAS_TYPE
mohm_2000	.\\GageDialog.h	/^						mohm_2000  = 15,	\/\/ 15$/;"	e	enum:MEAS_TYPE
mohm_20000	.\\GageDialog.h	/^						mohm_20000  = 20,	\/\/ 20$/;"	e	enum:MEAS_TYPE
mohm_3	.\\GageDialog.h	/^						mohm_3 = 2,$/;"	e	enum:MEAS_TYPE
mohm_30	.\\GageDialog.h	/^						mohm_30 = 7,$/;"	e	enum:MEAS_TYPE
mohm_3000	.\\GageDialog.h	/^						mohm_3000  = 16,$/;"	e	enum:MEAS_TYPE
mohm_30000	.\\GageDialog.h	/^						mohm_30000  = 21,$/;"	e	enum:MEAS_TYPE
mohm_4	.\\GageDialog.h	/^						mohm_4 = 3,$/;"	e	enum:MEAS_TYPE
mohm_40	.\\GageDialog.h	/^						mohm_40 = 8,$/;"	e	enum:MEAS_TYPE
mohm_5	.\\GageDialog.h	/^						mohm_5 = 4,$/;"	e	enum:MEAS_TYPE
mohm_50	.\\GageDialog.h	/^						mohm_50 = 9,$/;"	e	enum:MEAS_TYPE
mohm_500	.\\GageDialog.h	/^						mohm_500  = 12,$/;"	e	enum:MEAS_TYPE
mohm_5000	.\\GageDialog.h	/^						mohm_5000  = 17,$/;"	e	enum:MEAS_TYPE
mohm_50000	.\\GageDialog.h	/^						mohm_50000  = 22,$/;"	e	enum:MEAS_TYPE
mohm_750	.\\GageDialog.h	/^						mohm_750  = 13,$/;"	e	enum:MEAS_TYPE
mohm_7500	.\\GageDialog.h	/^						mohm_7500  = 18,$/;"	e	enum:MEAS_TYPE
mohm_75000	.\\GageDialog.h	/^						mohm_75000  = 23,$/;"	e	enum:MEAS_TYPE
mohm_999999	.\\GageDialog.h	/^						mohm_999999 = 24,	$/;"	e	enum:MEAS_TYPE
movAvg	.\\ChartDirector\\chartdir.h	/^	ArrayMath& movAvg(int interval)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
movCorr	.\\ChartDirector\\chartdir.h	/^	ArrayMath& movCorr(int interval, DoubleArray b = DoubleArray())$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
movMax	.\\ChartDirector\\chartdir.h	/^	ArrayMath& movMax(int interval)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
movMed	.\\ChartDirector\\chartdir.h	/^	ArrayMath& movMed(int interval)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
movMin	.\\ChartDirector\\chartdir.h	/^	ArrayMath& movMin(int interval)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
movPercentile	.\\ChartDirector\\chartdir.h	/^	ArrayMath& movPercentile(int interval, double _percentile)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
movStdDev	.\\ChartDirector\\chartdir.h	/^	ArrayMath& movStdDev(int interval)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
move	.\\ChartDirector\\chartdir.h	/^	void move(double xOffset, double yOffset, int bgColor = 0xffffff, int filter = Chart::LinearFil/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
moveBack	.\\ChartDirector\\chartdir.h	/^	void moveBack(Layer *layer = 0) { CLayer_moveBack(ptr, layer ? layer->ptr : 0); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
moveFront	.\\ChartDirector\\chartdir.h	/^	void moveFront(Layer *layer = 0) { CLayer_moveFront(ptr, layer ? layer->ptr : 0); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
moveGridBefore	.\\ChartDirector\\chartdir.h	/^	void moveGridBefore(Layer *layer = 0) { CPlotArea_moveGridBefore(ptr, layer ? layer->getInterna/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:void
msec	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
mul	.\\ChartDirector\\chartdir.h	/^	ArrayMath& mul(DoubleArray b) { CArrayMath_mul(ptr, b.data, b.len); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
mul	.\\ChartDirector\\chartdir.h	/^	ArrayMath& mul(double b) { CArrayMath_mul2(ptr, b); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
nFormat	.\\gridctrl_src\\GridCtrl.h	/^    UINT     nFormat;     \/\/ Cell format$/;"	m	class:CGridCell	typeref:typename:UINT
nFormat	.\\gridctrl_src\\GridCtrl.h	/^    UINT     nFormat;     \/\/ Format of cell$/;"	m	struct:_GV_ITEM	typeref:typename:UINT
nMeasRef	.\\GageDialog.h	/^	int			nMeasRef;$/;"	m	struct:__anon275519290108	typeref:typename:int
nMeasYype	.\\GageDialog.h	/^	int	 		nMeasYype;$/;"	m	struct:__anon275519290108	typeref:typename:int
nUse	.\\System.h	/^	int 	nUse;				\/\/ Col1		\/\/ 0: NotUse,   1: Use$/;"	m	struct:sCAL_DATA	typeref:typename:int
nValid	.\\System.h	/^	int 	nValid;				\/\/ Col2	    \/\/ 0: Bad(InValid), FALSE,  1: Good(Valid), TRUE$/;"	m	struct:sCAL_DATA	typeref:typename:int
needFree	.\\ChartViewer.h	/^	bool needFree;$/;"	m	class:TCHARtoUTF8	typeref:typename:bool
needFree	.\\ChartViewer.h	/^	bool needFree;$/;"	m	class:UTF8toTCHAR	typeref:typename:bool
needUpdateChart	.\\ChartDirector\\chartdir.h	/^	bool needUpdateChart() { return getProperty(VPC_NeedUpdateChart) != 0; }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:bool
needUpdateChart	.\\ChartViewer.cpp	/^bool CChartViewer::needUpdateChart()$/;"	f	class:CChartViewer	typeref:typename:bool
needUpdateDisplay	.\\ChartDirector\\chartdir.h	/^	bool needUpdateDisplay() { return getProperty(VPC_NeedUpdateDisplay) != 0; }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:bool
needUpdateImageMap	.\\ChartDirector\\chartdir.h	/^	bool needUpdateImageMap() { return getProperty(VPC_NeedUpdateImageMap) != 0; }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:bool
needUpdateImageMap	.\\ChartViewer.cpp	/^bool CChartViewer::needUpdateImageMap()$/;"	f	class:CChartViewer	typeref:typename:bool
new	.\\ACE400Gage.cpp	/^#define new /;"	d	file:
new	.\\ChartViewer.cpp	/^#define	new	/;"	d	file:
new	.\\ConfigDialog.cpp	/^#define new /;"	d	file:
new	.\\Error.cpp	/^#define new /;"	d	file:
new	.\\GageDialog.cpp	/^#define new /;"	d	file:
new	.\\Globals.cpp	/^#define new /;"	d	file:
new	.\\MainDialog.cpp	/^#define new /;"	d	file:
new	.\\gridctrl_src\\GridCtrl.cpp	/^#define new /;"	d	file:
new	.\\gridctrl_src\\GridDropTarget.cpp	/^#define new /;"	d	file:
new	.\\gridctrl_src\\InPlaceEdit.cpp	/^#define new /;"	d	file:
new	.\\gridctrl_src\\InPlaceList.cpp	/^#define new /;"	d	file:
new	.\\gridctrl_src\\TitleTip.cpp	/^#define new /;"	d	file:
next	.\\ChartDirector\\chartdir.h	/^	GarbagePtr *next;$/;"	m	class:CD_NAMESPACE::GarbagePtr	typeref:typename:GarbagePtr *
noMove2DCursorA	.\\ChartViewer.cpp	/^static const unsigned int noMove2DCursorA[] =$/;"	v	typeref:typename:const unsigned int[]	file:
noMove2DCursorB	.\\ChartViewer.cpp	/^static const unsigned int noMove2DCursorB[] =$/;"	v	typeref:typename:const unsigned int[]	file:
noMoveHorizCursorA	.\\ChartViewer.cpp	/^static const unsigned int noMoveHorizCursorA[]	=$/;"	v	typeref:typename:const unsigned int[]	file:
noMoveHorizCursorB	.\\ChartViewer.cpp	/^static const unsigned int noMoveHorizCursorB[]	=$/;"	v	typeref:typename:const unsigned int[]	file:
noMoveVertCursorA	.\\ChartViewer.cpp	/^static const unsigned int noMoveVertCursorA[] =$/;"	v	typeref:typename:const unsigned int[]	file:
noMoveVertCursorB	.\\ChartViewer.cpp	/^static const unsigned int noMoveVertCursorB[] =$/;"	v	typeref:typename:const unsigned int[]	file:
noZoomCursorA	.\\ChartViewer.cpp	/^static const unsigned int noZoomCursorA[] = $/;"	v	typeref:typename:const unsigned int[]	file:
noZoomCursorB	.\\ChartViewer.cpp	/^static const unsigned int noZoomCursorB[] = $/;"	v	typeref:typename:const unsigned int[]	file:
ohm	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
oldDefaultPalette	.\\ChartDirector\\chartdir.h	/^	static const int oldDefaultPalette[] =$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const int[]
oldDefaultPalette	.\\ChartDirector\\chartdir.h	/^static const int * const oldDefaultPalette = Chart::oldDefaultPalette;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const int * const
onMouseWheelZoom	.\\ChartViewer.cpp	/^BOOL CChartViewer::onMouseWheelZoom(int x, int y, short zDelta)$/;"	f	class:CChartViewer	typeref:typename:BOOL
onPaint	.\\ChartViewer.cpp	/^void CStaticHelper::onPaint(CStatic *self)$/;"	f	class:CStaticHelper	typeref:typename:void
operator !=	.\\gridctrl_src\\CellRange.h	/^    int operator!=(const CCellID& rhs)    { return !operator==(rhs); }$/;"	f	class:CCellID	typeref:typename:int
operator !=	.\\gridctrl_src\\CellRange.h	/^inline int CCellRange::operator!=(const CCellRange& rhs)$/;"	f	class:CCellRange	typeref:typename:int
operator ->	.\\gridctrl_src\\MemDC.h	/^    CMemDC* operator->() {return this;}$/;"	f	class:CMemDC	typeref:typename:CMemDC *
operator =	.\\ChartDirector\\chartdir.h	/^	ArrayMath &operator=(const ArrayMath &rhs) { CArrayMath_destroy(ptr); DoubleArray r  = rhs; ptr/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
operator ==	.\\gridctrl_src\\CellRange.h	/^    int operator==(const CCellID& rhs)    { return (row == rhs.row && col == rhs.col); }$/;"	f	class:CCellID	typeref:typename:int
operator ==	.\\gridctrl_src\\CellRange.h	/^inline int CCellRange::operator==(const CCellRange& rhs)$/;"	f	class:CCellRange	typeref:typename:int
operator []	.\\memblock.h	/^	char operator[](int i) const { return data[i]; }$/;"	f	class:MemBlock	typeref:typename:char
operator []	.\\memblock.h	/^	const char *operator[](int i) const { return data[i]; }$/;"	f	class:StringArray	typeref:typename:const char *
operator []	.\\memblock.h	/^	double operator[](int i) const { return data[i]; }$/;"	f	class:DoubleArray	typeref:typename:double
operator []	.\\memblock.h	/^	int operator[](int i) const { return data[i]; }$/;"	f	class:IntArray	typeref:typename:int
out	.\\ChartDirector\\chartdir.h	/^	bool out(const char *filename) { return CDrawArea_out(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outAGF	.\\ChartDirector\\chartdir.h	/^	MemBlock outAGF() { const char *data; int len; CDrawArea_outAGF2(ptr, &data, &len); return MemB/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:MemBlock
outAGF	.\\ChartDirector\\chartdir.h	/^	bool outAGF(const char *filename) { return CDrawArea_outAGF(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outBMP	.\\ChartDirector\\chartdir.h	/^	MemBlock outBMP() { const char *data; int len; outBMP(&data, &len); return MemBlock(data, len);/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:MemBlock
outBMP	.\\ChartDirector\\chartdir.h	/^	bool outBMP(const char **data, int *len) { return CDrawArea_outBMP2(ptr, data, len); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outBMP	.\\ChartDirector\\chartdir.h	/^	bool outBMP(const char *filename) { return CDrawArea_outBMP(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outGIF	.\\ChartDirector\\chartdir.h	/^	MemBlock outGIF() { const char *data; int len; outGIF(&data, &len); return MemBlock(data, len);/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:MemBlock
outGIF	.\\ChartDirector\\chartdir.h	/^	bool outGIF(const char **data, int *len) { return CDrawArea_outGIF2(ptr, data, len); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outGIF	.\\ChartDirector\\chartdir.h	/^	bool outGIF(const char *filename) { return CDrawArea_outGIF(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outJPG	.\\ChartDirector\\chartdir.h	/^	MemBlock outJPG(int quality = 80) { const char *data; int len; outJPG(&data, &len, quality); re/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:MemBlock
outJPG	.\\ChartDirector\\chartdir.h	/^	bool outJPG(const char **data, int *len, int quality = 80) { return CDrawArea_outJPG2(ptr, data/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outJPG	.\\ChartDirector\\chartdir.h	/^	bool outJPG(const char *filename, int quality = 80) { return CDrawArea_outJPG(ptr, filename, qu/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outPDF	.\\ChartDirector\\chartdir.h	/^	MemBlock outPDF() { const char *data; int len; CDrawArea_outPDF2(ptr, &data, &len); return MemB/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:MemBlock
outPDF	.\\ChartDirector\\chartdir.h	/^	bool outPDF(const char *filename) { return CDrawArea_outPDF(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outPNG	.\\ChartDirector\\chartdir.h	/^	MemBlock outPNG() { const char *data; int len; outPNG(&data, &len); return MemBlock(data, len);/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:MemBlock
outPNG	.\\ChartDirector\\chartdir.h	/^	bool outPNG(const char **data, int *len) { return CDrawArea_outPNG2(ptr, data, len); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outPNG	.\\ChartDirector\\chartdir.h	/^	bool outPNG(const char *filename) { return CDrawArea_outPNG(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outSVG	.\\ChartDirector\\chartdir.h	/^	MemBlock outSVG() { return outSVG2(); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:MemBlock
outSVG	.\\ChartDirector\\chartdir.h	/^	bool outSVG(const char *filename, const char *options = 0) { return CDrawArea_outSVG(ptr, filen/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outSVG2	.\\ChartDirector\\chartdir.h	/^	MemBlock outSVG2(const char *options = 0) $/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:MemBlock
outWMP	.\\ChartDirector\\chartdir.h	/^	MemBlock outWMP() { const char *data; int len; outWMP(&data, &len); return MemBlock(data, len);/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:MemBlock
outWMP	.\\ChartDirector\\chartdir.h	/^	bool outWMP(const char **data, int *len) { return CDrawArea_outWMP2(ptr, data, len); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
outWMP	.\\ChartDirector\\chartdir.h	/^	bool outWMP(const char *filename) { return CDrawArea_outWMP(ptr, filename); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
own_this	.\\ChartDirector\\chartdir.h	/^	bool own_this;$/;"	m	class:CD_NAMESPACE::DrawArea	typeref:typename:bool
p_beta	.\\TDist.cpp	/^double p_beta(double x, double a, double b)$/;"	f	typeref:typename:double
p_tdist	.\\TDist.cpp	/^double p_tdist(double t, int df)  \/* t ÝÂøÖªÎù»ö°ü¬áã *\/$/;"	f	typeref:typename:double
packPlotArea	.\\ChartDirector\\chartdir.h	/^	void packPlotArea(int leftX, int topY, int rightX, int bottomY, int minWidth = 0, int minHeight/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:void
paint	.\\ChartDirector\\chartdir.h	/^	void paint(DrawArea *d) { CDrawObj_paint(ptr, d->getInternalPtr()); }$/;"	f	class:CD_NAMESPACE::DrawObj	typeref:typename:void
paintDisplay	.\\ChartViewer.cpp	/^void CViewPortControl::paintDisplay()$/;"	f	class:CViewPortControl	typeref:typename:void
paintViewPort	.\\ChartDirector\\chartdir.h	/^	void paintViewPort() $/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
patternColor	.\\ChartDirector\\chartdir.h	/^	int patternColor(IntArray colorArray, int height, int startX = 0, int startY = 0)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
patternColor	.\\ChartDirector\\chartdir.h	/^	int patternColor(IntArray colorArray, int height, int startX = 0, int startY = 0)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
patternColor	.\\ChartDirector\\chartdir.h	/^	int patternColor(const char *filename, int startX = 0, int startY = 0)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
patternColor	.\\ChartDirector\\chartdir.h	/^	int patternColor(const char *filename, int startX = 0, int startY = 0)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
patternColor	.\\ChartDirector\\chartdir.h	/^	int patternColor(const int *c, int w, int h, int startX = 0, int startY = 0)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
patternColor	.\\ChartDirector\\chartdir.h	/^	int patternColor(const int *c, int w, int h, int startX = 0, int startY = 0)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
percentile	.\\ChartDirector\\chartdir.h	/^	double percentile(double p) const { return CArrayMath_percentile(ptr, p); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:double
phongLighting	.\\ChartDirector\\chartdir.h	/^	static inline int phongLighting(double ambientIntensity = 0.5, double diffuseIntensity = 0.5, $/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
pixel	.\\ChartDirector\\chartdir.h	/^	void pixel(int x, int y, int c) { CDrawArea_pixel(ptr, x, y, c); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
plotAreaCache	.\\ChartDirector\\chartdir.h	/^	PlotArea *plotAreaCache;$/;"	m	class:CD_NAMESPACE::XYChart	typeref:typename:PlotArea *
polygon	.\\ChartDirector\\chartdir.h	/^	void polygon(DoubleArray x, DoubleArray y, int edgeColor, int fillColor)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
polygon	.\\ChartDirector\\chartdir.h	/^	void polygon(IntArray x, IntArray y, int edgeColor, int fillColor)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
polygon	.\\ChartDirector\\chartdir.h	/^	void polygon(const int *x, const int *y, int noOfPoints, int edgeColor, int fillColor)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
ptr	.\\ChartDirector\\chartdir.h	/^	AngularAxisInternal *ptr;$/;"	m	class:CD_NAMESPACE::AngularAxis	typeref:typename:AngularAxisInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	AngularMeterInternal *ptr;$/;"	m	class:CD_NAMESPACE::AngularMeter	typeref:typename:AngularMeterInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	AreaLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::AreaLayer	typeref:typename:AreaLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	ArrayMathInternal *ptr;$/;"	m	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMathInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	AutoDestroy *ptr;$/;"	m	class:CD_NAMESPACE::GarbagePtr	typeref:typename:AutoDestroy *
ptr	.\\ChartDirector\\chartdir.h	/^	AxisInternal *ptr;$/;"	m	class:CD_NAMESPACE::Axis	typeref:typename:AxisInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	BarLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::BarLayer	typeref:typename:BarLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	BaseBoxLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::BaseBoxLayer	typeref:typename:BaseBoxLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	BaseChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::BaseChart	typeref:typename:BaseChartInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	BaseMeterInternal *ptr;$/;"	m	class:CD_NAMESPACE::BaseMeter	typeref:typename:BaseMeterInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	BoxInternal *ptr;$/;"	m	class:CD_NAMESPACE::Box	typeref:typename:BoxInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	BoxWhiskerLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::BoxWhiskerLayer	typeref:typename:BoxWhiskerLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	CDMLTableInternal *ptr;$/;"	m	class:CD_NAMESPACE::CDMLTable	typeref:typename:CDMLTableInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	CandleStickLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::CandleStickLayer	typeref:typename:CandleStickLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	ColorAxisInternal *ptr;$/;"	m	class:CD_NAMESPACE::ColorAxis	typeref:typename:ColorAxisInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	ContourLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::ContourLayer	typeref:typename:ContourLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	DataSetInternal *ptr;$/;"	m	class:CD_NAMESPACE::DataSet	typeref:typename:DataSetInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	DrawAreaInternal *ptr;$/;"	m	class:CD_NAMESPACE::DrawArea	typeref:typename:DrawAreaInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	DrawObjInternal *ptr;$/;"	m	class:CD_NAMESPACE::DrawObj	typeref:typename:DrawObjInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	FinanceSimulatorInternal *ptr;$/;"	m	class:CD_NAMESPACE::FinanceSimulator	typeref:typename:FinanceSimulatorInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	HLOCLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::HLOCLayer	typeref:typename:HLOCLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	ImageMapHandlerInternal *ptr;$/;"	m	class:CD_NAMESPACE::ImageMapHandler	typeref:typename:ImageMapHandlerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	InterLineLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::InterLineLayer	typeref:typename:InterLineLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	LayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::Layer	typeref:typename:LayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	LegendBoxInternal *ptr;$/;"	m	class:CD_NAMESPACE::LegendBox	typeref:typename:LegendBoxInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	LineInternal *ptr;$/;"	m	class:CD_NAMESPACE::Line	typeref:typename:LineInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	LineLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::LineLayer	typeref:typename:LineLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	LinearMeterInternal *ptr;$/;"	m	class:CD_NAMESPACE::LinearMeter	typeref:typename:LinearMeterInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	MarkInternal *ptr;$/;"	m	class:CD_NAMESPACE::Mark	typeref:typename:MarkInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	MeterPointerInternal *ptr;$/;"	m	class:CD_NAMESPACE::MeterPointer	typeref:typename:MeterPointerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	MultiChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::MultiChart	typeref:typename:MultiChartInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PieChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::PieChart	typeref:typename:PieChartInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PlotAreaInternal *ptr;$/;"	m	class:CD_NAMESPACE::PlotArea	typeref:typename:PlotAreaInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PolarChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::PolarChart	typeref:typename:PolarChartInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PolarLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::PolarLayer	typeref:typename:PolarLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PolarLineLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::PolarLineLayer	typeref:typename:PolarLineLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PolarSplineAreaLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::PolarSplineAreaLayer	typeref:typename:PolarSplineAreaLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PolarSplineLineLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::PolarSplineLineLayer	typeref:typename:PolarSplineLineLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PolarVectorLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::PolarVectorLayer	typeref:typename:PolarVectorLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PyramidChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::PyramidChart	typeref:typename:PyramidChartInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	PyramidLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::PyramidLayer	typeref:typename:PyramidLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	RanSeriesInternal *ptr;$/;"	m	class:CD_NAMESPACE::RanSeries	typeref:typename:RanSeriesInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	RanTableInternal *ptr;$/;"	m	class:CD_NAMESPACE::RanTable	typeref:typename:RanTableInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	SectorInternal *ptr;$/;"	m	class:CD_NAMESPACE::Sector	typeref:typename:SectorInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	SplineLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::SplineLayer	typeref:typename:SplineLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	StepLineLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::StepLineLayer	typeref:typename:StepLineLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	SurfaceChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::SurfaceChart	typeref:typename:SurfaceChartInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	TTFTextInternal *ptr;$/;"	m	class:CD_NAMESPACE::TTFText	typeref:typename:TTFTextInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	TextBoxInternal *ptr;$/;"	m	class:CD_NAMESPACE::TextBox	typeref:typename:TextBoxInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	ThreeDChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::ThreeDChart	typeref:typename:ThreeDChartInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	ThreeDScatterChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::ThreeDScatterChart	typeref:typename:ThreeDScatterChartInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	ThreeDScatterGroupInternal *ptr;$/;"	m	class:CD_NAMESPACE::ThreeDScatterGroup	typeref:typename:ThreeDScatterGroupInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	TreeMapChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::TreeMapChart	typeref:typename:TreeMapChartInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	TreeMapNodeInternal *ptr;$/;"	m	class:CD_NAMESPACE::TreeMapNode	typeref:typename:TreeMapNodeInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	TrendLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::TrendLayer	typeref:typename:TrendLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	VectorLayerInternal *ptr;$/;"	m	class:CD_NAMESPACE::VectorLayer	typeref:typename:VectorLayerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	ViewPortControlBaseInternal *ptr;$/;"	m	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:ViewPortControlBaseInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	ViewPortManagerInternal *ptr;$/;"	m	class:CD_NAMESPACE::ViewPortManager	typeref:typename:ViewPortManagerInternal *
ptr	.\\ChartDirector\\chartdir.h	/^	XYChartInternal *ptr;$/;"	m	class:CD_NAMESPACE::XYChart	typeref:typename:XYChartInternal *
rAffineTransform	.\\ChartDirector\\chartdir.h	/^	void rAffineTransform(double a, double b, double c, double d, double e, double f,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
radialAxis	.\\ChartDirector\\chartdir.h	/^	RadialAxis *radialAxis() { RadialAxis *ret = new RadialAxis(CPolarChart_radialAxis(ptr)); reg(r/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:RadialAxis *
radialGradientColor	.\\ChartDirector\\chartdir.h	/^	int radialGradientColor(int cx, int cy, int rx, int ry, IntArray c, bool periodic = false)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
radialGradientColor	.\\ChartDirector\\chartdir.h	/^	int radialGradientColor(int cx, int cy, int rx, int ry, IntArray c, bool periodic = false)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
radialGradientColor	.\\ChartDirector\\chartdir.h	/^	int radialGradientColor(int cx, int cy, int rx, int ry, int startColor, int endColor, bool peri/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:int
radialGradientColor	.\\ChartDirector\\chartdir.h	/^	int radialGradientColor(int cx, int cy, int rx, int ry, int startColor, int endColor, bool peri/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
rate	.\\ChartDirector\\chartdir.h	/^	ArrayMath& rate(int offset = 1) { CArrayMath_rate(ptr, offset); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
rect	.\\ChartDirector\\chartdir.h	/^	void rect(int x1, int y1, int x2, int y2, int edgeColor, int fillColor, int raisedEffect = 0)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
redMetalGradient	.\\ChartDirector\\chartdir.h	/^	static const int redMetalGradient[] = {0, 0xE09898, 0x60, 0xFFF0F0, 0xB0, 0xF0D8D8, 0x100, 0xE0/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const int[]
redMetalGradient	.\\ChartDirector\\chartdir.h	/^static const int * const redMetalGradient = Chart::redMetalGradient;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const int * const
reduceColors	.\\ChartDirector\\chartdir.h	/^	int reduceColors(int colorCount, bool blackAndWhite = false)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:int
refCount	.\\ChartDirector\\chartdir.h	/^	int *refCount;$/;"	m	class:CD_NAMESPACE::BaseChart	typeref:typename:int *
reg	.\\ChartDirector\\chartdir.h	/^	void reg(AutoDestroy *g) { root = new GarbagePtr(g, root); }$/;"	f	class:CD_NAMESPACE::GarbageContainer	typeref:typename:void
regAxis	.\\ChartDirector\\chartdir.h	/^	Axis *regAxis(AxisInternal *_ptr) {$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:Axis *
regDataSet	.\\ChartDirector\\chartdir.h	/^	DataSet *regDataSet(DataSetInternal *_ptr) {$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:DataSet *
regDrawArea	.\\ChartDirector\\chartdir.h	/^	DrawArea *regDrawArea(DrawAreaInternal *_ptr) {$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:DrawArea *
regLayer	.\\ChartDirector\\chartdir.h	/^	Layer *regLayer(LayerInternal *_ptr) {$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:Layer *
regPlotArea	.\\ChartDirector\\chartdir.h	/^	PlotArea *regPlotArea(PlotAreaInternal *_ptr) {$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:PlotArea *
relativeLinearGradient	.\\ChartDirector\\chartdir.h	/^	int relativeLinearGradient(DoubleArray gradient, double angle = 0, double radius = -1)$/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:int
relativeRadialGradient	.\\ChartDirector\\chartdir.h	/^	int relativeRadialGradient(DoubleArray gradient, double radius = -1)$/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:int
removeDynamicLayer	.\\ChartDirector\\chartdir.h	/^	void removeDynamicLayer() $/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
removeDynamicLayer	.\\ChartDirector\\chartdir.h	/^	void removeDynamicLayer(bool keepOriginal = false)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
removeDynamicLayer	.\\ChartViewer.cpp	/^void CChartViewer::removeDynamicLayer(int msg)$/;"	f	class:CChartViewer	typeref:typename:void
replace	.\\ChartDirector\\chartdir.h	/^	ArrayMath& replace(double a, double b)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
resize	.\\ChartDirector\\chartdir.h	/^	void resize(int newWidth, int newHeight, int filter = Chart::LinearFilter, double blur = 1)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
result	.\\ChartDirector\\chartdir.h	/^	DoubleArray result() const { const double *d; int len; CArrayMath_result(ptr, &d, &len); return/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:DoubleArray
ring	.\\ChartDirector\\chartdir.h	/^	void ring(int cx, int cy, int rx, int ry, int rx2, int ry2, int edgeColor, int fillColor)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
ringSector	.\\ChartDirector\\chartdir.h	/^	void ringSector(int cx, int cy, int rx, int ry, int rx2, int ry2,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
root	.\\ChartDirector\\chartdir.h	/^	GarbagePtr *root;$/;"	m	class:CD_NAMESPACE::GarbageContainer	typeref:typename:GarbagePtr *
rotate	.\\ChartDirector\\chartdir.h	/^	void rotate(double angle, int bgColor = 0xffffff, double cx = -1, double cy = -1,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
row	.\\gridctrl_src\\CellRange.h	/^    int row, col;$/;"	m	class:CCellID	typeref:typename:int
row	.\\gridctrl_src\\GridCtrl.h	/^    int      row,col;     \/\/ Row and Column of item$/;"	m	struct:_GV_ITEM	typeref:typename:int
sCAL_DATA	.\\System.h	/^typedef struct sCAL_DATA$/;"	s
sCAL_DATA	.\\System.h	/^} sCAL_DATA;$/;"	t	typeref:struct:sCAL_DATA
sErrMsg	.\\Error.h	/^} sErrMsg;$/;"	t	typeref:struct:__anon99cd842f0108
sFILE_DATA	.\\Globals.h	/^	sFILE_DATA()$/;"	f	struct:sFILE_DATA
sFILE_DATA	.\\Globals.h	/^typedef struct sFILE_DATA$/;"	s
sFILE_DATA	.\\Globals.h	/^} sFILE_DATA;$/;"	t	typeref:struct:sFILE_DATA
sMEAS_DATA	.\\System.h	/^typedef struct sMEAS_DATA$/;"	s
sMEAS_DATA	.\\System.h	/^} sMEAS_DATA;$/;"	t	typeref:struct:sMEAS_DATA
sMeasInfo	.\\GageDialog.h	/^} sMeasInfo;$/;"	t	typeref:struct:__anon275519290108
sa_MeasData	.\\System.h	/^	sMEAS_DATA		sa_MeasData[MAX_MEAS_COUNT];$/;"	m	struct:sCAL_DATA	typeref:typename:sMEAS_DATA[]
sec	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
sector	.\\ChartDirector\\chartdir.h	/^	Sector *sector(int sectorNo) { return getSector(sectorNo); }$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:Sector *
sector	.\\ChartDirector\\chartdir.h	/^	void sector(int cx, int cy, int rx, int ry, double a1, double a2, int edgeColor, int fillColor)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
selectDate	.\\ChartDirector\\chartdir.h	/^	int selectDate(int colNo, double minDate, double maxDate)$/;"	f	class:CD_NAMESPACE::RanTable	typeref:typename:int
selectEQZ	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectEQZ(DoubleArray decisionArray = DoubleArray(), double fillValue = 0)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectGEZ	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectGEZ(DoubleArray decisionArray = DoubleArray(), double fillValue = 0)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectGTZ	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectGTZ(DoubleArray decisionArray = DoubleArray(), double fillValue = 0)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectLEZ	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectLEZ(DoubleArray decisionArray = DoubleArray(), double fillValue = 0)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectLTZ	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectLTZ(DoubleArray decisionArray = DoubleArray(), double fillValue = 0)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectNEZ	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectNEZ(DoubleArray decisionArray = DoubleArray(), double fillValue = 0)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectRegularSpacing	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectRegularSpacing(int majorTickStep, int minorTickStep = 0, int initialMargin = 0/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectStartOfDay	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectStartOfDay(int majorTickStep = 1, double initialMargin = 3 * 3600)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectStartOfHour	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectStartOfHour(int majorTickStep = 1, double initialMargin = 300)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectStartOfMinute	.\\ChartDirector\\chartdir.h	/^    ArrayMath& selectStartOfMinute(int majorTickStep = 1, double initialMargin = 5)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectStartOfMonth	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectStartOfMonth(int majorTickStep = 1, double initialMargin = 5 * 86400)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectStartOfSecond	.\\ChartDirector\\chartdir.h	/^    ArrayMath& selectStartOfSecond(int majorTickStep = 1, double initialMargin = 0.1)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectStartOfWeek	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectStartOfWeek(int majorTickStep = 1, double initialMargin = 2 * 86400)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
selectStartOfYear	.\\ChartDirector\\chartdir.h	/^	ArrayMath& selectStartOfYear(int majorTickStep = 1, double initialMargin = 60 * 86400)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
set3D	.\\ChartDirector\\chartdir.h	/^	void set3D(DoubleArray depths, double angle = 45, bool shadowMode = false)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
set3D	.\\ChartDirector\\chartdir.h	/^	void set3D(int d = -1, int zGap = 0) { CLayer_set3D(ptr, d, zGap); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
set3D	.\\ChartDirector\\chartdir.h	/^	void set3D(int depth = -1, double angle = -1, bool shadowMode = false)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
set4QBgColor	.\\ChartDirector\\chartdir.h	/^	void set4QBgColor(int Q1Color, int Q2Color, int Q3Color, int Q4Color, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:void
setAMPM	.\\ChartDirector\\chartdir.h	/^	void setAMPM(const char *am, const char *pm)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setAggregateLabelFormat	.\\ChartDirector\\chartdir.h	/^	void setAggregateLabelFormat(const char *formatString)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setAggregateLabelStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *setAggregateLabelStyle(const char *font = 0, double fontSize = 8,$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:TextBox *
setAlignment	.\\ChartDirector\\chartdir.h	/^	void setAlignment(int a) { CStepLineLayer_setAlignment(ptr, a); }$/;"	f	class:CD_NAMESPACE::StepLineLayer	typeref:typename:void
setAlignment	.\\ChartDirector\\chartdir.h	/^	void setAlignment(int a) { CTextBox_setAlignment(ptr, a); }$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setAltBgColor	.\\ChartDirector\\chartdir.h	/^	void setAltBgColor(bool horizontal, int color1, int color2, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:void
setAngle	.\\ChartDirector\\chartdir.h	/^	void setAngle(double startAngle) { CAxis_setAngle(ptr, startAngle); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setAngles	.\\ChartDirector\\chartdir.h	/^	void setAngles(DoubleArray angles)$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setAntiAlias	.\\ChartDirector\\chartdir.h	/^	void setAntiAlias(bool shapeAntiAlias = true, int textAntiAlias = Chart::AutoAntiAlias)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setAntiAlias	.\\ChartDirector\\chartdir.h	/^	void setAntiAlias(bool shapeAntiAlias = true, int textAntiAlias = Chart::AutoAntiAlias)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setAntiAliasText	.\\ChartDirector\\chartdir.h	/^	void setAntiAliasText(int a) { CDrawArea_setAntiAliasText(ptr, a); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setArrowAlignment	.\\ChartDirector\\chartdir.h	/^	void setArrowAlignment(int alignment) { CPolarVectorLayer_setArrowAlignment(ptr, alignment); }$/;"	f	class:CD_NAMESPACE::PolarVectorLayer	typeref:typename:void
setArrowAlignment	.\\ChartDirector\\chartdir.h	/^	void setArrowAlignment(int alignment) { CVectorLayer_setArrowAlignment(ptr, alignment); }$/;"	f	class:CD_NAMESPACE::VectorLayer	typeref:typename:void
setArrowHead	.\\ChartDirector\\chartdir.h	/^	void setArrowHead(IntArray polygon) { CPolarVectorLayer_setArrowHead2(ptr, polygon.data, polygo/;"	f	class:CD_NAMESPACE::PolarVectorLayer	typeref:typename:void
setArrowHead	.\\ChartDirector\\chartdir.h	/^	void setArrowHead(IntArray polygon) { CVectorLayer_setArrowHead2(ptr, polygon.data, polygon.len/;"	f	class:CD_NAMESPACE::VectorLayer	typeref:typename:void
setArrowHead	.\\ChartDirector\\chartdir.h	/^	void setArrowHead(int width, int height = 0) { CPolarVectorLayer_setArrowHead(ptr, width, heigh/;"	f	class:CD_NAMESPACE::PolarVectorLayer	typeref:typename:void
setArrowHead	.\\ChartDirector\\chartdir.h	/^	void setArrowHead(int width, int height = 0) { CVectorLayer_setArrowHead(ptr, width, height); }$/;"	f	class:CD_NAMESPACE::VectorLayer	typeref:typename:void
setArrowStem	.\\ChartDirector\\chartdir.h	/^	void setArrowStem(IntArray polygon) { CPolarVectorLayer_setArrowStem(ptr, polygon.data, polygon/;"	f	class:CD_NAMESPACE::PolarVectorLayer	typeref:typename:void
setArrowStem	.\\ChartDirector\\chartdir.h	/^	void setArrowStem(IntArray polygon) { CVectorLayer_setArrowStem(ptr, polygon.data, polygon.len)/;"	f	class:CD_NAMESPACE::VectorLayer	typeref:typename:void
setAutoScale	.\\ChartDirector\\chartdir.h	/^	void setAutoScale(double topExtension = 0.1, double bottomExtension = 0.1, double zeroAffinity /;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setAxisAtOrigin	.\\ChartDirector\\chartdir.h	/^	void setAxisAtOrigin(int originMode = Chart::XYAxisAtOrigin, int symmetryMode = 0)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:void
setAxisBorder	.\\ChartDirector\\chartdir.h	/^	void setAxisBorder(int edgeColor, int raisedEffect = 0) { CColorAxis_setAxisBorder(ptr, edgeCol/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setAxisOnRight	.\\ChartDirector\\FinanceChart.h	/^    public: void setAxisOnRight(bool b)$/;"	f	class:FinanceChart	typeref:typename:void
setAxisPos	.\\ChartDirector\\chartdir.h	/^	void setAxisPos(int x, int y, int alignment) { CColorAxis_setAxisPos(ptr, x, y, alignment); }$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setBackSideBrightness	.\\ChartDirector\\chartdir.h	/^	void setBackSideBrightness(double brightness) { CSurfaceChart_setBackSideBrightness(ptr, bright/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setBackSideColor	.\\ChartDirector\\chartdir.h	/^	void setBackSideColor(int color) { CSurfaceChart_setBackSideColor(ptr, color); }$/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setBackSideLighting	.\\ChartDirector\\chartdir.h	/^	void setBackSideLighting(double ambientLight, double diffuseLight, double specularLight, double/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setBackground	.\\ChartDirector\\chartdir.h	/^	void setBackground(const char *img, int align = Chart::Center)$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:void
setBackground	.\\ChartDirector\\chartdir.h	/^	void setBackground(int color, int altBgColor = -1, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:void
setBackground	.\\ChartDirector\\chartdir.h	/^	void setBackground(int color, int edgeColor = -1, int raisedEffect = 0)$/;"	f	class:CD_NAMESPACE::Box	typeref:typename:void
setBackground	.\\ChartDirector\\chartdir.h	/^	void setBackground(int color, int edgeColor = Chart::Transparent, int raisedEffect = 0)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setBarGap	.\\ChartDirector\\chartdir.h	/^	void setBarGap(double barGap, double subBarGap = Chart::NoValue)$/;"	f	class:CD_NAMESPACE::BarLayer	typeref:typename:void
setBarShape	.\\ChartDirector\\chartdir.h	/^	void setBarShape(IntArray shape, int dataGroup = -1, int dataItem = -1)$/;"	f	class:CD_NAMESPACE::BarLayer	typeref:typename:void
setBarShape	.\\ChartDirector\\chartdir.h	/^	void setBarShape(int shape, int dataGroup = -1, int dataItem = -1)$/;"	f	class:CD_NAMESPACE::BarLayer	typeref:typename:void
setBarWidth	.\\ChartDirector\\chartdir.h	/^	void setBarWidth(int barWidth, int subBarWidth = -1)$/;"	f	class:CD_NAMESPACE::BarLayer	typeref:typename:void
setBaseLine	.\\ChartDirector\\chartdir.h	/^	void setBaseLine(double baseLine) { CLayer_setBaseLine(ptr, baseLine); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setBgColor	.\\ChartDirector\\chartdir.h	/^	void setBgColor(int c) { CDrawArea_setBgColor(ptr, c); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setBgImage	.\\ChartDirector\\chartdir.h	/^	void setBgImage(const char *img, int align = Chart::Center)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setBorder	.\\ChartDirector\\chartdir.h	/^	void setBorder(int color)	\/\/deprecated - use setBackground$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setBorderColor	.\\ChartDirector\\chartdir.h	/^	void setBorderColor(int color, int lightingEffect = 0)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setBorderColor	.\\ChartDirector\\chartdir.h	/^	void setBorderColor(int edgeColor) { CPolarLayer_setBorderColor(ptr, edgeColor); }$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setBoundingBox	.\\ChartDirector\\chartdir.h	/^	void setBoundingBox(int fillColor, int edgeColor = Chart::Transparent, int raisedEffect = 0)$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setBoxColor	.\\ChartDirector\\chartdir.h	/^	void setBoxColor(int item, int boxColor)$/;"	f	class:CD_NAMESPACE::BoxWhiskerLayer	typeref:typename:void
setBoxColors	.\\ChartDirector\\chartdir.h	/^	void setBoxColors(IntArray colors, StringArray names = StringArray())$/;"	f	class:CD_NAMESPACE::BoxWhiskerLayer	typeref:typename:void
setBoxMargin	.\\ChartDirector\\chartdir.h	/^	void setBoxMargin(int leftMargin, int rightMargin, int topMargin, int bottomMargin)$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setBoxMargin	.\\ChartDirector\\chartdir.h	/^	void setBoxMargin(int m)  { CColorAxis_setBoxMargin(ptr, m); }$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setCap	.\\ChartDirector\\chartdir.h	/^	void setCap(int radius, int fillColor, int edgeColor = Chart::LineColor)$/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:void
setCap2	.\\ChartDirector\\chartdir.h	/^	void setCap2(int backColor = 0x888888, int frontColor = 0x000000, int frontEdgeColor = 0x888888/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:void
setCell	.\\ChartDirector\\chartdir.h	/^	TextBox *setCell(int col, int row, int width, int height, const char *text)$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
setCenterLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *setCenterLabel(const char *labelTemplate = "{skip}", const char *font = "{skip}", doub/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:TextBox *
setCenterLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *setCenterLabel(const char *labelTemplate = "{skip}", const char *font = "{skip}", doub/;"	f	class:CD_NAMESPACE::PyramidLayer	typeref:typename:TextBox *
setChart	.\\ChartDirector\\chartdir.h	/^	void setChart(BaseChart *c) $/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setChart	.\\ChartViewer.cpp	/^void CChartViewer::setChart(BaseChart *c)$/;"	f	class:CChartViewer	typeref:typename:void
setChart	.\\ChartViewer.cpp	/^void CViewPortControl::setChart(BaseChart *c)$/;"	f	class:CViewPortControl	typeref:typename:void
setChartMetrics	.\\ChartDirector\\chartdir.h	/^	void setChartMetrics(const char *metrics) { CViewPortManager_setChartMetrics(ptr, metrics); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setClickToCenter	.\\ChartDirector\\chartdir.h	/^    void setClickToCenter(bool b) { setProperty(VPC_ClickToCenter, b ? 1 : 0); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setClipRect	.\\ChartDirector\\chartdir.h	/^	void setClipRect(int left, int top, int right, int bottom)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setClipping	.\\ChartDirector\\chartdir.h	/^	void setClipping(int margin = 0) { CXYChart_setClipping(ptr, margin); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:void
setCloseLoop	.\\ChartDirector\\chartdir.h	/^	void setCloseLoop(bool b)$/;"	f	class:CD_NAMESPACE::PolarLineLayer	typeref:typename:void
setCol	.\\ChartDirector\\chartdir.h	/^	void setCol(int colNo, double minValue, double maxValue)$/;"	f	class:CD_NAMESPACE::RanTable	typeref:typename:void
setCol	.\\ChartDirector\\chartdir.h	/^	void setCol(int colNo, double startValue, double minDelta, double maxDelta,$/;"	f	class:CD_NAMESPACE::RanTable	typeref:typename:void
setColor	.\\ChartDirector\\chartdir.h	/^	void setColor(int c) { CLine_setColor(ptr, c); }$/;"	f	class:CD_NAMESPACE::Line	typeref:typename:void
setColor	.\\ChartDirector\\chartdir.h	/^	void setColor(int color)$/;"	f	class:CD_NAMESPACE::PyramidLayer	typeref:typename:void
setColor	.\\ChartDirector\\chartdir.h	/^	void setColor(int color, int edgeColor = -1, int joinLineColor = -1)$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:void
setColor	.\\ChartDirector\\chartdir.h	/^	void setColor(int fillColor, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::MeterPointer	typeref:typename:void
setColor	.\\ChartDirector\\chartdir.h	/^	void setColor(int paletteEntry, int color)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setColorAxis	.\\ChartDirector\\chartdir.h	/^	ColorAxis *setColorAxis(int x, int y, int alignment, int length, int orientation) $/;"	f	class:CD_NAMESPACE::ContourLayer	typeref:typename:ColorAxis *
setColorAxis	.\\ChartDirector\\chartdir.h	/^	ColorAxis *setColorAxis(int x, int y, int alignment, int length, int orientation)$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:ColorAxis *
setColorGradient	.\\ChartDirector\\chartdir.h	/^	void setColorGradient(bool isContinuous = true, IntArray colors = IntArray(), int underflowColo/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setColorMethod	.\\ChartDirector\\chartdir.h	/^	void setColorMethod(int colorMethod, int riseColor, int fallColor = -1,$/;"	f	class:CD_NAMESPACE::HLOCLayer	typeref:typename:void
setColorScale	.\\ChartDirector\\chartdir.h	/^	virtual void setColorScale(DoubleArray colorStops, int underflowColor = -1, int overflowColor =/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setColorTable	.\\ChartDirector\\chartdir.h	/^	void setColorTable(IntArray colors, int offset)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setColorTable	.\\ChartDirector\\chartdir.h	/^	void setColorTable(const int *colors, int noOfColors, int offset)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setColors	.\\ChartDirector\\chartdir.h	/^	void setColors(IntArray colors) { setColors(0, colors); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setColors	.\\ChartDirector\\chartdir.h	/^	void setColors(const int *colors) { setColors(0, colors); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setColors	.\\ChartDirector\\chartdir.h	/^	void setColors(int axisColor, int labelColor = Chart::TextColor, int titleColor = -1,$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setColors	.\\ChartDirector\\chartdir.h	/^	void setColors(int fillColor, int edgeColor = -1, int raisedEffect = -0x7fffffff)$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:void
setColors	.\\ChartDirector\\chartdir.h	/^	void setColors(int paletteEntry, IntArray colors)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setColors	.\\ChartDirector\\chartdir.h	/^	void setColors(int paletteEntry, const int *colors)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setColors	.\\ChartDirector\\chartdir.h	/^	void setColors(int upFillColor, int upLineColor, int downFillColor, int downLineColor)$/;"	f	class:CD_NAMESPACE::CandleStickLayer	typeref:typename:void
setCols	.\\ChartDirector\\chartdir.h	/^	void setCols(int noOfCols) { CLegendBox_setCols(ptr, noOfCols); }$/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:void
setCompactAxis	.\\ChartDirector\\chartdir.h	/^	void setCompactAxis(bool b = true) { CColorAxis_setCompactAxis(ptr, b); }$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setConeSize	.\\ChartDirector\\chartdir.h	/^	void setConeSize(int cx, int cy, int radius, int height)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setContourColor	.\\ChartDirector\\chartdir.h	/^	void setContourColor(int contourColor, int minorContourColor = -1) $/;"	f	class:CD_NAMESPACE::ContourLayer	typeref:typename:void
setContourColor	.\\ChartDirector\\chartdir.h	/^	void setContourColor(int contourColor, int minorContourColor = -1)$/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setContourWidth	.\\ChartDirector\\chartdir.h	/^	void setContourWidth(int contourWidth, int minorContourWidth = -1)$/;"	f	class:CD_NAMESPACE::ContourLayer	typeref:typename:void
setData	.\\ChartDirector\\FinanceChart.h	/^    public: void setData(DoubleArray timeStamps, DoubleArray highData, DoubleArray lowData,$/;"	f	class:FinanceChart	typeref:typename:void
setData	.\\ChartDirector\\chartdir.h	/^	void setData(DoubleArray data)$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setData	.\\ChartDirector\\chartdir.h	/^	void setData(DoubleArray data, StringArray labels = StringArray())$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setData	.\\ChartDirector\\chartdir.h	/^	void setData(DoubleArray data, StringArray labels = StringArray())$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setData	.\\ChartDirector\\chartdir.h	/^	void setData(DoubleArray data, StringArray labels = StringArray(), IntArray colors = IntArray()/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:void
setData	.\\ChartDirector\\chartdir.h	/^	void setData(DoubleArray data, int color = -1, const char *name = 0)$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setData	.\\ChartDirector\\chartdir.h	/^	void setData(DoubleArray xData, DoubleArray yData, DoubleArray zData)$/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setData	.\\ChartDirector\\chartdir.h	/^	void setData(int noOfPoints, const double *data)$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setData	.\\ChartDirector\\chartdir.h	/^	void setData(int noOfPoints, const double *data, const char* const* labels = 0)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setDataColor	.\\ChartDirector\\chartdir.h	/^	void setDataColor(int dataColor, int edgeColor = -1,$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setDataCombineMethod	.\\ChartDirector\\chartdir.h	/^	void setDataCombineMethod(int m) { CLayer_setDataCombineMethod(ptr, m); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setDataGap	.\\ChartDirector\\chartdir.h	/^	void setDataGap(double gap) { CBaseBoxLayer_setDataGap(ptr, gap); }$/;"	f	class:CD_NAMESPACE::BaseBoxLayer	typeref:typename:void
setDataLabelFormat	.\\ChartDirector\\chartdir.h	/^	void setDataLabelFormat(const char *formatString)$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setDataLabelFormat	.\\ChartDirector\\chartdir.h	/^	void setDataLabelFormat(const char *formatString)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setDataLabelFormat	.\\ChartDirector\\chartdir.h	/^	void setDataLabelFormat(const char *formatString)$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setDataLabelStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *setDataLabelStyle(const char *font = 0, double fontSize = 8,$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:TextBox *
setDataLabelStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *setDataLabelStyle(const char *font = 0, double fontSize = 8,$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:TextBox *
setDataLabelStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *setDataLabelStyle(const char *font = 0, double fontSize = 8,$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:TextBox *
setDataName	.\\ChartDirector\\chartdir.h	/^	void setDataName(const char *name)$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(IntArray polygon, int size = 11, int fillColor = -1, $/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(IntArray polygon, int size = 11, int fillColor = -1, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(IntArray polygon, int size = 11, int fillColor = -1, int edgeColor = -1)$/;"	f	class:CD_NAMESPACE::ThreeDScatterGroup	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(const DrawArea *obj) { CPolarLayer_setDataSymbol3(ptr, obj->getInternalPtr()/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(const DrawArea *obj)$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(const DrawArea *obj)$/;"	f	class:CD_NAMESPACE::ThreeDScatterGroup	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(const char *image) { CPolarLayer_setDataSymbol2(ptr, image); }$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(const char *image)$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(const char *image)$/;"	f	class:CD_NAMESPACE::ThreeDScatterGroup	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(int symbol, int size = 5, int fillColor = -1, int edgeColor = -1, int lineWi/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(int symbol, int size = 5, int fillColor = -1, int edgeColor = -1, int lineWi/;"	f	class:CD_NAMESPACE::ThreeDScatterGroup	typeref:typename:void
setDataSymbol	.\\ChartDirector\\chartdir.h	/^	void setDataSymbol(int symbol, int size = 7,$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setDataWidth	.\\ChartDirector\\chartdir.h	/^	void setDataWidth(int width) { CBaseBoxLayer_setDataWidth(ptr, width); }$/;"	f	class:CD_NAMESPACE::BaseBoxLayer	typeref:typename:void
setDateCol	.\\ChartDirector\\chartdir.h	/^	void setDateCol(int i, double startTime, double tickInc, bool weekDayOnly = false)$/;"	f	class:CD_NAMESPACE::RanTable	typeref:typename:void
setDateLabelFormat	.\\ChartDirector\\FinanceChart.h	/^    public: void setDateLabelFormat(const char* yearFormat, const char* firstMonthFormat,$/;"	f	class:FinanceChart	typeref:typename:void
setDateLabelSpacing	.\\ChartDirector\\FinanceChart.h	/^    public: void setDateLabelSpacing(int labelSpacing)$/;"	f	class:FinanceChart	typeref:typename:void
setDateScale	.\\ChartDirector\\chartdir.h	/^	void setDateScale(const char *formatString = 0)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setDateScale	.\\ChartDirector\\chartdir.h	/^	void setDateScale(double lowerLimit, double upperLimit,	double majorTickInc = 0, double minorTi/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setDateScale	.\\ChartDirector\\chartdir.h	/^	void setDateScale(double lowerLimit, double upperLimit, StringArray labels)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setDefaultFonts	.\\ChartDirector\\chartdir.h	/^	void setDefaultFonts(const char *normal, const char *bold = 0, const char *italic = 0,$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setDefaultFonts	.\\ChartDirector\\chartdir.h	/^	void setDefaultFonts(const char *normal, const char *bold = 0, const char *italic = 0,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setDefaultToolTip	.\\ChartViewer.cpp	/^void CChartViewer::setDefaultToolTip(LPCTSTR text)$/;"	f	class:CChartViewer	typeref:typename:void
setDitherMethod	.\\ChartDirector\\chartdir.h	/^	void setDitherMethod(int m) { CDrawArea_setDitherMethod(ptr, m); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setDonutSize	.\\ChartDirector\\chartdir.h	/^	void setDonutSize(int x, int y, int r, int r2)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setDragBorderToResize	.\\ChartDirector\\chartdir.h	/^    void setDragBorderToResize(bool b) { setProperty(VPC_DragBorderToResize, b ? 1 : 0); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setDragInsideToMove	.\\ChartDirector\\chartdir.h	/^	void setDragInsideToMove(bool b) { setProperty(VPC_DragInsideToMove, b ? 1 : 0); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setDragOutsideToSelect	.\\ChartDirector\\chartdir.h	/^    void setDragOutsideToSelect(bool b) { setProperty(VPC_DragOutsideToSelect, b ? 1 : 0); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setDrawOnTop	.\\ChartDirector\\chartdir.h	/^	void setDrawOnTop(bool b) { CMark_setDrawOnTop(ptr, b); }$/;"	f	class:CD_NAMESPACE::Mark	typeref:typename:void
setDropLine	.\\ChartDirector\\chartdir.h	/^	void setDropLine(int dropLineColor = Chart::LineColor, int dropLineWidth = 1) $/;"	f	class:CD_NAMESPACE::ThreeDScatterGroup	typeref:typename:void
setDropShadow	.\\ChartDirector\\chartdir.h	/^	void setDropShadow(int color = 0xaaaaaa, int offsetX = 5, int offsetY = 0x7fffffff, int blurRad/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setExactContour	.\\ChartDirector\\chartdir.h	/^	void setExactContour(bool contour = true) $/;"	f	class:CD_NAMESPACE::ContourLayer	typeref:typename:void
setExactContour	.\\ChartDirector\\chartdir.h	/^	void setExactContour(bool contour, bool markContour)$/;"	f	class:CD_NAMESPACE::ContourLayer	typeref:typename:void
setExplode	.\\ChartDirector\\chartdir.h	/^	void setExplode(int distance = -1)$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:void
setExplode	.\\ChartDirector\\chartdir.h	/^	void setExplode(int sectorNo = -1, int distance = -1)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setExplodeGroup	.\\ChartDirector\\chartdir.h	/^	void setExplodeGroup(int startSector, int endSector, int distance = -1)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setExtraColors	.\\ChartDirector\\chartdir.h	/^	void setExtraColors(int upDownFillColor, int upDownLineColor, int downDownFillColor, int downDo/;"	f	class:CD_NAMESPACE::CandleStickLayer	typeref:typename:void
setFastLineMode	.\\ChartDirector\\chartdir.h	/^	void setFastLineMode(bool b = true) $/;"	f	class:CD_NAMESPACE::LineLayer	typeref:typename:void
setFontAngle	.\\ChartDirector\\chartdir.h	/^	void setFontAngle(double angle, bool vertical = false)$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setFontColor	.\\ChartDirector\\chartdir.h	/^	void setFontColor(int color) { CTextBox_setFontColor(ptr, color); }$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setFontSize	.\\ChartDirector\\chartdir.h	/^	void setFontSize(double fontHeight, double fontWidth = 0)$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setFontStyle	.\\ChartDirector\\chartdir.h	/^	void setFontStyle(const char *font, int fontIndex = 0)$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setFontTable	.\\ChartDirector\\chartdir.h	/^	void setFontTable(int index, const char *font)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setFontTable	.\\ChartDirector\\chartdir.h	/^	void setFontTable(int index, const char *font)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setFormatCondition	.\\ChartDirector\\chartdir.h	/^	void setFormatCondition(const char *condition, double operand = 0)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setFullRange	.\\ChartDirector\\chartdir.h	/^    void setFullRange(const char *id, double minValue, double maxValue)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setFunnelSize	.\\ChartDirector\\chartdir.h	/^	void setFunnelSize(int cx, int cy, int radius, int height, double tubeRadius = 0.2, double tube/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setGapColor	.\\ChartDirector\\chartdir.h	/^	void setGapColor(int fillColor) { CAreaLayer_setGapColor(ptr, fillColor); }$/;"	f	class:CD_NAMESPACE::AreaLayer	typeref:typename:void
setGapColor	.\\ChartDirector\\chartdir.h	/^	void setGapColor(int gapColor12, int gapColor21 = -1)$/;"	f	class:CD_NAMESPACE::InterLineLayer	typeref:typename:void
setGapColor	.\\ChartDirector\\chartdir.h	/^	void setGapColor(int lineColor, int lineWidth = -1)$/;"	f	class:CD_NAMESPACE::LineLayer	typeref:typename:void
setGapColor	.\\ChartDirector\\chartdir.h	/^	void setGapColor(int lineColor, int lineWidth = -1)$/;"	f	class:CD_NAMESPACE::PolarLineLayer	typeref:typename:void
setGradientShading	.\\ChartDirector\\chartdir.h	/^	void setGradientShading(double startBrightness, double endBrightness)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setGridAxis	.\\ChartDirector\\chartdir.h	/^	void setGridAxis(const Axis *xGridAxis, const Axis *yGridAxis)$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:void
setGridColor	.\\ChartDirector\\chartdir.h	/^	void setGridColor(int hGridColor, int vGridColor = Chart::Transparent,$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:void
setGridColor	.\\ChartDirector\\chartdir.h	/^	void setGridColor(int rGridColor = 0x80000000, int rGridWidth = 1, int aGridColor = 0x80000000,$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:void
setGridStyle	.\\ChartDirector\\chartdir.h	/^	void setGridStyle(bool polygonGrid, bool gridOnTop = true)$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:void
setGridWidth	.\\ChartDirector\\chartdir.h	/^	void setGridWidth(int hGridWidth, int vGridWidth = -1,$/;"	f	class:CD_NAMESPACE::PlotArea	typeref:typename:void
setHBITMAP	.\\ChartViewer.cpp	/^void CStaticHelper::setHBITMAP(CStatic *self, HBITMAP newBitMap)$/;"	f	class:CStaticHelper	typeref:typename:void
setHLOCCols	.\\ChartDirector\\chartdir.h	/^	void setHLOCCols(int i, double startValue, double minDelta, double maxDelta,$/;"	f	class:CD_NAMESPACE::RanTable	typeref:typename:void
setHTMLImageMap	.\\ChartDirector\\chartdir.h	/^	void setHTMLImageMap(const char *url, const char *queryFormat = 0, const char *extraAttr = 0)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setHTMLImageMap	.\\ChartDirector\\chartdir.h	/^	void setHTMLImageMap(const char *url, const char *queryFormat = 0, const char *extraAttr = 0)$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setHeight	.\\ChartDirector\\chartdir.h	/^	void setHeight(int height) { CTextBox_setHeight(ptr, height); }$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setIconSize	.\\ChartDirector\\chartdir.h	/^	void setIconSize(int height, int width = -1)$/;"	f	class:CD_NAMESPACE::BarLayer	typeref:typename:void
setIconSize	.\\ChartDirector\\chartdir.h	/^	void setIconSize(int height, int width = 0) { CPolarVectorLayer_setIconSize(ptr, height, width)/;"	f	class:CD_NAMESPACE::PolarVectorLayer	typeref:typename:void
setIconSize	.\\ChartDirector\\chartdir.h	/^	void setIconSize(int height, int width = 0) { CVectorLayer_setIconSize(ptr, height, width); }$/;"	f	class:CD_NAMESPACE::VectorLayer	typeref:typename:void
setImageMap	.\\ChartViewer.cpp	/^void CChartViewer::setImageMap(const char *imageMap)$/;"	f	class:CChartViewer	typeref:typename:void
setImageMapWidth	.\\ChartDirector\\chartdir.h	/^	void setImageMapWidth(int width) { CPolarLayer_setImageMapWidth(ptr, width); }$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setImageMapWidth	.\\ChartDirector\\chartdir.h	/^	void setImageMapWidth(int width) { CTrendLayer_setImageMapWidth(ptr, width); }$/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:void
setImageMapWidth	.\\ChartDirector\\chartdir.h	/^	void setImageMapWidth(int width)$/;"	f	class:CD_NAMESPACE::LineLayer	typeref:typename:void
setIndent	.\\ChartDirector\\chartdir.h	/^	void setIndent(bool indent) { CAxis_setIndent(ptr, indent); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setInterlace	.\\ChartDirector\\chartdir.h	/^	void setInterlace(bool i) { CDrawArea_setInterlace(ptr, i); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setInterpolation	.\\ChartDirector\\chartdir.h	/^	void setInterpolation(int xSamples, int ySamples = -1, bool isSmooth = true)$/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setJoinLine	.\\ChartDirector\\chartdir.h	/^	void setJoinLine(int color , int width = -1)$/;"	f	class:CD_NAMESPACE::PyramidLayer	typeref:typename:void
setJoinLine	.\\ChartDirector\\chartdir.h	/^	void setJoinLine(int color, int width = -1)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setJoinLine	.\\ChartDirector\\chartdir.h	/^	void setJoinLine(int joinLineColor, int joinLineWidth = 1)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setJoinLine	.\\ChartDirector\\chartdir.h	/^	void setJoinLine(int joinLineColor, int joinLineWidth = 1)$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:void
setJoinLineGap	.\\ChartDirector\\chartdir.h	/^	void setJoinLineGap(int pyramidGap, int pyramidMargin = -0x7fffffff, int textGap = -0x7fffffff)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setJoinLineGap	.\\ChartDirector\\chartdir.h	/^	void setJoinLineGap(int pyramidGap, int pyramidMargin = -0x7fffffff, int textGap = -0x7fffffff)$/;"	f	class:CD_NAMESPACE::PyramidLayer	typeref:typename:void
setKeyBorder	.\\ChartDirector\\chartdir.h	/^	void setKeyBorder(int edgeColor, int raisedEffect = 0)$/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:void
setKeySize	.\\ChartDirector\\chartdir.h	/^	void setKeySize(int width, int height = -1, int gap = -1)$/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:void
setKeySpacing	.\\ChartDirector\\chartdir.h	/^	void setKeySpacing(int keySpacing, int lineSpacing = -1)$/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:void
setLabelAlignment	.\\ChartDirector\\chartdir.h	/^	void setLabelAlignment(int alignment, int minLabelSpace = 3)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLabelFormat	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabelFormat(const char *format = "{label}", const char *font = "normal", int fontSi/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:TextBox *
setLabelFormat	.\\ChartDirector\\chartdir.h	/^	void setLabelFormat(const char *formatString)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLabelFormat	.\\ChartDirector\\chartdir.h	/^	void setLabelFormat(const char *formatString)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setLabelFormat	.\\ChartDirector\\chartdir.h	/^	void setLabelFormat(const char *formatString)$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:void
setLabelFormat	.\\ChartDirector\\chartdir.h	/^	void setLabelFormat(const char *mainLabelFormat) { CBaseMeter_setLabelFormat(ptr, mainLabelForm/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
setLabelGap	.\\ChartDirector\\chartdir.h	/^	void setLabelGap(int d) { CAngularAxis_setLabelGap(ptr, d); }$/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:void
setLabelGap	.\\ChartDirector\\chartdir.h	/^	void setLabelGap(int d)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLabelLayout	.\\ChartDirector\\chartdir.h	/^	void setLabelLayout(int layoutMethod, int pos = -1)$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:void
setLabelLayout	.\\ChartDirector\\chartdir.h	/^	void setLabelLayout(int layoutMethod, int pos = -1, int topBound = -1, int bottomBound = -1)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setLabelOffset	.\\ChartDirector\\chartdir.h	/^	void setLabelOffset(double offset) { CAxis_setLabelOffset(ptr, offset); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLabelPos	.\\ChartDirector\\chartdir.h	/^	void setLabelPos(bool labelInside, int labelOffset = 0) { CBaseMeter_setLabelPos(ptr, labelInsi/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
setLabelPos	.\\ChartDirector\\chartdir.h	/^	void setLabelPos(int pos, int joinLineColor = -1)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setLabelPos	.\\ChartDirector\\chartdir.h	/^	void setLabelPos(int pos, int joinLineColor = -1)$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:void
setLabelStep	.\\ChartDirector\\chartdir.h	/^	void setLabelStep(int majorTickStep, int minorTickStep = 0, int majorTickOffset = 0, int minorT/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLabelStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabelStyle(const char *font = "bold", double fontSize = -1, int fontColor = Chart::/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:TextBox *
setLabelStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabelStyle(const char *font = "bold", double fontSize = 10,$/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:TextBox *
setLabelStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabelStyle(const char *font = 0, double fontSize = 8,$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:TextBox *
setLabelStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabelStyle(const char *font = 0, double fontSize = 8,$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:TextBox *
setLabelStyle	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabelStyle(const char *font = 0, double fontSize = 8,$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:TextBox *
setLabels	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabels(DoubleArray labels, const char *formatString = 0)$/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:TextBox *
setLabels	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabels(DoubleArray labels, const char *formatString = 0)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:TextBox *
setLabels	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabels(StringArray labels)$/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:TextBox *
setLabels	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabels(StringArray labels)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:TextBox *
setLabels	.\\ChartDirector\\chartdir.h	/^	TextBox *setLabels(int noOfLabels, const char* const* text) \/\/obsoleted - use setLabels(Strin/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:TextBox *
setLayerBorder	.\\ChartDirector\\chartdir.h	/^	void setLayerBorder(int color, int width = -1)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setLayerBorder	.\\ChartDirector\\chartdir.h	/^	void setLayerBorder(int color, int width = -1)$/;"	f	class:CD_NAMESPACE::PyramidLayer	typeref:typename:void
setLayerGap	.\\ChartDirector\\chartdir.h	/^	void setLayerGap(double layerGap)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setLayerGap	.\\ChartDirector\\chartdir.h	/^	void setLayerGap(double layerGap)$/;"	f	class:CD_NAMESPACE::PyramidLayer	typeref:typename:void
setLayoutAspectMultiplier	.\\ChartDirector\\chartdir.h	/^	void setLayoutAspectMultiplier(double multiplier)$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:void
setLayoutAspectRatio	.\\ChartDirector\\chartdir.h	/^    void setLayoutAspectRatio(double ratio)$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:void
setLayoutMethod	.\\ChartDirector\\chartdir.h	/^	void setLayoutMethod(int layoutMethod, int layoutDirection = Chart::TopLeft, int swapXY = 0)$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:void
setLeftLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *setLeftLabel(const char *labelTemplate = "{skip}", const char *font = "{skip}", double/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:TextBox *
setLeftLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *setLeftLabel(const char *labelTemplate = "{skip}", const char *font = "{skip}", double/;"	f	class:CD_NAMESPACE::PyramidLayer	typeref:typename:TextBox *
setLegend	.\\ChartDirector\\chartdir.h	/^	void setLegend(int m) { CLayer_setLegend(ptr, m); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setLegendIcon	.\\ChartDirector\\chartdir.h	/^	void setLegendIcon(int width, int height = -1, int color = -1) $/;"	f	class:CD_NAMESPACE::ThreeDScatterGroup	typeref:typename:void
setLegendOrder	.\\ChartDirector\\chartdir.h	/^	void setLegendOrder(int dataSetOrder, int layerOrder = -1)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setLegendStyle	.\\ChartDirector\\FinanceChart.h	/^    public: void setLegendStyle(const char* font, double fontSize, int fontColor, int bgColor)$/;"	f	class:FinanceChart	typeref:typename:void
setLength	.\\ChartDirector\\chartdir.h	/^	void setLength(int length) { CAxis_setLength(ptr, length); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLevels	.\\ChartDirector\\chartdir.h	/^	void setLevels(int maxLevels) { CColorAxis_setLevels(ptr, maxLevels); }$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setLicenseCode	.\\ChartDirector\\chartdir.h	/^	static inline bool setLicenseCode(const char *licCode, char *buffer = 0)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:bool
setLicenseCode	.\\ChartDirector\\chartdir.h	/^static inline bool setLicenseCode(const char *licCode, char *buffer = 0)$/;"	f	namespace:CD_NAMESPACE	typeref:typename:bool
setLicenseFile	.\\ChartDirector\\chartdir.h	/^	static inline bool setLicenseFile(const char *filename = 0, char *buffer = 0)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:bool
setLicenseFile	.\\ChartDirector\\chartdir.h	/^static inline bool setLicenseFile(const char *filename = 0, char *buffer = 0)$/;"	f	namespace:CD_NAMESPACE	typeref:typename:bool
setLighting	.\\ChartDirector\\chartdir.h	/^	void setLighting(double ambientIntensity = 0.5, double diffuseIntensity = 0.5, double specularI/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setLighting	.\\ChartDirector\\chartdir.h	/^	void setLighting(double ambientIntensity, double diffuseIntensity, double specularIntensity, do/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setLineColor	.\\ChartDirector\\chartdir.h	/^	void setLineColor(int edgeColor, int joinLineColor = -1)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setLineStyleKey	.\\ChartDirector\\chartdir.h	/^	void setLineStyleKey(bool b = true) { CLegendBox_setLineStyleKey(ptr, b); }$/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:void
setLineWidth	.\\ChartDirector\\chartdir.h	/^	void setLineWidth(int axisWidth, int majorTickWidth = 1, int minorTickWidth = 1, int microTickW/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
setLineWidth	.\\ChartDirector\\chartdir.h	/^	void setLineWidth(int w) { CLayer_setLineWidth(ptr, w); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setLineWidth	.\\ChartDirector\\chartdir.h	/^	void setLineWidth(int w) { CMark_setLineWidth(ptr, w); }$/;"	f	class:CD_NAMESPACE::Mark	typeref:typename:void
setLineWidth	.\\ChartDirector\\chartdir.h	/^	void setLineWidth(int w) { CPolarLayer_setLineWidth(ptr, w); }$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setLineWidth	.\\ChartDirector\\chartdir.h	/^	void setLineWidth(int w)$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setLinearScale	.\\ChartDirector\\chartdir.h	/^	void setLinearScale(const char *formatString = 0)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLinearScale	.\\ChartDirector\\chartdir.h	/^	void setLinearScale(double lowerLimit, double upperLimit, StringArray labels)$/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:void
setLinearScale	.\\ChartDirector\\chartdir.h	/^	void setLinearScale(double lowerLimit, double upperLimit, StringArray labels)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLinearScale	.\\ChartDirector\\chartdir.h	/^	void setLinearScale(double lowerLimit, double upperLimit, double majorTickInc = 0, double minor/;"	f	class:CD_NAMESPACE::AngularAxis	typeref:typename:void
setLinearScale	.\\ChartDirector\\chartdir.h	/^	void setLinearScale(double lowerLimit, double upperLimit, double majorTickInc = 0, double minor/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLogScale	.\\ChartDirector\\FinanceChart.h	/^    public: void setLogScale(bool b)$/;"	f	class:FinanceChart	typeref:typename:void
setLogScale	.\\ChartDirector\\chartdir.h	/^	void setLogScale(bool logScale) \/\/obsoleted - use setLogScale(const char *)\/setLinearScale(c/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLogScale	.\\ChartDirector\\chartdir.h	/^	void setLogScale(const char *formatString = 0)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLogScale	.\\ChartDirector\\chartdir.h	/^	void setLogScale(double lowerLimit, double upperLimit, StringArray labels)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setLogScale	.\\ChartDirector\\chartdir.h	/^	void setLogScale(double lowerLimit, double upperLimit, double majorTickInc = 0, double minorTic/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setMainChart	.\\ChartDirector\\chartdir.h	/^	void setMainChart(const BaseChart *c) $/;"	f	class:CD_NAMESPACE::MultiChart	typeref:typename:void
setMapLevel	.\\ChartDirector\\chartdir.h	/^	void setMapLevel(int level)$/;"	f	class:CD_NAMESPACE::TreeMapChart	typeref:typename:void
setMargin	.\\ChartDirector\\chartdir.h	/^	void setMargin(int leftMargin, int rightMargin, int topMargin, int bottomMargin)$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setMargin	.\\ChartDirector\\chartdir.h	/^	void setMargin(int m)  { CTextBox_setMargin(ptr, m); }$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setMargin	.\\ChartDirector\\chartdir.h	/^	void setMargin(int topMargin, int bottomMargin = 0)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setMargins	.\\ChartDirector\\FinanceChart.h	/^    public: void setMargins(int leftMargin, int topMargin, int rightMargin, int bottomMargin)$/;"	f	class:FinanceChart	typeref:typename:void
setMarkColor	.\\ChartDirector\\chartdir.h	/^	void setMarkColor(int lineColor, int textColor = -1, int tickColor = -1)$/;"	f	class:CD_NAMESPACE::Mark	typeref:typename:void
setMaxWidth	.\\ChartDirector\\chartdir.h	/^	void setMaxWidth(int maxWidth) { CTextBox_setMaxWidth(ptr, maxWidth); }$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setMeter	.\\ChartDirector\\chartdir.h	/^	void setMeter(int cx, int cy, int radius, double startAngle, double endAngle)$/;"	f	class:CD_NAMESPACE::AngularMeter	typeref:typename:void
setMeter	.\\ChartDirector\\chartdir.h	/^	void setMeter(int leftX, int topY, int width, int height, int axisPos = Chart::Left, bool isRev/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:void
setMeterColors	.\\ChartDirector\\chartdir.h	/^	void setMeterColors(int axisColor, int labelColor = -1, int tickColor = -1)$/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
setMinImageMapSize	.\\ChartDirector\\chartdir.h	/^	void setMinImageMapSize(int s)$/;"	f	class:CD_NAMESPACE::BarLayer	typeref:typename:void
setMinImageMapSize	.\\ChartDirector\\chartdir.h	/^	void setMinImageMapSize(int size) { CBaseBoxLayer_setMinImageMapSize(ptr, size); }$/;"	f	class:CD_NAMESPACE::BaseBoxLayer	typeref:typename:void
setMinLabelSize	.\\ChartDirector\\chartdir.h	/^	void setMinLabelSize(int s) { CAreaLayer_setMinLabelSize(ptr, s); }$/;"	f	class:CD_NAMESPACE::AreaLayer	typeref:typename:void
setMinLabelSize	.\\ChartDirector\\chartdir.h	/^	void setMinLabelSize(int s)$/;"	f	class:CD_NAMESPACE::BarLayer	typeref:typename:void
setMinTickInc	.\\ChartDirector\\chartdir.h	/^	void setMinTickInc(double inc) { CAxis_setMinTickInc(ptr, inc); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setMinimumDrag	.\\ChartViewer.cpp	/^void CChartViewer::setMinimumDrag(int offset)$/;"	f	class:CChartViewer	typeref:typename:void
setMonotonicity	.\\ChartDirector\\chartdir.h	/^	void setMonotonicity(int m) { CSplineLayer_setMonotonicity(ptr, m); }$/;"	f	class:CD_NAMESPACE::SplineLayer	typeref:typename:void
setMonthNames	.\\ChartDirector\\chartdir.h	/^	void setMonthNames(StringArray names)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setMouseMargin	.\\ChartDirector\\chartdir.h	/^	void setMouseMargin(int mouseMargin, int cornerMargin)  $/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setMouseUsage	.\\ChartViewer.cpp	/^void CChartViewer::setMouseUsage(int mouseUsage)$/;"	f	class:CChartViewer	typeref:typename:void
setMouseWheelZoomRatio	.\\ChartViewer.cpp	/^void CChartViewer::setMouseWheelZoomRatio(double ratio)$/;"	f	class:CChartViewer	typeref:typename:void
setMultiFormat	.\\ChartDirector\\chartdir.h	/^	void setMultiFormat(int filter1, const char *format1, int filter2, const char *format2, int lab/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setMultiFormat	.\\ChartDirector\\chartdir.h	/^	void setMultiFormat(int filterId, const char *formatString, int labelSpan = 1, bool promoteFirs/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setNumberFormat	.\\ChartDirector\\chartdir.h	/^	void setNumberFormat(char thousandSeparator = '~', char decimalPointChar = '.', char signChar =/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setNumberLabelFormat	.\\ChartDirector\\FinanceChart.h	/^    public: void setNumberLabelFormat(const char* formatString)$/;"	f	class:FinanceChart	typeref:typename:void
setOffset	.\\ChartDirector\\chartdir.h	/^	void setOffset(int x, int y) { CAxis_setOffset(ptr, x, y); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setOutputOptions	.\\ChartDirector\\chartdir.h	/^	void setOutputOptions(const char *options) $/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setOutputOptions	.\\ChartDirector\\chartdir.h	/^	void setOutputOptions(const char *options) { CDrawArea_setOutputOptions(ptr, options); } $/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setOverlapRatio	.\\ChartDirector\\chartdir.h	/^	void setOverlapRatio(double overlapRatio, bool firstOnTop = true)$/;"	f	class:CD_NAMESPACE::BarLayer	typeref:typename:void
setPaletteMode	.\\ChartDirector\\chartdir.h	/^	void setPaletteMode(int p) { CDrawArea_setPaletteMode(ptr, p); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setPercentageAxis	.\\ChartDirector\\FinanceChart.h	/^    public: Axis* setPercentageAxis()$/;"	f	class:FinanceChart	typeref:typename:Axis *
setPerspective	.\\ChartDirector\\chartdir.h	/^	void setPerspective(double perspective)$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:void
setPieSize	.\\ChartDirector\\chartdir.h	/^	void setPieSize(int x, int y, int r)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setPlotArea	.\\ChartDirector\\chartdir.h	/^	PlotArea *setPlotArea(int x, int y, int width, int height,$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:PlotArea *
setPlotArea	.\\ChartDirector\\chartdir.h	/^	void setPlotArea(int x, int y, int r, int bgColor = Chart::Transparent,$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:void
setPlotArea	.\\ChartDirector\\chartdir.h	/^	void setPlotArea(int x, int y, int width, int height)$/;"	f	class:CD_NAMESPACE::TreeMapChart	typeref:typename:void
setPlotAreaBg	.\\ChartDirector\\chartdir.h	/^	void setPlotAreaBg(int bgColor1, int bgColor2 = -1, bool altRings = true)$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:void
setPlotAreaBorder	.\\ChartDirector\\FinanceChart.h	/^    public: void setPlotAreaBorder(int borderColor, int borderGap)$/;"	f	class:FinanceChart	typeref:typename:void
setPlotAreaMouseMargin	.\\ChartDirector\\chartdir.h	/^	void setPlotAreaMouseMargin(int leftMargin, int rightMargin, int topMargin, int bottomMargin)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setPlotAreaStyle	.\\ChartDirector\\FinanceChart.h	/^    public: void setPlotAreaStyle(int bgColor, int majorHGridColor, int majorVGridColor,$/;"	f	class:FinanceChart	typeref:typename:void
setPlotRegion	.\\ChartDirector\\chartdir.h	/^	void setPlotRegion(int cx, int cy, int xWidth, int yDepth, int zHeight)$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:void
setPos	.\\ChartDirector\\chartdir.h	/^	void setPos(double value) { CMeterPointer_setPos(ptr, value); }$/;"	f	class:CD_NAMESPACE::MeterPointer	typeref:typename:void
setPos	.\\ChartDirector\\chartdir.h	/^	void setPos(int x, int y) { CBox_setPos(ptr, x, y); }$/;"	f	class:CD_NAMESPACE::Box	typeref:typename:void
setPos	.\\ChartDirector\\chartdir.h	/^	void setPos(int x, int y, int alignment = Chart::TopLeft)$/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:void
setPos	.\\ChartDirector\\chartdir.h	/^	void setPos(int x1, int y1, int x2, int y2) { CLine_setPos(ptr, x1, y1, x2, y2); }$/;"	f	class:CD_NAMESPACE::Line	typeref:typename:void
setPos	.\\ChartDirector\\chartdir.h	/^    void setPos(int x, int y, int w, int h)$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:void
setProperty	.\\ChartDirector\\chartdir.h	/^	void setProperty(int attr, int value) $/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setPyramidSides	.\\ChartDirector\\chartdir.h	/^	void setPyramidSides(int noOfSides)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setPyramidSize	.\\ChartDirector\\chartdir.h	/^	void setPyramidSize(int cx, int cy, int radius, int height)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setRail	.\\ChartDirector\\chartdir.h	/^	void setRail(int railColor, int railWidth = 2, int railOffset = 6)$/;"	f	class:CD_NAMESPACE::LinearMeter	typeref:typename:void
setRectVisible	.\\ChartViewer.cpp	/^void CChartViewer::setRectVisible(bool b)$/;"	f	class:CChartViewer	typeref:typename:void
setRegressionType	.\\ChartDirector\\chartdir.h	/^	void setRegressionType(int regressionType) { CTrendLayer_setRegressionType(ptr, regressionType)/;"	f	class:CD_NAMESPACE::TrendLayer	typeref:typename:void
setReverse	.\\ChartDirector\\chartdir.h	/^	void setReverse(bool b = true) { CLegendBox_setReverse(ptr, b); }$/;"	f	class:CD_NAMESPACE::LegendBox	typeref:typename:void
setReverse	.\\ChartDirector\\chartdir.h	/^	void setReverse(bool b = true)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setRightLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *setRightLabel(const char *labelTemplate = "{skip}", const char *font = "{skip}", doubl/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:TextBox *
setRightLabel	.\\ChartDirector\\chartdir.h	/^	TextBox *setRightLabel(const char *labelTemplate = "{skip}", const char *font = "{skip}", doubl/;"	f	class:CD_NAMESPACE::PyramidLayer	typeref:typename:TextBox *
setRoundedCorners	.\\ChartDirector\\chartdir.h	/^	void setRoundedCorners(int r1 = -0x7fffffff, int r2 = -0x7fffffff, int r3 = -0x7fffffff, int r4/;"	f	class:CD_NAMESPACE::BarLayer	typeref:typename:void
setRoundedCorners	.\\ChartDirector\\chartdir.h	/^	void setRoundedCorners(int r1 = -0x7fffffff, int r2 = -0x7fffffff, int r3 = -0x7fffffff, int r4/;"	f	class:CD_NAMESPACE::BaseBoxLayer	typeref:typename:void
setRoundedCorners	.\\ChartDirector\\chartdir.h	/^	void setRoundedCorners(int r1 = 10, int r2 = -1, int r3 = -1, int r4 = -1)$/;"	f	class:CD_NAMESPACE::Box	typeref:typename:void
setRoundedCorners	.\\ChartDirector\\chartdir.h	/^	void setRoundedCorners(int r1 = 10, int r2 = -1, int r3 = -1, int r4 = -1)$/;"	f	class:CD_NAMESPACE::ColorAxis	typeref:typename:void
setRoundedFrame	.\\ChartDirector\\chartdir.h	/^	void setRoundedFrame(int extColor = 0xffffff, int r1 = 10, int r2 = -1, int r3 = -1, int r4 = -/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setRounding	.\\ChartDirector\\chartdir.h	/^	void setRounding(bool roundMin, bool roundMax)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setScale	.\\ChartDirector\\chartdir.h	/^	void setScale(double lowerLimit, double upperLimit, DoubleArray labels, const char *formatStrin/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
setScale	.\\ChartDirector\\chartdir.h	/^	void setScale(double lowerLimit, double upperLimit, StringArray labels)$/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
setScale	.\\ChartDirector\\chartdir.h	/^	void setScale(double lowerLimit, double upperLimit, double majorTickInc = 0, double minorTickIn/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
setScrollDirection	.\\ChartViewer.cpp	/^void CChartViewer::setScrollDirection(int direction)$/;"	f	class:CChartViewer	typeref:typename:void
setSearchPath	.\\ChartDirector\\chartdir.h	/^	void setSearchPath(const char *path) { CDrawArea_setSearchPath(ptr, path); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setSearchPath	.\\ChartDirector\\chartdir.h	/^	void setSearchPath(const char *path)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setSectorStyle	.\\ChartDirector\\chartdir.h	/^	void setSectorStyle(int shadingMethod, int edgeColor = -1, int edgeWidth = -1)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setSelectionBorderColor	.\\ChartDirector\\chartdir.h	/^	void setSelectionBorderColor(int c)  { setProperty(VPC_SelectBoxLineColor, c); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setSelectionBorderColor	.\\ChartViewer.cpp	/^void CChartViewer::setSelectionBorderColor(COLORREF	c)$/;"	f	class:CChartViewer	typeref:typename:void
setSelectionBorderWidth	.\\ChartDirector\\chartdir.h	/^	void setSelectionBorderWidth(int w)  { setProperty(VPC_SelectBoxLineWidth, w); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setSelectionBorderWidth	.\\ChartViewer.cpp	/^void CChartViewer::setSelectionBorderWidth(int width)$/;"	f	class:CChartViewer	typeref:typename:void
setShadingMode	.\\ChartDirector\\chartdir.h	/^	void setShadingMode(int shadingMode, int wireWidth = 1)$/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setShape	.\\ChartDirector\\chartdir.h	/^	void setShape(IntArray pointerCoor, double lengthRatio = Chart::NoValue, double widthRatio = Ch/;"	f	class:CD_NAMESPACE::MeterPointer	typeref:typename:void
setShape	.\\ChartDirector\\chartdir.h	/^	void setShape(int pointerType, double lengthRatio = Chart::NoValue, double widthRatio = Chart::/;"	f	class:CD_NAMESPACE::MeterPointer	typeref:typename:void
setShapeAndOffset	.\\ChartDirector\\chartdir.h	/^	void setShapeAndOffset(int pointerType, double startOffset = Chart::NoValue, double endOffset =/;"	f	class:CD_NAMESPACE::MeterPointer	typeref:typename:void
setShapeAndOffset	.\\ChartDirector\\chartdir.h	/^    void setShapeAndOffset(IntArray pointerCoor, double startOffset = Chart::NoValue, double end/;"	f	class:CD_NAMESPACE::MeterPointer	typeref:typename:void
setSize	.\\ChartDirector\\chartdir.h	/^	void setSize(int w, int h) { CBox_setSize(ptr, w, h); }$/;"	f	class:CD_NAMESPACE::Box	typeref:typename:void
setSize	.\\ChartDirector\\chartdir.h	/^	void setSize(int width, int height) { CBaseChart_setSize(ptr, width, height); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setSize	.\\ChartDirector\\chartdir.h	/^	void setSize(int width, int height, int bgColor = 0xffffff)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setSmoothInterpolation	.\\ChartDirector\\chartdir.h	/^	void setSmoothInterpolation(bool b) { CContourLayer_setSmoothInterpolation(ptr, b); }$/;"	f	class:CD_NAMESPACE::ContourLayer	typeref:typename:void
setSorting	.\\ChartDirector\\chartdir.h	/^	void setSorting(int mode)$/;"	f	class:CD_NAMESPACE::TreeMapNode	typeref:typename:void
setStartAngle	.\\ChartDirector\\chartdir.h	/^	void setStartAngle(double startAngle, bool clockWise = true)$/;"	f	class:CD_NAMESPACE::PieChart	typeref:typename:void
setStartAngle	.\\ChartDirector\\chartdir.h	/^	void setStartAngle(double startAngle, bool clockwise = true)$/;"	f	class:CD_NAMESPACE::PolarChart	typeref:typename:void
setStyle	.\\ChartDirector\\chartdir.h	/^	void setStyle(int shadingMethod, int edgeColor = -1, int edgeWidth = -1)$/;"	f	class:CD_NAMESPACE::Sector	typeref:typename:void
setSurfaceAxisGrid	.\\ChartDirector\\chartdir.h	/^	void setSurfaceAxisGrid(int majorXGridColor, int majorYGridColor = -1, int minorXGridColor = -1/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setSurfaceDataGrid	.\\ChartDirector\\chartdir.h	/^	void setSurfaceDataGrid(int xGridColor, int yGridColor = -1)$/;"	f	class:CD_NAMESPACE::SurfaceChart	typeref:typename:void
setSymbolOffset	.\\ChartDirector\\chartdir.h	/^	void setSymbolOffset(int offsetX, int offsetY)$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setSymbolOffset	.\\ChartDirector\\chartdir.h	/^	void setSymbolOffset(int offsetX, int offsetY)$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setSymbolOffset	.\\ChartDirector\\chartdir.h	/^	void setSymbolOffset(int offsetX, int offsetY)$/;"	f	class:CD_NAMESPACE::ThreeDScatterGroup	typeref:typename:void
setSymbolScale	.\\ChartDirector\\chartdir.h	/^	void setSymbolScale(DoubleArray zData, int scaleType = Chart::PixelScale)$/;"	f	class:CD_NAMESPACE::PolarLayer	typeref:typename:void
setSymbolScale	.\\ChartDirector\\chartdir.h	/^	void setSymbolScale(DoubleArray zDataX, int scaleTypeX = Chart::PixelScale,$/;"	f	class:CD_NAMESPACE::LineLayer	typeref:typename:void
setTension	.\\ChartDirector\\chartdir.h	/^	void setTension(double tension) { CPolarSplineAreaLayer_setTension(ptr, tension); }$/;"	f	class:CD_NAMESPACE::PolarSplineAreaLayer	typeref:typename:void
setTension	.\\ChartDirector\\chartdir.h	/^	void setTension(double tension) { CPolarSplineLineLayer_setTension(ptr, tension); }$/;"	f	class:CD_NAMESPACE::PolarSplineLineLayer	typeref:typename:void
setTension	.\\ChartDirector\\chartdir.h	/^	void setTension(double tension) { CSplineLayer_setTension(ptr, tension); }$/;"	f	class:CD_NAMESPACE::SplineLayer	typeref:typename:void
setText	.\\ChartDirector\\chartdir.h	/^	TextBox *setText(int col, int row, const char *text) $/;"	f	class:CD_NAMESPACE::CDMLTable	typeref:typename:TextBox *
setText	.\\ChartDirector\\chartdir.h	/^	void setText(const char *text) { CTextBox_setText(ptr, text); }$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setThickFrame	.\\ChartDirector\\chartdir.h	/^	void setThickFrame(int thickness, int frameColor = -1, int outerEdgeColor = -1, int innerEdgeCo/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setTickColor	.\\ChartDirector\\chartdir.h	/^	void setTickColor(int majorTickColor, int minorTickColor = -1)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setTickDensity	.\\ChartDirector\\chartdir.h	/^	void setTickDensity(int majorTickSpacing, int minorTickSpacing = -1)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setTickLength	.\\ChartDirector\\chartdir.h	/^	void setTickLength(int majorLen, int minorLen = -0x7fffffff, int microLen = -0x7fffffff)$/;"	f	class:CD_NAMESPACE::BaseMeter	typeref:typename:void
setTickLength	.\\ChartDirector\\chartdir.h	/^	void setTickLength(int majorTickLen)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setTickLength	.\\ChartDirector\\chartdir.h	/^	void setTickLength(int majorTickLen, int minorTickLen)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setTickOffset	.\\ChartDirector\\chartdir.h	/^	void setTickOffset(double offset) { CAxis_setTickOffset(ptr, offset); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setTickWidth	.\\ChartDirector\\chartdir.h	/^	void setTickWidth(int majorTickWidth, int minorTickWidth = -1)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setTitle	.\\ChartDirector\\chartdir.h	/^	TextBox *setTitle(const char *text, const char *font = 0,$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:TextBox *
setTitlePos	.\\ChartDirector\\chartdir.h	/^	void setTitlePos(int alignment, int titleGap = 3)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setToolTipDateFormat	.\\ChartDirector\\FinanceChart.h	/^    public: void setToolTipDateFormat(const char* monthFormat, const char* dayFormat,$/;"	f	class:FinanceChart	typeref:typename:void
setTopMargin	.\\ChartDirector\\chartdir.h	/^	void setTopMargin(int topMargin) \/\/obsoleted - use setMargin(int, int)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setTransparentColor	.\\ChartDirector\\chartdir.h	/^	void setTransparentColor(int c) { CDrawArea_setTransparentColor(ptr, c); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
setTransparentColor	.\\ChartDirector\\chartdir.h	/^	void setTransparentColor(int c)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setTrimData	.\\ChartDirector\\chartdir.h	/^	void setTrimData(int startPos, int len = 0x7fffffff) { CXYChart_setTrimData(ptr, startPos, len)/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:void
setTruncate	.\\ChartDirector\\chartdir.h	/^	void setTruncate(int maxWidth, int maxLines = 1) $/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setUpdateInterval	.\\ChartViewer.cpp	/^void CChartViewer::setUpdateInterval(int interval)$/;"	f	class:CChartViewer	typeref:typename:void
setUseYAxis	.\\ChartDirector\\chartdir.h	/^	void setUseYAxis(const Axis* a) { CDataSet_setUseYAxis(ptr, a->getInternalPtr()); }$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setUseYAxis	.\\ChartDirector\\chartdir.h	/^	void setUseYAxis(const Axis* a) { CLayer_setUseYAxis(ptr, a->getInternalPtr()); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setUseYAxis2	.\\ChartDirector\\chartdir.h	/^	void setUseYAxis2(bool b = true) { CDataSet_setUseYAxis2(ptr, b); }$/;"	f	class:CD_NAMESPACE::DataSet	typeref:typename:void
setUseYAxis2	.\\ChartDirector\\chartdir.h	/^	void setUseYAxis2(bool b = true) { CLayer_setUseYAxis2(ptr, b); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setValue	.\\ChartDirector\\chartdir.h	/^	void setValue(double value) { CMark_setValue(ptr, value); }$/;"	f	class:CD_NAMESPACE::Mark	typeref:typename:void
setVector	.\\ChartDirector\\chartdir.h	/^	void setVector(DoubleArray lengths, DoubleArray directions, int lengthScale = Chart::PixelScale/;"	f	class:CD_NAMESPACE::PolarVectorLayer	typeref:typename:void
setVector	.\\ChartDirector\\chartdir.h	/^	void setVector(DoubleArray lengths, DoubleArray directions, int lengthScale = Chart::PixelScale/;"	f	class:CD_NAMESPACE::VectorLayer	typeref:typename:void
setVectorMargin	.\\ChartDirector\\chartdir.h	/^	void setVectorMargin(double startMargin, double endMargin = Chart::NoValue)$/;"	f	class:CD_NAMESPACE::PolarVectorLayer	typeref:typename:void
setVectorMargin	.\\ChartDirector\\chartdir.h	/^	void setVectorMargin(double startMargin, double endMargin = Chart::NoValue)$/;"	f	class:CD_NAMESPACE::VectorLayer	typeref:typename:void
setViewAngle	.\\ChartDirector\\chartdir.h	/^	void setViewAngle(double elevation, double rotation = 0, double twist = 0)$/;"	f	class:CD_NAMESPACE::PyramidChart	typeref:typename:void
setViewAngle	.\\ChartDirector\\chartdir.h	/^	void setViewAngle(double elevation, double rotation = 0, double twist = 0)$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:void
setViewPortBorderColor	.\\ChartDirector\\chartdir.h	/^	void setViewPortBorderColor(int c)  { setProperty(VPC_VpEdgeColor, c); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setViewPortBorderWidth	.\\ChartDirector\\chartdir.h	/^	void setViewPortBorderWidth(int w)  { setProperty(VPC_VpBorderWidth, w); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setViewPortControl	.\\ChartViewer.cpp	/^void CChartViewer::setViewPortControl(CViewPortControl *vpc)$/;"	f	class:CChartViewer	typeref:typename:void
setViewPortExternalColor	.\\ChartDirector\\chartdir.h	/^	void setViewPortExternalColor(int c)  { setProperty(VPC_VpExternalColor, c); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setViewPortFillColor	.\\ChartDirector\\chartdir.h	/^	void setViewPortFillColor(int c)  { setProperty(VPC_VpFillColor, c); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setViewPortHeight	.\\ChartDirector\\chartdir.h	/^	void setViewPortHeight(double height) { CViewPortManager_setViewPortHeight(ptr, height); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setViewPortLeft	.\\ChartDirector\\chartdir.h	/^	void setViewPortLeft(double left) { CViewPortManager_setViewPortLeft(ptr, left); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setViewPortManager	.\\ChartDirector\\chartdir.h	/^	void setViewPortManager(ViewPortManager *m)$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
setViewPortTop	.\\ChartDirector\\chartdir.h	/^	void setViewPortTop(double top) { CViewPortManager_setViewPortTop(ptr, top); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setViewPortWidth	.\\ChartDirector\\chartdir.h	/^	void setViewPortWidth(double width) { CViewPortManager_setViewPortWidth(ptr, width); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setViewer	.\\ChartViewer.cpp	/^void CViewPortControl::setViewer(CChartViewer *viewer)$/;"	f	class:CViewPortControl	typeref:typename:void
setWallColor	.\\ChartDirector\\chartdir.h	/^	void setWallColor(int xyColor, int yzColor = -1, int zxColor = -1, int borderColor = -1)$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:void
setWallGrid	.\\ChartDirector\\chartdir.h	/^	void setWallGrid(int majorXGridColor, int majorYGridColor = -1, int majorZGridColor = -1, $/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:void
setWallThickness	.\\ChartDirector\\chartdir.h	/^	void setWallThickness(int xyThickness, int yzThickness = -1, int zxThickness = -1)$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:void
setWallVisibility	.\\ChartDirector\\chartdir.h	/^	void setWallVisibility(bool xyVisible, bool yzVisible, bool zxVisible)$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:void
setWallpaper	.\\ChartDirector\\chartdir.h	/^	void setWallpaper(const char *img) { CBaseChart_setWallpaper(ptr, img); }$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setWeekDayNames	.\\ChartDirector\\chartdir.h	/^	void setWeekDayNames(StringArray names)$/;"	f	class:CD_NAMESPACE::BaseChart	typeref:typename:void
setWhiskerBrightness	.\\ChartDirector\\chartdir.h	/^	void setWhiskerBrightness(double whiskerBrightness)$/;"	f	class:CD_NAMESPACE::BoxWhiskerLayer	typeref:typename:void
setWidth	.\\ChartDirector\\chartdir.h	/^	void setWidth(int w) { CLine_setWidth(ptr, w); }$/;"	f	class:CD_NAMESPACE::Line	typeref:typename:void
setWidth	.\\ChartDirector\\chartdir.h	/^	void setWidth(int width) { CAxis_setWidth(ptr, width); }$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
setWidth	.\\ChartDirector\\chartdir.h	/^	void setWidth(int width) { CTextBox_setWidth(ptr, width); }	$/;"	f	class:CD_NAMESPACE::TextBox	typeref:typename:void
setXAxisOnTop	.\\ChartDirector\\chartdir.h	/^	void setXAxisOnTop(bool b = true) { CXYChart_setXAxisOnTop(ptr, b); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:void
setXAxisStyle	.\\ChartDirector\\FinanceChart.h	/^    public: void setXAxisStyle(const char* font, double fontSize, int fontColor, double fontAngl/;"	f	class:FinanceChart	typeref:typename:void
setXData	.\\ChartDirector\\chartdir.h	/^	void setXData(DoubleArray xData) { CLayer_setXData(ptr, xData.data, xData.len); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setXData	.\\ChartDirector\\chartdir.h	/^	void setXData(double minValue, double maxValue) { CLayer_setXData2(ptr, minValue, maxValue); }$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:void
setXLabels	.\\ChartDirector\\FinanceChart.h	/^    private: void setXLabels(Axis* a)$/;"	f	class:FinanceChart	typeref:typename:void
setYAxisOnRight	.\\ChartDirector\\chartdir.h	/^	void setYAxisOnRight(bool b = true) { CXYChart_setYAxisOnRight(ptr, b); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:void
setYAxisStyle	.\\ChartDirector\\FinanceChart.h	/^    public: void setYAxisStyle(const char* font, double fontSize, int fontColor, int axisMargin)$/;"	f	class:FinanceChart	typeref:typename:void
setZAxisPos	.\\ChartDirector\\chartdir.h	/^	void setZAxisPos(int pos) { CThreeDChart_setZAxisPos(ptr, pos); }$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:void
setZBounds	.\\ChartDirector\\chartdir.h	/^	void setZBounds(double minZ, double maxZ) $/;"	f	class:CD_NAMESPACE::ContourLayer	typeref:typename:void
setZData	.\\ChartDirector\\chartdir.h	/^	void setZData(DoubleArray zData) { CContourLayer_setZData(ptr, zData.data, zData.len); }$/;"	f	class:CD_NAMESPACE::ContourLayer	typeref:typename:void
setZOrder	.\\ChartDirector\\chartdir.h	/^	void setZOrder(int z) { CDrawObj_setZOrder(ptr, z); }$/;"	f	class:CD_NAMESPACE::DrawObj	typeref:typename:void
setZoomDirection	.\\ChartViewer.cpp	/^void CChartViewer::setZoomDirection(int	direction)$/;"	f	class:CChartViewer	typeref:typename:void
setZoomInHeightLimit	.\\ChartDirector\\chartdir.h	/^	void setZoomInHeightLimit(double viewPortHeight) { CViewPortManager_setZoomInHeightLimit(ptr, v/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setZoomInRatio	.\\ChartViewer.cpp	/^void CChartViewer::setZoomInRatio(double ratio)$/;"	f	class:CChartViewer	typeref:typename:void
setZoomInWidthLimit	.\\ChartDirector\\chartdir.h	/^	void setZoomInWidthLimit(double viewPortWidth) { CViewPortManager_setZoomInWidthLimit(ptr, view/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setZoomOutHeightLimit	.\\ChartDirector\\chartdir.h	/^	void setZoomOutHeightLimit(double viewPortHeight){  CViewPortManager_setZoomOutHeightLimit(ptr,/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setZoomOutRatio	.\\ChartViewer.cpp	/^void CChartViewer::setZoomOutRatio(double ratio)$/;"	f	class:CChartViewer	typeref:typename:void
setZoomOutWidthLimit	.\\ChartDirector\\chartdir.h	/^	void setZoomOutWidthLimit(double viewPortWidth){  CViewPortManager_setZoomOutWidthLimit(ptr, vi/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
setZoomScrollDirection	.\\ChartDirector\\chartdir.h	/^	void setZoomScrollDirection(int zoomDirection, int scrollDirection)$/;"	f	class:CD_NAMESPACE::ViewPortControlBase	typeref:typename:void
shearTransform	.\\ChartDirector\\chartdir.h	/^	void shearTransform(double xShear, double yShear = 0, int bgColor = 0xffffff,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
shift	.\\ChartDirector\\chartdir.h	/^	ArrayMath& shift(int offset = 1, double fillValue = Chart::NoValue) { CArrayMath_shift(ptr, off/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
silverColor	.\\ChartDirector\\chartdir.h	/^	static inline int silverColor(int angle = 90) { return metalColor(0xdddddd, angle); }$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
silverGradient	.\\ChartDirector\\chartdir.h	/^	static const int silverGradient[] = {0, 0xC8C8C8, 0x60, 0xF8F8F8, 0xB0, 0xE0E0E0, 0x100, 0xC8C8/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const int[]
silverGradient	.\\ChartDirector\\chartdir.h	/^static const int * const silverGradient = Chart::silverGradient;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const int * const
softLighting	.\\ChartDirector\\chartdir.h	/^	static inline int softLighting(int direction = Chart::Top, int raisedEffect = 4)$/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:int
sol	.\\Error.h	/^    const char* sol;$/;"	m	struct:__anon99cd842f0108	typeref:typename:const char *
sphereTransform	.\\ChartDirector\\chartdir.h	/^	void sphereTransform(int xDiameter, int yDiameter, int bgColor = 0xffffff,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
startDrag	.\\ChartDirector\\chartdir.h	/^	void startDrag() { CViewPortManager_startDrag(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
state	.\\Error.h	/^    const char* state;$/;"	m	struct:__anon99cd842f0108	typeref:typename:const char *
state	.\\gridctrl_src\\GridCtrl.h	/^    UINT     state;       \/\/ Cell state (selected\/focus etc)$/;"	m	class:CGridCell	typeref:typename:UINT
state	.\\gridctrl_src\\GridCtrl.h	/^    UINT     state;       \/\/ cell state (focus\/hilighted etc)$/;"	m	struct:_GV_ITEM	typeref:typename:UINT
stdDev	.\\ChartDirector\\chartdir.h	/^	double stdDev() const { return CArrayMath_stdDev(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:double
strMeas	.\\GageDialog.h	/^	const char* strMeas;$/;"	m	struct:__anon275519290108	typeref:typename:const char *
sub	.\\ChartDirector\\chartdir.h	/^	ArrayMath& sub(DoubleArray b) { CArrayMath_sub(ptr, b.data, b.len); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
sub	.\\ChartDirector\\chartdir.h	/^	ArrayMath& sub(double b) { CArrayMath_sub2(ptr, b); return *this; }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
sum	.\\ChartDirector\\chartdir.h	/^	double sum() const { return CArrayMath_sum(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:double
surface	.\\ChartDirector\\chartdir.h	/^	void surface(double x1, double y1, double x2, double y2, int depthX, int depthY,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
swapXY	.\\ChartDirector\\chartdir.h	/^	void swapXY(bool b = true) { CXYChart_swapXY(ptr, b); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:void
syncAxis	.\\ChartDirector\\chartdir.h	/^	void syncAxis(const Axis *axis, double slope = 1, double intercept = 0)$/;"	f	class:CD_NAMESPACE::Axis	typeref:typename:void
syncDateAxisWithViewPort	.\\ChartDirector\\chartdir.h	/^    void syncDateAxisWithViewPort(const char *id, Axis *axis)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
syncLinearAxisWithViewPort	.\\ChartDirector\\chartdir.h	/^    void syncLinearAxisWithViewPort(const char *id, Axis *axis)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
syncLogAxisWithViewPort	.\\ChartDirector\\chartdir.h	/^    void syncLogAxisWithViewPort(const char *id, Axis *axis)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
syncState	.\\ChartViewer.cpp	/^void CViewPortControl::syncState()$/;"	f	class:CViewPortControl	typeref:typename:void
syncYAxis	.\\ChartDirector\\chartdir.h	/^	void syncYAxis(double slope = 1, double intercept = 0)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:void
szText	.\\gridctrl_src\\GridCtrl.h	/^    CString  szText;      \/\/ Cell text (or binary data if you wish...)$/;"	m	class:CGridCell	typeref:typename:CString
szText	.\\gridctrl_src\\GridCtrl.h	/^    CString  szText;      \/\/ Text in cell$/;"	m	struct:_GV_ITEM	typeref:typename:CString
t_string	.\\ChartViewer.h	/^	TCHAR *t_string;$/;"	m	class:UTF8toTCHAR	typeref:typename:TCHAR *
tagGV_DISPINFO	.\\gridctrl_src\\GridCtrl.h	/^typedef struct tagGV_DISPINFO { $/;"	s
tagNM_GRIDVIEW	.\\gridctrl_src\\GridCtrl.h	/^typedef struct tagNM_GRIDVIEW { $/;"	s
testFont	.\\ChartDirector\\chartdir.h	/^	static inline bool testFont(const char *font, int fontIndex, double fontHeight, $/;"	f	namespace:CD_NAMESPACE::Chart	typeref:typename:bool
testFont	.\\ChartDirector\\chartdir.h	/^static inline bool testFont(const char *font, int fontIndex, double fontHeight,$/;"	f	namespace:CD_NAMESPACE	typeref:typename:bool
text	.\\ChartDirector\\chartdir.h	/^	TTFText* text(const char *_text, const char *font, int fontIndex,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:TTFText *
text	.\\ChartDirector\\chartdir.h	/^	TTFText* text(const char *str, const char *font, double fontSize)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:TTFText *
text	.\\ChartDirector\\chartdir.h	/^	TTFText* text(const wchar_t *_text, const char *font, int fontIndex,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:TTFText *
text	.\\ChartDirector\\chartdir.h	/^	TTFText* text(const wchar_t *str, const char *font, double fontSize)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:TTFText *
text	.\\ChartDirector\\chartdir.h	/^	void text(const char *str, const char *font, double fontSize,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
text	.\\ChartDirector\\chartdir.h	/^	void text(const char *str, const char *font, int fontIndex, double fontHeight, double fontWidth/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
text	.\\ChartDirector\\chartdir.h	/^	void text(const wchar_t *str, const char *font, double fontSize,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
text	.\\ChartDirector\\chartdir.h	/^	void text(const wchar_t *str, const char *font, int fontIndex, double fontHeight, double fontWi/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
theApp	.\\ACE400Gage.cpp	/^CACE400GageApp theApp;$/;"	v	typeref:typename:CACE400GageApp
tile	.\\ChartDirector\\chartdir.h	/^	void tile(const DrawArea *d, int transparency)$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
title	.\\Error.h	/^    const char* title;$/;"	m	struct:__anon99cd842f0108	typeref:typename:const char *
toImageX	.\\ChartViewer.cpp	/^double CViewPortControl::toImageX(int x)$/;"	f	class:CViewPortControl	typeref:typename:double
toImageY	.\\ChartViewer.cpp	/^double CViewPortControl::toImageY(int y)$/;"	f	class:CViewPortControl	typeref:typename:double
transparentPalette	.\\ChartDirector\\chartdir.h	/^	static const int transparentPalette[] =$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const int[]
transparentPalette	.\\ChartDirector\\chartdir.h	/^static const int * const transparentPalette = Chart::transparentPalette;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const int * const
trim	.\\ChartDirector\\chartdir.h	/^	ArrayMath& trim(int startIndex = 0, int len = -1)$/;"	f	class:CD_NAMESPACE::ArrayMath	typeref:typename:ArrayMath &
uA	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
uohm	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
updateChartViewerIfNecessary	.\\ChartViewer.cpp	/^void CViewPortControl::updateChartViewerIfNecessary()$/;"	f	class:CViewPortControl	typeref:typename:void
updateDisplay	.\\ChartViewer.cpp	/^void CChartViewer::updateDisplay()$/;"	f	class:CChartViewer	typeref:typename:void
updateDisplay	.\\ChartViewer.cpp	/^void CViewPortControl::updateDisplay()$/;"	f	class:CViewPortControl	typeref:typename:void
updateFullRangeH	.\\ChartDirector\\chartdir.h	/^	bool updateFullRangeH(const char *id, double minValue, double maxValue, int updateType)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
updateFullRangeV	.\\ChartDirector\\chartdir.h	/^	bool updateFullRangeV(const char *id, double minValue, double maxValue, int updateType)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
updateViewPort	.\\ChartViewer.cpp	/^void CChartViewer::updateViewPort(bool needUpdateChart,	bool needUpdateImageMap)$/;"	f	class:CChartViewer	typeref:typename:void
useYAxisCache	.\\ChartDirector\\chartdir.h	/^	Axis *useYAxisCache;$/;"	m	class:CD_NAMESPACE::DataSet	typeref:typename:Axis *
usec	.\\Globals.h	/^enum UNIT			{ sec=0, msec=1, usec=2, mA, uA, Mohm, Kohm, ohm, mohm, uohm };\/\/ sec=0, msec=1, u/;"	e	enum:UNIT
utf8_string	.\\ChartDirector\\chartdir.h	/^	char *utf8_string;$/;"	m	class:CD_NAMESPACE::WCHARtoUTF8	typeref:typename:char *
utf8_string	.\\ChartViewer.h	/^	char *utf8_string;$/;"	m	class:TCHARtoUTF8	typeref:typename:char *
vCylinderTransform	.\\ChartDirector\\chartdir.h	/^	void vCylinderTransform(int xDiameter, int bgColor = 0xffffff,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
vFlip	.\\ChartDirector\\chartdir.h	/^	void vFlip() { CDrawArea_vFlip(ptr); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
vTriangleTransform	.\\ChartDirector\\chartdir.h	/^	void vTriangleTransform(int tHeight = -1, int bgColor = 0xffffff,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
validateViewPort	.\\ChartDirector\\chartdir.h	/^	void validateViewPort() { CViewPortManager_validateViewPort(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:void
vline	.\\ChartDirector\\chartdir.h	/^	void vline(int y1, int y2, int x, int c) { CDrawArea_vline(ptr, y1, y2, x, c); }$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
w_string	.\\ChartDirector\\chartdir.h	/^	wchar_t *w_string;$/;"	m	class:CD_NAMESPACE::UTF8toWCHAR	typeref:typename:wchar_t *
waveTransform	.\\ChartDirector\\chartdir.h	/^	void waveTransform(int period, double amplitude, double direction = 0,$/;"	f	class:CD_NAMESPACE::DrawArea	typeref:typename:void
whiteOnBlackPalette	.\\ChartDirector\\chartdir.h	/^	static const int whiteOnBlackPalette[] =$/;"	v	namespace:CD_NAMESPACE::Chart	typeref:typename:const int[]
whiteOnBlackPalette	.\\ChartDirector\\chartdir.h	/^static const int * const whiteOnBlackPalette = Chart::whiteOnBlackPalette;$/;"	v	namespace:CD_NAMESPACE	typeref:typename:const int * const
xAxis	.\\ChartDirector\\chartdir.h	/^	Axis *xAxis() { Axis *ret = new Axis(CThreeDChart_xAxis(ptr)); reg(ret); return ret; }$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:Axis *
xAxis	.\\ChartDirector\\chartdir.h	/^	Axis *xAxis() { return regAxis(CXYChart_xAxis(ptr)); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:Axis *
xAxis2	.\\ChartDirector\\chartdir.h	/^	Axis *xAxis2() { return regAxis(CXYChart_xAxis2(ptr)); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:Axis *
xZoneColor	.\\ChartDirector\\chartdir.h	/^	int xZoneColor(double threshold, int belowColor, int aboveColor)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:int
xZoneColor	.\\ChartDirector\\chartdir.h	/^	int xZoneColor(double threshold, int belowColor, int aboveColor)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:int
yAxis	.\\ChartDirector\\chartdir.h	/^	Axis *yAxis() { Axis *ret = new Axis(CThreeDChart_yAxis(ptr)); reg(ret); return ret; }$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:Axis *
yAxis	.\\ChartDirector\\chartdir.h	/^	Axis *yAxis() { return regAxis(CXYChart_yAxis(ptr)); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:Axis *
yAxis2	.\\ChartDirector\\chartdir.h	/^	Axis *yAxis2() { return regAxis(CXYChart_yAxis2(ptr)); }$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:Axis *
yZoneColor	.\\ChartDirector\\chartdir.h	/^	int yZoneColor(double threshold, int belowColor, int aboveColor, bool yAxis = true)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:int
yZoneColor	.\\ChartDirector\\chartdir.h	/^	int yZoneColor(double threshold, int belowColor, int aboveColor, const Axis *_yAxis = 0)$/;"	f	class:CD_NAMESPACE::XYChart	typeref:typename:int
yZoneColor	.\\ChartDirector\\chartdir.h	/^	int yZoneColor(double threshold, int belowColor, int aboveColor, const Axis *yAxis)$/;"	f	class:CD_NAMESPACE::Layer	typeref:typename:int
zAxis	.\\ChartDirector\\chartdir.h	/^	Axis *zAxis() { Axis *ret = new Axis(CThreeDChart_zAxis(ptr)); reg(ret); return ret; }$/;"	f	class:CD_NAMESPACE::ThreeDChart	typeref:typename:Axis *
zoomAround	.\\ChartDirector\\chartdir.h	/^	bool zoomAround(int x, int y, double xZoomRatio, double yZoomRatio)$/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
zoomAt	.\\ChartDirector\\chartdir.h	/^	bool zoomAt(int zoomDirection, int x, int y, double zoomRatio) $/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
zoomInCursorA	.\\ChartViewer.cpp	/^static const unsigned int zoomInCursorA[] = $/;"	v	typeref:typename:const unsigned int[]	file:
zoomInCursorB	.\\ChartViewer.cpp	/^static const unsigned int zoomInCursorB[] = $/;"	v	typeref:typename:const unsigned int[]	file:
zoomOutCursorA	.\\ChartViewer.cpp	/^static const unsigned int zoomOutCursorA[] =	$/;"	v	typeref:typename:const unsigned int[]	file:
zoomOutCursorB	.\\ChartViewer.cpp	/^static const unsigned int zoomOutCursorB[] =	$/;"	v	typeref:typename:const unsigned int[]	file:
zoomTo	.\\ChartDirector\\chartdir.h	/^	bool zoomTo(int zoomDirection, int x1, int y1, int x2, int y2) $/;"	f	class:CD_NAMESPACE::ViewPortManager	typeref:typename:bool
~AngularAxis	.\\ChartDirector\\chartdir.h	/^	~AngularAxis() {}$/;"	f	class:CD_NAMESPACE::AngularAxis
~AreaLayer	.\\ChartDirector\\chartdir.h	/^	~AreaLayer() {}$/;"	f	class:CD_NAMESPACE::AreaLayer
~ArrayMath	.\\ChartDirector\\chartdir.h	/^	~ArrayMath() { CArrayMath_destroy(ptr); }$/;"	f	class:CD_NAMESPACE::ArrayMath
~AutoDestroy	.\\ChartDirector\\chartdir.h	/^	virtual ~AutoDestroy() {}$/;"	f	class:CD_NAMESPACE::AutoDestroy
~Axis	.\\ChartDirector\\chartdir.h	/^	~Axis() {}$/;"	f	class:CD_NAMESPACE::Axis
~BarLayer	.\\ChartDirector\\chartdir.h	/^	~BarLayer() {}$/;"	f	class:CD_NAMESPACE::BarLayer
~BaseBoxLayer	.\\ChartDirector\\chartdir.h	/^	~BaseBoxLayer() {}$/;"	f	class:CD_NAMESPACE::BaseBoxLayer
~BaseChart	.\\ChartDirector\\chartdir.h	/^	~BaseChart() { if (--(*refCount) == 0) { CBaseChart_destroy(ptr); delete refCount; } }$/;"	f	class:CD_NAMESPACE::BaseChart
~Box	.\\ChartDirector\\chartdir.h	/^	~Box() {}$/;"	f	class:CD_NAMESPACE::Box
~BoxWhiskerLayer	.\\ChartDirector\\chartdir.h	/^	~BoxWhiskerLayer() {}$/;"	f	class:CD_NAMESPACE::BoxWhiskerLayer
~CComboEdit	.\\gridctrl_src\\InPlaceList.cpp	/^CComboEdit::~CComboEdit()$/;"	f	class:CComboEdit
~CDMLTable	.\\ChartDirector\\chartdir.h	/^	~CDMLTable() {}$/;"	f	class:CD_NAMESPACE::CDMLTable
~CError	.\\Error.cpp	/^CError::~CError()$/;"	f	class:CError
~CGlobals	.\\Globals.cpp	/^CGlobals::~CGlobals()$/;"	f	class:CGlobals
~CGridCtrl	.\\gridctrl_src\\GridCtrl.cpp	/^CGridCtrl::~CGridCtrl()$/;"	f	class:CGridCtrl
~CGridDropTarget	.\\gridctrl_src\\GridDropTarget.cpp	/^CGridDropTarget::~CGridDropTarget()$/;"	f	class:CGridDropTarget
~CInPlaceEdit	.\\gridctrl_src\\InPlaceEdit.cpp	/^CInPlaceEdit::~CInPlaceEdit()$/;"	f	class:CInPlaceEdit
~CInPlaceList	.\\gridctrl_src\\InPlaceList.cpp	/^CInPlaceList::~CInPlaceList()$/;"	f	class:CInPlaceList
~CMemDC	.\\gridctrl_src\\MemDC.h	/^    ~CMemDC()$/;"	f	class:CMemDC
~CSystem	.\\System.cpp	/^CSystem::~CSystem()$/;"	f	class:CSystem
~CTitleTip	.\\gridctrl_src\\TitleTip.cpp	/^CTitleTip::~CTitleTip()$/;"	f	class:CTitleTip
~CandleStickLayer	.\\ChartDirector\\chartdir.h	/^	~CandleStickLayer() {}$/;"	f	class:CD_NAMESPACE::CandleStickLayer
~ColorAxis	.\\ChartDirector\\chartdir.h	/^	~ColorAxis() {}$/;"	f	class:CD_NAMESPACE::ColorAxis
~ContourLayer	.\\ChartDirector\\chartdir.h	/^	~ContourLayer() {}$/;"	f	class:CD_NAMESPACE::ContourLayer
~DataSet	.\\ChartDirector\\chartdir.h	/^	~DataSet() {}$/;"	f	class:CD_NAMESPACE::DataSet
~DrawArea	.\\ChartDirector\\chartdir.h	/^	~DrawArea() { if (own_this) CDrawArea_destroy(ptr); }$/;"	f	class:CD_NAMESPACE::DrawArea
~FinanceChart	.\\ChartDirector\\FinanceChart.h	/^    public: ~FinanceChart()$/;"	f	class:FinanceChart
~FinanceSimulator	.\\ChartDirector\\chartdir.h	/^	~FinanceSimulator() { CFinanceSimulator_destroy(ptr); }$/;"	f	class:CD_NAMESPACE::FinanceSimulator
~FreeCursors	.\\ChartViewer.cpp	/^	~FreeCursors()$/;"	f	class:FreeCursors	file:
~GarbageContainer	.\\ChartDirector\\chartdir.h	/^	virtual ~GarbageContainer() { while (0 != root) { GarbagePtr *temp = root; root = root->next; d/;"	f	class:CD_NAMESPACE::GarbageContainer
~GarbagePtr	.\\ChartDirector\\chartdir.h	/^	~GarbagePtr() { delete ptr; }$/;"	f	class:CD_NAMESPACE::GarbagePtr
~HLOCLayer	.\\ChartDirector\\chartdir.h	/^	~HLOCLayer() {}$/;"	f	class:CD_NAMESPACE::HLOCLayer
~ImageMapHandler	.\\ChartDirector\\chartdir.h	/^	~ImageMapHandler() { CImageMapHandler_destroy(ptr); }$/;"	f	class:CD_NAMESPACE::ImageMapHandler
~InterLineLayer	.\\ChartDirector\\chartdir.h	/^	~InterLineLayer() {}$/;"	f	class:CD_NAMESPACE::InterLineLayer
~Layer	.\\ChartDirector\\chartdir.h	/^	~Layer() { delete[] dataSetCache; }$/;"	f	class:CD_NAMESPACE::Layer
~LegendBox	.\\ChartDirector\\chartdir.h	/^	~LegendBox() {}$/;"	f	class:CD_NAMESPACE::LegendBox
~Line	.\\ChartDirector\\chartdir.h	/^	~Line() {}$/;"	f	class:CD_NAMESPACE::Line
~LineLayer	.\\ChartDirector\\chartdir.h	/^	~LineLayer() {}$/;"	f	class:CD_NAMESPACE::LineLayer
~Mark	.\\ChartDirector\\chartdir.h	/^	~Mark() {}$/;"	f	class:CD_NAMESPACE::Mark
~MultiChart	.\\ChartDirector\\chartdir.h	/^	~MultiChart() { delete[] charts; }$/;"	f	class:CD_NAMESPACE::MultiChart
~PlotArea	.\\ChartDirector\\chartdir.h	/^	~PlotArea() {}$/;"	f	class:CD_NAMESPACE::PlotArea
~PolarAreaLayer	.\\ChartDirector\\chartdir.h	/^	~PolarAreaLayer() {}$/;"	f	class:CD_NAMESPACE::PolarAreaLayer
~PolarLayer	.\\ChartDirector\\chartdir.h	/^	~PolarLayer() {}$/;"	f	class:CD_NAMESPACE::PolarLayer
~PolarLineLayer	.\\ChartDirector\\chartdir.h	/^	~PolarLineLayer() {}$/;"	f	class:CD_NAMESPACE::PolarLineLayer
~PolarSplineAreaLayer	.\\ChartDirector\\chartdir.h	/^	~PolarSplineAreaLayer() {}$/;"	f	class:CD_NAMESPACE::PolarSplineAreaLayer
~PolarSplineLineLayer	.\\ChartDirector\\chartdir.h	/^	~PolarSplineLineLayer() {}$/;"	f	class:CD_NAMESPACE::PolarSplineLineLayer
~PolarVectorLayer	.\\ChartDirector\\chartdir.h	/^	~PolarVectorLayer() {}$/;"	f	class:CD_NAMESPACE::PolarVectorLayer
~PyramidLayer	.\\ChartDirector\\chartdir.h	/^	~PyramidLayer() {}$/;"	f	class:CD_NAMESPACE::PyramidLayer
~RanSeries	.\\ChartDirector\\chartdir.h	/^	~RanSeries() { CRanSeries_destroy(ptr); }$/;"	f	class:CD_NAMESPACE::RanSeries
~RanTable	.\\ChartDirector\\chartdir.h	/^	~RanTable() { CRanTable_destroy(ptr); }$/;"	f	class:CD_NAMESPACE::RanTable
~Sector	.\\ChartDirector\\chartdir.h	/^	~Sector() {}$/;"	f	class:CD_NAMESPACE::Sector
~SplineLayer	.\\ChartDirector\\chartdir.h	/^	~SplineLayer() {}$/;"	f	class:CD_NAMESPACE::SplineLayer
~StepLineLayer	.\\ChartDirector\\chartdir.h	/^	~StepLineLayer() {}$/;"	f	class:CD_NAMESPACE::StepLineLayer
~TCHARtoUTF8	.\\ChartViewer.h	/^	~TCHARtoUTF8()$/;"	f	class:TCHARtoUTF8
~TTFText	.\\ChartDirector\\chartdir.h	/^	~TTFText() { CTTFText_destroy(ptr); }$/;"	f	class:CD_NAMESPACE::TTFText
~TextBox	.\\ChartDirector\\chartdir.h	/^	~TextBox() {}$/;"	f	class:CD_NAMESPACE::TextBox
~ThreeDScatterGroup	.\\ChartDirector\\chartdir.h	/^	~ThreeDScatterGroup() {}$/;"	f	class:CD_NAMESPACE::ThreeDScatterGroup
~TreeMapNode	.\\ChartDirector\\chartdir.h	/^	~TreeMapNode() {}$/;"	f	class:CD_NAMESPACE::TreeMapNode
~TrendLayer	.\\ChartDirector\\chartdir.h	/^	~TrendLayer() {}$/;"	f	class:CD_NAMESPACE::TrendLayer
~UTF8toTCHAR	.\\ChartViewer.h	/^	~UTF8toTCHAR()$/;"	f	class:UTF8toTCHAR
~UTF8toWCHAR	.\\ChartDirector\\chartdir.h	/^	~UTF8toWCHAR()$/;"	f	class:CD_NAMESPACE::UTF8toWCHAR
~VectorLayer	.\\ChartDirector\\chartdir.h	/^	~VectorLayer() {}$/;"	f	class:CD_NAMESPACE::VectorLayer
~ViewPortControlBase	.\\ChartDirector\\chartdir.h	/^	~ViewPortControlBase() { CViewPortControlBase_destroy(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortControlBase
~ViewPortManager	.\\ChartDirector\\chartdir.h	/^	~ViewPortManager() { CViewPortManager_destroy(ptr); }$/;"	f	class:CD_NAMESPACE::ViewPortManager
~WCHARtoUTF8	.\\ChartDirector\\chartdir.h	/^	~WCHARtoUTF8()$/;"	f	class:CD_NAMESPACE::WCHARtoUTF8
~XYChart	.\\ChartDirector\\chartdir.h	/^	~XYChart() { delete[] layerCache; delete[] axisCache; }$/;"	f	class:CD_NAMESPACE::XYChart
